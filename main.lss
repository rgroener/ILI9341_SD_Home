
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016c  00800100  00006ed6  00006f6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ed6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000390  0080026c  0080026c  000070d6  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  000070d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000070f8  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000128  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000a8fb  00000000  00000000  00007260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001c25  00000000  00000000  00011b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00009bc2  00000000  00000000  00013780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  0000178c  00000000  00000000  0001d344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000157e  00000000  00000000  0001ead0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000ac8a  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000580  00000000  00000000  0002acd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__ctors_end>
       4:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
       8:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
       c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      10:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      14:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      18:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      1c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      20:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      24:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      28:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      2c:	0c 94 80 03 	jmp	0x700	; 0x700 <__vector_11>
      30:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      34:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      38:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      3c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      40:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      44:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      48:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__vector_18>
      4c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      50:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      54:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      58:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      5c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      60:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      64:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <DPS310_readCoeffs+0xa6>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__c.2785>:
      ea:	66 72 65 65 3a 20 20 20 00                          free:   .

000000f3 <__c.2783>:
      f3:	66 6f 72 6d 61 74 3a 20 00                          format: .

000000fc <__c.2781>:
      fc:	77 72 2e 70 72 2e 3a 20 00                          wr.pr.: .

00000105 <__c.2779>:
     105:	63 6f 70 79 3a 20 20 20 00                          copy:   .

0000010e <__c.2777>:
     10e:	4d 42 0a 00                                         MB..

00000112 <__c.2775>:
     112:	73 69 7a 65 3a 20 20 20 00                          size:   .

0000011b <__c.2773>:
     11b:	64 61 74 65 3a 20 20 20 00                          date:   .

00000124 <__c.2771>:
     124:	73 65 72 69 61 6c 3a 20 30 78 00                    serial: 0x.

0000012f <__c.2769>:
     12f:	72 65 76 3a 20 20 20 20 00                          rev:    .

00000138 <__c.2767>:
     138:	70 72 6f 64 3a 20 20 20 00                          prod:   .

00000141 <__c.2765>:
     141:	6f 65 6d 3a 20 20 20 20 00                          oem:    .

0000014a <__c.2763>:
     14a:	6d 61 6e 75 66 3a 20 20 30 78 00                    manuf:  0x.

00000155 <__c.2614>:
     155:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     165:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000174 <__c.2611>:
     174:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     184:	65 6d 20 66 61 69 6c 65 64 0a 00                    em failed..

0000018f <__c.2609>:
     18f:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     19f:	6e 20 66 61 69 6c 65 64 0a 00                       n failed..

000001a9 <__c.2607>:
     1a9:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     1b9:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0a 00           ation failed..

000001c7 <font>:
     1c7:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     1d7:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     1e7:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     1f7:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     207:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     217:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     227:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     237:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     247:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     257:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     267:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     277:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     287:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     297:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     2a7:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     2b7:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     2c7:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     2d7:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     2e7:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     2f7:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     307:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     317:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     327:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     337:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     347:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     357:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     367:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     377:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     387:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     397:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     3a7:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     3b7:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     3c7:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     3d7:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     3e7:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     3f7:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     407:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     417:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     427:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     437:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     447:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     457:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     467:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     477:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     487:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     497:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     4a7:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     4b7:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     4c7:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     4d7:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     4e7:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     4f7:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     507:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     517:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     527:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     537:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     547:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     557:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     567:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     577:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     587:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     597:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     5a7:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     5b7:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     5c7:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     5d7:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     5e7:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     5f7:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     607:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     617:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     627:	fc 4a 4a 4a 34 7e 02 02 06 06 02 7e 02 7e 02 63     .JJJ4~.....~.~.c
     637:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     647:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     657:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     667:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     677:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     687:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     697:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     6a7:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     6b7:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

000006c2 <__ctors_end>:
     6c2:	11 24       	eor	r1, r1
     6c4:	1f be       	out	0x3f, r1	; 63
     6c6:	cf ef       	ldi	r28, 0xFF	; 255
     6c8:	d8 e0       	ldi	r29, 0x08	; 8
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	cd bf       	out	0x3d, r28	; 61

000006ce <__do_copy_data>:
     6ce:	12 e0       	ldi	r17, 0x02	; 2
     6d0:	a0 e0       	ldi	r26, 0x00	; 0
     6d2:	b1 e0       	ldi	r27, 0x01	; 1
     6d4:	e6 ed       	ldi	r30, 0xD6	; 214
     6d6:	fe e6       	ldi	r31, 0x6E	; 110
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <__do_copy_data+0x10>
     6da:	05 90       	lpm	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	ac 36       	cpi	r26, 0x6C	; 108
     6e0:	b1 07       	cpc	r27, r17
     6e2:	d9 f7       	brne	.-10     	; 0x6da <__do_copy_data+0xc>

000006e4 <__do_clear_bss>:
     6e4:	25 e0       	ldi	r18, 0x05	; 5
     6e6:	ac e6       	ldi	r26, 0x6C	; 108
     6e8:	b2 e0       	ldi	r27, 0x02	; 2
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <.do_clear_bss_start>

000006ec <.do_clear_bss_loop>:
     6ec:	1d 92       	st	X+, r1

000006ee <.do_clear_bss_start>:
     6ee:	ac 3f       	cpi	r26, 0xFC	; 252
     6f0:	b2 07       	cpc	r27, r18
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <.do_clear_bss_loop>
     6f4:	0e 94 b4 2c 	call	0x5968	; 0x5968 <main>
     6f8:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <_exit>

000006fc <__bad_interrupt>:
     6fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000700 <__vector_11>:
static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 
static uint8_t print_disk_info(const struct fat_fs_struct* fs);

ISR (TIMER1_COMPA_vect)
{
     700:	1f 92       	push	r1
     702:	1f b6       	in	r1, 0x3f	; 63
     704:	1f 92       	push	r1
     706:	11 24       	eor	r1, r1
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
	ms10++;
     70c:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <ms10>
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <ms10>
	if(entprell != 0)entprell--;
     716:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <entprell>
     71a:	99 23       	and	r25, r25
     71c:	19 f0       	breq	.+6      	; 0x724 <__vector_11+0x24>
     71e:	91 50       	subi	r25, 0x01	; 1
     720:	90 93 c5 05 	sts	0x05C5, r25	; 0x8005c5 <entprell>
	if(ms10==10)	//100ms
     724:	8a 30       	cpi	r24, 0x0A	; 10
     726:	39 f4       	brne	.+14     	; 0x736 <__vector_11+0x36>
     728:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <ms100>
	{
		ms10=0;
     72c:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <ms10>
		ms100++;
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <ms100>
	}
    if(ms100==10)	//sekunde
     736:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <ms100>
     73a:	8a 30       	cpi	r24, 0x0A	; 10
     73c:	51 f4       	brne	.+20     	; 0x752 <__vector_11+0x52>
     73e:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <sec>
	{
		ms100=0;
     742:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <ms100>
		sec++;
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <sec>
		messung=1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <messung>
	}
	if(sec==60)	//Minute
     752:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <sec>
     756:	8c 33       	cpi	r24, 0x3C	; 60
     758:	39 f4       	brne	.+14     	; 0x768 <__vector_11+0x68>
	{
		sec=0;
     75a:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <sec>
		min++;
     75e:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <min>
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <min>
		
	}
}
     768:	9f 91       	pop	r25
     76a:	8f 91       	pop	r24
     76c:	1f 90       	pop	r1
     76e:	1f be       	out	0x3f, r1	; 63
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <DPS310_read>:

}//end of main


uint8_t DPS310_read(uint8_t reg)
{
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
		uint8_t result=0;
		
		TWIStart();
     778:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <TWIStart>
		if(TWIGetStatus() != 0x08)return 123;
     77c:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     780:	88 30       	cpi	r24, 0x08	; 8
     782:	49 f5       	brne	.+82     	; 0x7d6 <DPS310_read+0x62>
		TWIWrite(DPS310_W);
     784:	8e ee       	ldi	r24, 0xEE	; 238
     786:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 2;
     78a:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     78e:	88 31       	cpi	r24, 0x18	; 24
     790:	21 f5       	brne	.+72     	; 0x7da <DPS310_read+0x66>
		TWIWrite(reg);
     792:	8c 2f       	mov	r24, r28
     794:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 3;
     798:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     79c:	c3 e0       	ldi	r28, 0x03	; 3
     79e:	88 32       	cpi	r24, 0x28	; 40
     7a0:	b9 f4       	brne	.+46     	; 0x7d0 <DPS310_read+0x5c>
		TWIStart();
     7a2:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <TWIStart>
		if(TWIGetStatus() != 0x10)return 4; //repetet Start sent?
     7a6:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     7aa:	c4 e0       	ldi	r28, 0x04	; 4
     7ac:	80 31       	cpi	r24, 0x10	; 16
     7ae:	81 f4       	brne	.+32     	; 0x7d0 <DPS310_read+0x5c>
		TWIWrite(DPS310_R);
     7b0:	8f ee       	ldi	r24, 0xEF	; 239
     7b2:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x40)return 5;
     7b6:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     7ba:	c5 e0       	ldi	r28, 0x05	; 5
     7bc:	80 34       	cpi	r24, 0x40	; 64
     7be:	41 f4       	brne	.+16     	; 0x7d0 <DPS310_read+0x5c>
		result=TWIReadNACK();
     7c0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <TWIReadNACK>
     7c4:	c8 2f       	mov	r28, r24
		TWIStop();
     7c6:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TWIStop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ca:	80 ea       	ldi	r24, 0xA0	; 160
     7cc:	8a 95       	dec	r24
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <DPS310_read+0x58>
		_delay_us(30);
	return result;	
//Daten zurueckgeben
}
     7d0:	8c 2f       	mov	r24, r28
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 123;
     7d6:	cb e7       	ldi	r28, 0x7B	; 123
     7d8:	fb cf       	rjmp	.-10     	; 0x7d0 <DPS310_read+0x5c>
		if(TWIGetStatus() != 0x18)return 2;
     7da:	c2 e0       	ldi	r28, 0x02	; 2
     7dc:	f9 cf       	rjmp	.-14     	; 0x7d0 <DPS310_read+0x5c>

000007de <DPS310_write>:
uint8_t DPS310_write(uint8_t reg, uint8_t data)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	d8 2f       	mov	r29, r24
     7e4:	c6 2f       	mov	r28, r22
		TWIStart();
     7e6:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <TWIStart>
		if(TWIGetStatus() != 0x08)return 11;
     7ea:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     7ee:	88 30       	cpi	r24, 0x08	; 8
     7f0:	f1 f4       	brne	.+60     	; 0x82e <DPS310_write+0x50>
		TWIWrite(DPS310_W);
     7f2:	8e ee       	ldi	r24, 0xEE	; 238
     7f4:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x18)return 22;
     7f8:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     7fc:	88 31       	cpi	r24, 0x18	; 24
     7fe:	c9 f4       	brne	.+50     	; 0x832 <DPS310_write+0x54>
		TWIWrite(reg);
     800:	8d 2f       	mov	r24, r29
     802:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 33;
     806:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     80a:	88 32       	cpi	r24, 0x28	; 40
     80c:	a1 f4       	brne	.+40     	; 0x836 <DPS310_write+0x58>
		TWIWrite(data);
     80e:	8c 2f       	mov	r24, r28
     810:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <TWIWrite>
		if(TWIGetStatus() != 0x28)return 44;
     814:	0e 94 02 18 	call	0x3004	; 0x3004 <TWIGetStatus>
     818:	88 32       	cpi	r24, 0x28	; 40
     81a:	79 f4       	brne	.+30     	; 0x83a <DPS310_write+0x5c>
		TWIStop();
     81c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <TWIStop>
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	8a 95       	dec	r24
     824:	f1 f7       	brne	.-4      	; 0x822 <DPS310_write+0x44>
		
		_delay_us(30);
	return 0;	
     826:	80 e0       	ldi	r24, 0x00	; 0
	
	//Daten zurueckgeben
}
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret
		if(TWIGetStatus() != 0x08)return 11;
     82e:	8b e0       	ldi	r24, 0x0B	; 11
     830:	fb cf       	rjmp	.-10     	; 0x828 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x18)return 22;
     832:	86 e1       	ldi	r24, 0x16	; 22
     834:	f9 cf       	rjmp	.-14     	; 0x828 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x28)return 33;
     836:	81 e2       	ldi	r24, 0x21	; 33
     838:	f7 cf       	rjmp	.-18     	; 0x828 <DPS310_write+0x4a>
		if(TWIGetStatus() != 0x28)return 44;
     83a:	8c e2       	ldi	r24, 0x2C	; 44
     83c:	f5 cf       	rjmp	.-22     	; 0x828 <DPS310_write+0x4a>

0000083e <DPS310_readCoeffs>:

int16_t DPS310_readCoeffs(void)
{
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	a6 97       	sbiw	r28, 0x26	; 38
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
	uint8_t coeff_start;
	coeff_start=0x10;
	
	//coeffizienten einlesen und in buffer-Array speichern
	//Addressen 0x10 - 0x21
	for(x=0;x<18;x++)
     856:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <x>
	coeff_start=0x10;
     85a:	10 e1       	ldi	r17, 0x10	; 16
	{
		buffer[x]=DPS310_read(coeff_start);
     85c:	81 2f       	mov	r24, r17
     85e:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     862:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <x>
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	2c 0f       	add	r18, r28
     872:	3d 1f       	adc	r19, r29
     874:	e2 0f       	add	r30, r18
     876:	f3 1f       	adc	r31, r19
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	91 83       	std	Z+1, r25	; 0x01
     87c:	80 83       	st	Z, r24
	__builtin_avr_delay_cycles(__ticks_dc);
     87e:	8f e3       	ldi	r24, 0x3F	; 63
     880:	9c e9       	ldi	r25, 0x9C	; 156
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <DPS310_readCoeffs+0x44>
     886:	00 c0       	rjmp	.+0      	; 0x888 <DPS310_readCoeffs+0x4a>
     888:	00 00       	nop
		_delay_ms(10);
		coeff_start++;
     88a:	1f 5f       	subi	r17, 0xFF	; 255
	for(x=0;x<18;x++)
     88c:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <x>
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <x>
     896:	82 31       	cpi	r24, 0x12	; 18
     898:	08 f3       	brcs	.-62     	; 0x85c <DPS310_readCoeffs+0x1e>
	}
	 
    m_C0=(((int)buffer[0]<<8)|buffer[1])>>4;
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	9c 81       	ldd	r25, Y+4	; 0x04
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	39 81       	ldd	r19, Y+1	; 0x01
     8a2:	28 2b       	or	r18, r24
     8a4:	39 2b       	or	r19, r25
    m_C0=m_C0/2;
     8a6:	45 e0       	ldi	r20, 0x05	; 5
     8a8:	36 95       	lsr	r19
     8aa:	27 95       	ror	r18
     8ac:	4a 95       	dec	r20
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <DPS310_readCoeffs+0x6a>
     8b0:	30 93 a8 05 	sts	0x05A8, r19	; 0x8005a8 <m_C0+0x1>
     8b4:	20 93 a7 05 	sts	0x05A7, r18	; 0x8005a7 <m_C0>
      
    m_C1 = (((uint32_t)buffer[1] & 0x0F) << 8) | (uint32_t)buffer[2];
     8b8:	98 2f       	mov	r25, r24
     8ba:	88 27       	eor	r24, r24
     8bc:	88 27       	eor	r24, r24
     8be:	9f 70       	andi	r25, 0x0F	; 15
     8c0:	2d 81       	ldd	r18, Y+5	; 0x05
     8c2:	3e 81       	ldd	r19, Y+6	; 0x06
     8c4:	82 2b       	or	r24, r18
     8c6:	93 2b       	or	r25, r19
	if(m_C1 & ((uint32_t)1 << 11))
     8c8:	93 fd       	sbrc	r25, 3
     8ca:	a0 c0       	rjmp	.+320    	; 0xa0c <__stack+0x10d>
	{
		m_C1 -= (uint32_t)1 << 12;
     8cc:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <m_C1+0x1>
     8d0:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <m_C1>
	}
      
    m_C00= ((((long)buffer[3]<<8)|buffer[4])<<8)|buffer[5];
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	a0 e0       	ldi	r26, 0x00	; 0
     8dc:	4f 81       	ldd	r20, Y+7	; 0x07
     8de:	58 85       	ldd	r21, Y+8	; 0x08
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	76 2f       	mov	r23, r22
     8e6:	65 2f       	mov	r22, r21
     8e8:	54 2f       	mov	r21, r20
     8ea:	44 27       	eor	r20, r20
     8ec:	09 85       	ldd	r16, Y+9	; 0x09
     8ee:	1a 85       	ldd	r17, Y+10	; 0x0a
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	40 2b       	or	r20, r16
     8f6:	51 2b       	or	r21, r17
     8f8:	62 2b       	or	r22, r18
     8fa:	73 2b       	or	r23, r19
     8fc:	76 2f       	mov	r23, r22
     8fe:	65 2f       	mov	r22, r21
     900:	54 2f       	mov	r21, r20
     902:	44 27       	eor	r20, r20
     904:	48 2b       	or	r20, r24
     906:	59 2b       	or	r21, r25
     908:	6a 2b       	or	r22, r26
     90a:	7b 2b       	or	r23, r27
    m_C00=(m_C00<<8)>>12;
     90c:	76 2f       	mov	r23, r22
     90e:	65 2f       	mov	r22, r21
     910:	54 2f       	mov	r21, r20
     912:	44 27       	eor	r20, r20
     914:	fc e0       	ldi	r31, 0x0C	; 12
     916:	75 95       	asr	r23
     918:	67 95       	ror	r22
     91a:	57 95       	ror	r21
     91c:	47 95       	ror	r20
     91e:	fa 95       	dec	r31
     920:	d1 f7       	brne	.-12     	; 0x916 <__stack+0x17>
     922:	40 93 bb 05 	sts	0x05BB, r20	; 0x8005bb <m_C00>
     926:	50 93 bc 05 	sts	0x05BC, r21	; 0x8005bc <m_C00+0x1>
     92a:	60 93 bd 05 	sts	0x05BD, r22	; 0x8005bd <m_C00+0x2>
     92e:	70 93 be 05 	sts	0x05BE, r23	; 0x8005be <m_C00+0x3>

    m_C10=((((long)buffer[5]<<8)|buffer[6])<<8)|buffer[7];
     932:	ba 2f       	mov	r27, r26
     934:	a9 2f       	mov	r26, r25
     936:	98 2f       	mov	r25, r24
     938:	88 27       	eor	r24, r24
     93a:	4d 85       	ldd	r20, Y+13	; 0x0d
     93c:	5e 85       	ldd	r21, Y+14	; 0x0e
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	84 2b       	or	r24, r20
     944:	95 2b       	or	r25, r21
     946:	a6 2b       	or	r26, r22
     948:	b7 2b       	or	r27, r23
     94a:	ba 2f       	mov	r27, r26
     94c:	a9 2f       	mov	r26, r25
     94e:	98 2f       	mov	r25, r24
     950:	88 27       	eor	r24, r24
     952:	4f 85       	ldd	r20, Y+15	; 0x0f
     954:	58 89       	ldd	r21, Y+16	; 0x10
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	84 2b       	or	r24, r20
     95c:	95 2b       	or	r25, r21
     95e:	a6 2b       	or	r26, r22
     960:	b7 2b       	or	r27, r23
    m_C10=(m_C10<<12)>>12;
     962:	2c e0       	ldi	r18, 0x0C	; 12
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	aa 1f       	adc	r26, r26
     96a:	bb 1f       	adc	r27, r27
     96c:	2a 95       	dec	r18
     96e:	d1 f7       	brne	.-12     	; 0x964 <__stack+0x65>
     970:	3c e0       	ldi	r19, 0x0C	; 12
     972:	b5 95       	asr	r27
     974:	a7 95       	ror	r26
     976:	97 95       	ror	r25
     978:	87 95       	ror	r24
     97a:	3a 95       	dec	r19
     97c:	d1 f7       	brne	.-12     	; 0x972 <__stack+0x73>
     97e:	80 93 91 05 	sts	0x0591, r24	; 0x800591 <m_C10>
     982:	90 93 92 05 	sts	0x0592, r25	; 0x800592 <m_C10+0x1>
     986:	a0 93 93 05 	sts	0x0593, r26	; 0x800593 <m_C10+0x2>
     98a:	b0 93 94 05 	sts	0x0594, r27	; 0x800594 <m_C10+0x3>

    m_C01=((int)buffer[8]<<8)|buffer[9];
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	99 89       	ldd	r25, Y+17	; 0x11
     992:	2b 89       	ldd	r18, Y+19	; 0x13
     994:	3c 89       	ldd	r19, Y+20	; 0x14
     996:	82 2b       	or	r24, r18
     998:	93 2b       	or	r25, r19
     99a:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <m_C01+0x1>
     99e:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <m_C01>

    m_C11=((int)buffer[10]<<8)|buffer[11];
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	9d 89       	ldd	r25, Y+21	; 0x15
     9a6:	2f 89       	ldd	r18, Y+23	; 0x17
     9a8:	38 8d       	ldd	r19, Y+24	; 0x18
     9aa:	82 2b       	or	r24, r18
     9ac:	93 2b       	or	r25, r19
     9ae:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <m_C11+0x1>
     9b2:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <m_C11>

    m_C20=((int)buffer[12]<<8)|buffer[13];
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	99 8d       	ldd	r25, Y+25	; 0x19
     9ba:	2b 8d       	ldd	r18, Y+27	; 0x1b
     9bc:	3c 8d       	ldd	r19, Y+28	; 0x1c
     9be:	82 2b       	or	r24, r18
     9c0:	93 2b       	or	r25, r19
     9c2:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <m_C20+0x1>
     9c6:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <m_C20>

    m_C21=((int)buffer[14]<<8)|buffer[15];
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     9ce:	2f 8d       	ldd	r18, Y+31	; 0x1f
     9d0:	38 a1       	ldd	r19, Y+32	; 0x20
     9d2:	82 2b       	or	r24, r18
     9d4:	93 2b       	or	r25, r19
     9d6:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <m_C21+0x1>
     9da:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <m_C21>

    m_C30=((int)buffer[16]<<8)|buffer[17];
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	99 a1       	ldd	r25, Y+33	; 0x21
     9e2:	2b a1       	ldd	r18, Y+35	; 0x23
     9e4:	3c a1       	ldd	r19, Y+36	; 0x24
     9e6:	82 2b       	or	r24, r18
     9e8:	93 2b       	or	r25, r19
     9ea:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <m_C30+0x1>
     9ee:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <m_C30>
       
    return 0;
}
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	a6 96       	adiw	r28, 0x26	; 38
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret
		m_C1 -= (uint32_t)1 << 12;
     a0c:	90 51       	subi	r25, 0x10	; 16
     a0e:	5e cf       	rjmp	.-324    	; 0x8cc <DPS310_readCoeffs+0x8e>

00000a10 <DPS310_sreset>:


void DPS310_sreset(void)
{
	// softreset of DPS310 sensor
	DPS310_write(0x0c, 0x99);
     a10:	69 e9       	ldi	r22, 0x99	; 153
     a12:	8c e0       	ldi	r24, 0x0C	; 12
     a14:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
     a18:	2f ef       	ldi	r18, 0xFF	; 255
     a1a:	80 e7       	ldi	r24, 0x70	; 112
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	80 40       	sbci	r24, 0x00	; 0
     a22:	90 40       	sbci	r25, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <DPS310_sreset+0xe>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <DPS310_sreset+0x18>
     a28:	00 00       	nop
	_delay_ms(50);
}
     a2a:	08 95       	ret

00000a2c <init_ili9341>:

void init_ili9341(void)
{
	stdout = & mydata;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <__iob+0x3>
     a34:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <__iob+0x2>
	ili9341_init();//initial driver setup to drive ili9341
     a38:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <ili9341_init>
	ili9341_clear(BLACK);//fill screen with black colour
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 86 0c 	call	0x190c	; 0x190c <ili9341_clear>
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	81 ee       	ldi	r24, 0xE1	; 225
     a48:	94 e0       	ldi	r25, 0x04	; 4
     a4a:	21 50       	subi	r18, 0x01	; 1
     a4c:	80 40       	sbci	r24, 0x00	; 0
     a4e:	90 40       	sbci	r25, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <init_ili9341+0x1e>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <init_ili9341+0x28>
     a54:	00 00       	nop
	_delay_ms(100);
	ili9341_setRotation(3);//rotate screen
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <ili9341_setRotation>
     a5c:	8f e3       	ldi	r24, 0x3F	; 63
     a5e:	9f e1       	ldi	r25, 0x1F	; 31
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <init_ili9341+0x34>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <init_ili9341+0x3a>
     a66:	00 00       	nop
	_delay_ms(2);
	ili9341_settextcolour(YELLOW,BLACK);
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	80 ee       	ldi	r24, 0xE0	; 224
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	0e 94 7e 14 	call	0x28fc	; 0x28fc <ili9341_settextcolour>
	ili9341_setcursor(0,0);
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
	ili9341_settextsize(2);
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	0c 94 87 14 	jmp	0x290e	; 0x290e <ili9341_settextsize>

00000a86 <DPS310_init>:
}
void DPS310_init(uint8_t acc)
{
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	c8 2f       	mov	r28, r24
						break;
			case HIGH: 	DPS310_write(PRS_CFG, 0x26);//4 messungen / sek   64 fach ovs
						DPS310_write(TMP_CFG, 0xA0);//externer sens  4 messung / sek  single ovs
						DPS310_write(CFG_REG, 0x04);//p bit shift on 
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
						temp_ovs = 1;
     a94:	11 e0       	ldi	r17, 0x01	; 1
						pres_ovs = 64;
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	f8 2e       	mov	r15, r24
						break;
			case ULTRA:	DPS310_write(PRS_CFG, 0xF7);//4 messungen / sek   64 fach ovs
						DPS310_write(TMP_CFG, 0xD7);//externer sens  4 messung / sek  single ovs
						DPS310_write(CFG_REG, 0x0C);//p bit shift on 
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
						temp_ovs = 128;
     a9a:	00 e8       	ldi	r16, 0x80	; 128
						pres_ovs = 16;
     a9c:	90 e1       	ldi	r25, 0x10	; 16
     a9e:	e9 2e       	mov	r14, r25
		if(COEFF_READY_CHECK)bit=1;
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     aa6:	d8 2f       	mov	r29, r24
		DPS310_readCoeffs();
     aa8:	0e 94 1f 04 	call	0x83e	; 0x83e <DPS310_readCoeffs>
		switch(acc)
     aac:	c3 30       	cpi	r28, 0x03	; 3
     aae:	09 f4       	brne	.+2      	; 0xab2 <DPS310_init+0x2c>
     ab0:	64 c0       	rjmp	.+200    	; 0xb7a <DPS310_init+0xf4>
     ab2:	10 f5       	brcc	.+68     	; 0xaf8 <DPS310_init+0x72>
     ab4:	c1 30       	cpi	r28, 0x01	; 1
     ab6:	b9 f1       	breq	.+110    	; 0xb26 <DPS310_init+0xa0>
     ab8:	c2 30       	cpi	r28, 0x02	; 2
     aba:	09 f4       	brne	.+2      	; 0xabe <DPS310_init+0x38>
     abc:	49 c0       	rjmp	.+146    	; 0xb50 <DPS310_init+0xca>
			
		}
		//Korrekturwerte für falsche Temperaturwerte (2-fach normaler Temp Wert)
		// Quelle: https://github.com/Infineon/DPS310-Pressure-Sensor
		
		DPS310_write(0x0E, 0xA5);
     abe:	65 ea       	ldi	r22, 0xA5	; 165
     ac0:	8e e0       	ldi	r24, 0x0E	; 14
     ac2:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
		DPS310_write(0x0F, 0x96);
     ac6:	66 e9       	ldi	r22, 0x96	; 150
     ac8:	8f e0       	ldi	r24, 0x0F	; 15
     aca:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
		DPS310_write(0x62, 0x02);
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	82 e6       	ldi	r24, 0x62	; 98
     ad2:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
		DPS310_write(0x0E, 0x00);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	8e e0       	ldi	r24, 0x0E	; 14
     ada:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
		DPS310_write(0x0F, 0x00);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	8f e0       	ldi	r24, 0x0F	; 15
     ae2:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
	while(bit==0)// go on if Sensor ready flag is set
     ae6:	d7 ff       	sbrs	r29, 7
     ae8:	db cf       	rjmp	.-74     	; 0xaa0 <DPS310_init+0x1a>
	}
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret
		switch(acc)
     af8:	c4 30       	cpi	r28, 0x04	; 4
     afa:	09 f7       	brne	.-62     	; 0xabe <DPS310_init+0x38>
			case ULTRA:	DPS310_write(PRS_CFG, 0xF7);//4 messungen / sek   64 fach ovs
     afc:	67 ef       	ldi	r22, 0xF7	; 247
     afe:	86 e0       	ldi	r24, 0x06	; 6
     b00:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(TMP_CFG, 0xD7);//externer sens  4 messung / sek  single ovs
     b04:	67 ed       	ldi	r22, 0xD7	; 215
     b06:	87 e0       	ldi	r24, 0x07	; 7
     b08:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(CFG_REG, 0x0C);//p bit shift on 
     b0c:	6c e0       	ldi	r22, 0x0C	; 12
     b0e:	89 e0       	ldi	r24, 0x09	; 9
     b10:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
     b14:	67 e0       	ldi	r22, 0x07	; 7
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						temp_ovs = 128;
     b1c:	00 93 b9 05 	sts	0x05B9, r16	; 0x8005b9 <temp_ovs>
						pres_ovs = 128;
     b20:	00 93 89 05 	sts	0x0589, r16	; 0x800589 <pres_ovs>
						break;
     b24:	cc cf       	rjmp	.-104    	; 0xabe <DPS310_init+0x38>
			case LOW: 	DPS310_write(PRS_CFG, 0x00);//eight times low power
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(TMP_CFG, 0x80);// 1 measurement
     b2e:	60 e8       	ldi	r22, 0x80	; 128
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(CFG_REG, 0x00);//p bit shift off
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						temp_ovs = 1;
     b46:	c0 93 b9 05 	sts	0x05B9, r28	; 0x8005b9 <temp_ovs>
						pres_ovs = 1;
     b4a:	c0 93 89 05 	sts	0x0589, r28	; 0x800589 <pres_ovs>
						break;
     b4e:	b7 cf       	rjmp	.-146    	; 0xabe <DPS310_init+0x38>
			case MID: 	DPS310_write(PRS_CFG, 0x14);//2 messungen / sek   16 fach ovs
     b50:	64 e1       	ldi	r22, 0x14	; 20
     b52:	86 e0       	ldi	r24, 0x06	; 6
     b54:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(TMP_CFG, 0x90);//externer sens  2 messung / sek  single ovs
     b58:	60 e9       	ldi	r22, 0x90	; 144
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(CFG_REG, 0x04);//p bit shift on
     b60:	64 e0       	ldi	r22, 0x04	; 4
     b62:	89 e0       	ldi	r24, 0x09	; 9
     b64:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						temp_ovs = 1;
     b70:	10 93 b9 05 	sts	0x05B9, r17	; 0x8005b9 <temp_ovs>
						pres_ovs = 16;
     b74:	e0 92 89 05 	sts	0x0589, r14	; 0x800589 <pres_ovs>
						break;
     b78:	a2 cf       	rjmp	.-188    	; 0xabe <DPS310_init+0x38>
			case HIGH: 	DPS310_write(PRS_CFG, 0x26);//4 messungen / sek   64 fach ovs
     b7a:	66 e2       	ldi	r22, 0x26	; 38
     b7c:	86 e0       	ldi	r24, 0x06	; 6
     b7e:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(TMP_CFG, 0xA0);//externer sens  4 messung / sek  single ovs
     b82:	60 ea       	ldi	r22, 0xA0	; 160
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(CFG_REG, 0x04);//p bit shift on 
     b8a:	64 e0       	ldi	r22, 0x04	; 4
     b8c:	89 e0       	ldi	r24, 0x09	; 9
     b8e:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						DPS310_write(MEAS_CFG, 0x07);//cont temp and pres mess
     b92:	67 e0       	ldi	r22, 0x07	; 7
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	0e 94 ef 03 	call	0x7de	; 0x7de <DPS310_write>
						temp_ovs = 1;
     b9a:	10 93 b9 05 	sts	0x05B9, r17	; 0x8005b9 <temp_ovs>
						pres_ovs = 64;
     b9e:	f0 92 89 05 	sts	0x0589, r15	; 0x800589 <pres_ovs>
						break;
     ba2:	8d cf       	rjmp	.-230    	; 0xabe <DPS310_init+0x38>

00000ba4 <DPS310_get_sc_temp>:
uint32_t DPS310_get_sc_temp(uint8_t oversampling)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <DPS310_get_sc_temp+0x6>
     baa:	00 d0       	rcall	.+0      	; 0xbac <DPS310_get_sc_temp+0x8>
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	long temp_raw=0;

	buff[0] = DPS310_read(TMP_B2);
     bb0:	83 e0       	ldi	r24, 0x03	; 3
     bb2:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     bb6:	ea e8       	ldi	r30, 0x8A	; 138
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	80 83       	st	Z, r24
	buff[1] = DPS310_read(TMP_B1);
     bbc:	84 e0       	ldi	r24, 0x04	; 4
     bbe:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     bc2:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buff+0x1>
	buff[2] = DPS310_read(TMP_B0);
     bc6:	85 e0       	ldi	r24, 0x05	; 5
     bc8:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     bcc:	28 2f       	mov	r18, r24
     bce:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buff+0x2>
			
	temp_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
     bd2:	ea e8       	ldi	r30, 0x8A	; 138
     bd4:	f2 e0       	ldi	r31, 0x02	; 2
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	98 27       	eor	r25, r24
     bdc:	89 27       	eor	r24, r25
     bde:	98 27       	eor	r25, r24
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	ba 2f       	mov	r27, r26
     be6:	a9 2f       	mov	r26, r25
     be8:	98 2f       	mov	r25, r24
     bea:	88 27       	eor	r24, r24
     bec:	82 2b       	or	r24, r18
	temp_raw=(temp_raw<<8)>>8;
     bee:	ba 2f       	mov	r27, r26
     bf0:	a9 2f       	mov	r26, r25
     bf2:	98 2f       	mov	r25, r24
     bf4:	88 27       	eor	r24, r24
     bf6:	29 2f       	mov	r18, r25
     bf8:	3a 2f       	mov	r19, r26
     bfa:	4b 2f       	mov	r20, r27
     bfc:	55 27       	eor	r21, r21
     bfe:	47 fd       	sbrc	r20, 7
     c00:	5a 95       	dec	r21
				
	return temp_raw; 
}
     c02:	ca 01       	movw	r24, r20
     c04:	b9 01       	movw	r22, r18
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <DPS310_get_temp>:

long DPS310_get_temp(uint8_t oversampling)
{
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <DPS310_get_temp+0x12>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <DPS310_get_temp+0x14>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DPS310_get_temp+0x16>
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	89 83       	std	Y+1, r24	; 0x01
	long temp_raw=0;
	double temp_sc=0;
	double temp_comp=0;
	long scalfactor=0;

			buff[0] = DPS310_read(TMP_B2);
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     c36:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <buff>
			buff[1] = DPS310_read(TMP_B1);
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     c40:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buff+0x1>
			buff[2] = DPS310_read(TMP_B0);
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     c4a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buff+0x2>
			
			temp_raw=DPS310_get_sc_temp(oversampling);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	0e 94 d2 05 	call	0xba4	; 0xba4 <DPS310_get_sc_temp>
			
			switch(oversampling)
     c54:	29 81       	ldd	r18, Y+1	; 0x01
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
				case 4:	scalfactor = 3670016;break;
				case 8:	scalfactor = 7864320;break;
				case 16:	scalfactor = 253952;break;
     c56:	c1 2c       	mov	r12, r1
     c58:	e0 ee       	ldi	r30, 0xE0	; 224
     c5a:	de 2e       	mov	r13, r30
     c5c:	e3 e0       	ldi	r30, 0x03	; 3
     c5e:	ee 2e       	mov	r14, r30
     c60:	f1 2c       	mov	r15, r1
			switch(oversampling)
     c62:	20 31       	cpi	r18, 0x10	; 16
     c64:	21 f1       	breq	.+72     	; 0xcae <DPS310_get_temp+0x9a>
     c66:	08 f0       	brcs	.+2      	; 0xc6a <DPS310_get_temp+0x56>
     c68:	a2 c0       	rjmp	.+324    	; 0xdae <DPS310_get_temp+0x19a>
				case 4:	scalfactor = 3670016;break;
     c6a:	c1 2c       	mov	r12, r1
     c6c:	d1 2c       	mov	r13, r1
     c6e:	58 e3       	ldi	r21, 0x38	; 56
     c70:	e5 2e       	mov	r14, r21
     c72:	f1 2c       	mov	r15, r1
			switch(oversampling)
     c74:	24 30       	cpi	r18, 0x04	; 4
     c76:	d9 f0       	breq	.+54     	; 0xcae <DPS310_get_temp+0x9a>
     c78:	90 f4       	brcc	.+36     	; 0xc9e <DPS310_get_temp+0x8a>
     c7a:	c1 2c       	mov	r12, r1
     c7c:	d1 2c       	mov	r13, r1
     c7e:	48 e0       	ldi	r20, 0x08	; 8
     c80:	e4 2e       	mov	r14, r20
     c82:	f1 2c       	mov	r15, r1
     c84:	21 30       	cpi	r18, 0x01	; 1
     c86:	99 f0       	breq	.+38     	; 0xcae <DPS310_get_temp+0x9a>
				case 2:	scalfactor = 1572864;break;
     c88:	c1 2c       	mov	r12, r1
     c8a:	d1 2c       	mov	r13, r1
     c8c:	b8 e1       	ldi	r27, 0x18	; 24
     c8e:	eb 2e       	mov	r14, r27
     c90:	f1 2c       	mov	r15, r1
			switch(oversampling)
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	61 f0       	breq	.+24     	; 0xcae <DPS310_get_temp+0x9a>
	long scalfactor=0;
     c96:	c1 2c       	mov	r12, r1
     c98:	d1 2c       	mov	r13, r1
     c9a:	76 01       	movw	r14, r12
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <DPS310_get_temp+0x9a>
			switch(oversampling)
     c9e:	39 81       	ldd	r19, Y+1	; 0x01
				case 8:	scalfactor = 7864320;break;
     ca0:	c1 2c       	mov	r12, r1
     ca2:	d1 2c       	mov	r13, r1
     ca4:	a8 e7       	ldi	r26, 0x78	; 120
     ca6:	ea 2e       	mov	r14, r26
     ca8:	f1 2c       	mov	r15, r1
			switch(oversampling)
     caa:	38 30       	cpi	r19, 0x08	; 8
     cac:	a1 f7       	brne	.-24     	; 0xc96 <DPS310_get_temp+0x82>
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
			temp_sc = (float)temp_raw/scalfactor;
     cae:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     cb2:	8b 01       	movw	r16, r22
     cb4:	8e 83       	std	Y+6, r24	; 0x06
     cb6:	9d 83       	std	Y+5, r25	; 0x05
     cb8:	c7 01       	movw	r24, r14
     cba:	b6 01       	movw	r22, r12
     cbc:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	09 83       	std	Y+1, r16	; 0x01
     cc6:	1a 83       	std	Y+2, r17	; 0x02
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	8c 83       	std	Y+4, r24	; 0x04
     cd0:	69 81       	ldd	r22, Y+1	; 0x01
     cd2:	7a 81       	ldd	r23, Y+2	; 0x02
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	0e 94 61 30 	call	0x60c2	; 0x60c2 <__divsf3>
     cdc:	d6 2e       	mov	r13, r22
     cde:	e7 2e       	mov	r14, r23
     ce0:	f8 2e       	mov	r15, r24
     ce2:	9d 83       	std	Y+5, r25	; 0x05
			temp_comp=m_C0+m_C1*temp_sc;
     ce4:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <m_C1>
     ce8:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <m_C1+0x1>
     cec:	9c 01       	movw	r18, r24
     cee:	99 0f       	add	r25, r25
     cf0:	44 0b       	sbc	r20, r20
     cf2:	55 0b       	sbc	r21, r21
     cf4:	29 83       	std	Y+1, r18	; 0x01
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	4b 83       	std	Y+3, r20	; 0x03
     cfa:	5c 83       	std	Y+4, r21	; 0x04
     cfc:	ca 01       	movw	r24, r20
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     d04:	9b 01       	movw	r18, r22
     d06:	ac 01       	movw	r20, r24
     d08:	d9 82       	std	Y+1, r13	; 0x01
     d0a:	ea 82       	std	Y+2, r14	; 0x02
     d0c:	fb 82       	std	Y+3, r15	; 0x03
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	8c 83       	std	Y+4, r24	; 0x04
     d12:	69 81       	ldd	r22, Y+1	; 0x01
     d14:	7a 81       	ldd	r23, Y+2	; 0x02
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
     d1e:	d6 2e       	mov	r13, r22
     d20:	e7 2e       	mov	r14, r23
     d22:	f8 2e       	mov	r15, r24
     d24:	9d 83       	std	Y+5, r25	; 0x05
     d26:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <m_C0>
     d2a:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <m_C0+0x1>
     d2e:	9c 01       	movw	r18, r24
     d30:	99 0f       	add	r25, r25
     d32:	44 0b       	sbc	r20, r20
     d34:	55 0b       	sbc	r21, r21
     d36:	29 83       	std	Y+1, r18	; 0x01
     d38:	3a 83       	std	Y+2, r19	; 0x02
     d3a:	4b 83       	std	Y+3, r20	; 0x03
     d3c:	5c 83       	std	Y+4, r21	; 0x04
     d3e:	ca 01       	movw	r24, r20
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     d46:	9b 01       	movw	r18, r22
     d48:	ac 01       	movw	r20, r24
     d4a:	d9 82       	std	Y+1, r13	; 0x01
     d4c:	ea 82       	std	Y+2, r14	; 0x02
     d4e:	fb 82       	std	Y+3, r15	; 0x03
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	8c 83       	std	Y+4, r24	; 0x04
     d54:	69 81       	ldd	r22, Y+1	; 0x01
     d56:	7a 81       	ldd	r23, Y+2	; 0x02
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
			
			
			return temp_comp*100; //2505 entspricht 25,5 Grad
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	48 ec       	ldi	r20, 0xC8	; 200
     d66:	52 e4       	ldi	r21, 0x42	; 66
     d68:	69 83       	std	Y+1, r22	; 0x01
     d6a:	7a 83       	std	Y+2, r23	; 0x02
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	9c 83       	std	Y+4, r25	; 0x04
     d70:	69 81       	ldd	r22, Y+1	; 0x01
     d72:	7a 81       	ldd	r23, Y+2	; 0x02
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
     d7c:	69 83       	std	Y+1, r22	; 0x01
     d7e:	7a 83       	std	Y+2, r23	; 0x02
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	69 81       	ldd	r22, Y+1	; 0x01
     d86:	7a 81       	ldd	r23, Y+2	; 0x02
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	9c 81       	ldd	r25, Y+4	; 0x04
     d8c:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <__fixsfsi>
}
     d90:	26 96       	adiw	r28, 0x06	; 6
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	0f 91       	pop	r16
     da4:	ff 90       	pop	r15
     da6:	ef 90       	pop	r14
     da8:	df 90       	pop	r13
     daa:	cf 90       	pop	r12
     dac:	08 95       	ret
			switch(oversampling)
     dae:	49 81       	ldd	r20, Y+1	; 0x01
				case 64:	scalfactor = 1040384;break;
     db0:	c1 2c       	mov	r12, r1
     db2:	30 ee       	ldi	r19, 0xE0	; 224
     db4:	d3 2e       	mov	r13, r19
     db6:	3f e0       	ldi	r19, 0x0F	; 15
     db8:	e3 2e       	mov	r14, r19
     dba:	f1 2c       	mov	r15, r1
			switch(oversampling)
     dbc:	40 34       	cpi	r20, 0x40	; 64
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <DPS310_get_temp+0x1ae>
     dc0:	76 cf       	rjmp	.-276    	; 0xcae <DPS310_get_temp+0x9a>
				case 128:	scalfactor = 2088960;break;
     dc2:	c1 2c       	mov	r12, r1
     dc4:	20 ee       	ldi	r18, 0xE0	; 224
     dc6:	d2 2e       	mov	r13, r18
     dc8:	2f e1       	ldi	r18, 0x1F	; 31
     dca:	e2 2e       	mov	r14, r18
     dcc:	f1 2c       	mov	r15, r1
			switch(oversampling)
     dce:	40 38       	cpi	r20, 0x80	; 128
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <DPS310_get_temp+0x1c0>
     dd2:	6d cf       	rjmp	.-294    	; 0xcae <DPS310_get_temp+0x9a>
				case 32:	scalfactor = 516096;break;
     dd4:	c1 2c       	mov	r12, r1
     dd6:	f0 ee       	ldi	r31, 0xE0	; 224
     dd8:	df 2e       	mov	r13, r31
     dda:	f7 e0       	ldi	r31, 0x07	; 7
     ddc:	ef 2e       	mov	r14, r31
     dde:	f1 2c       	mov	r15, r1
			switch(oversampling)
     de0:	40 32       	cpi	r20, 0x20	; 32
     de2:	09 f4       	brne	.+2      	; 0xde6 <DPS310_get_temp+0x1d2>
     de4:	64 cf       	rjmp	.-312    	; 0xcae <DPS310_get_temp+0x9a>
     de6:	57 cf       	rjmp	.-338    	; 0xc96 <DPS310_get_temp+0x82>

00000de8 <DPS310_get_pres>:

double DPS310_get_pres(uint8_t t_ovrs, uint8_t p_ovrs)
{
     de8:	4f 92       	push	r4
     dea:	5f 92       	push	r5
     dec:	6f 92       	push	r6
     dee:	7f 92       	push	r7
     df0:	8f 92       	push	r8
     df2:	9f 92       	push	r9
     df4:	af 92       	push	r10
     df6:	bf 92       	push	r11
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 d0       	rcall	.+0      	; 0xe0a <DPS310_get_pres+0x22>
     e0a:	00 d0       	rcall	.+0      	; 0xe0c <DPS310_get_pres+0x24>
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <DPS310_get_pres+0x26>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	8e 83       	std	Y+6, r24	; 0x06
     e14:	6d 83       	std	Y+5, r22	; 0x05
	long prs_raw;
	double prs_sc;
	double prs_comp;
	long scalfactor=0;
	
		buff[0] = DPS310_read(TMP_B2);
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     e1c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <buff>
		buff[1] = DPS310_read(TMP_B1);
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     e26:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buff+0x1>
		buff[2] = DPS310_read(TMP_B0);
     e2a:	85 e0       	ldi	r24, 0x05	; 5
     e2c:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     e30:	28 2f       	mov	r18, r24
     e32:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buff+0x2>
		
		temp_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
     e36:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <buff>
     e3a:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <buff+0x1>
     e3e:	98 27       	eor	r25, r24
     e40:	89 27       	eor	r24, r25
     e42:	98 27       	eor	r25, r24
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	a0 e0       	ldi	r26, 0x00	; 0
     e48:	ba 2f       	mov	r27, r26
     e4a:	a9 2f       	mov	r26, r25
     e4c:	98 2f       	mov	r25, r24
     e4e:	88 27       	eor	r24, r24
     e50:	82 2b       	or	r24, r18
		temp_raw=(temp_raw<<8)>>8;
     e52:	ba 2f       	mov	r27, r26
     e54:	a9 2f       	mov	r26, r25
     e56:	98 2f       	mov	r25, r24
     e58:	88 27       	eor	r24, r24
     e5a:	29 2f       	mov	r18, r25
     e5c:	3a 2f       	mov	r19, r26
     e5e:	4b 2f       	mov	r20, r27
     e60:	55 27       	eor	r21, r21
     e62:	47 fd       	sbrc	r20, 7
     e64:	5a 95       	dec	r21
     e66:	29 83       	std	Y+1, r18	; 0x01
     e68:	3a 83       	std	Y+2, r19	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
     e6c:	5c 83       	std	Y+4, r21	; 0x04
		
		switch(t_ovrs)
     e6e:	3e 81       	ldd	r19, Y+6	; 0x06
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
				case 4:	scalfactor = 3670016;break;
				case 8:	scalfactor = 7864320;break;
				case 16:	scalfactor = 253952;break;
     e70:	c1 2c       	mov	r12, r1
     e72:	90 ee       	ldi	r25, 0xE0	; 224
     e74:	d9 2e       	mov	r13, r25
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	e9 2e       	mov	r14, r25
     e7a:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
     e7c:	30 31       	cpi	r19, 0x10	; 16
     e7e:	21 f1       	breq	.+72     	; 0xec8 <DPS310_get_pres+0xe0>
     e80:	08 f0       	brcs	.+2      	; 0xe84 <DPS310_get_pres+0x9c>
     e82:	de c1       	rjmp	.+956    	; 0x1240 <DPS310_get_pres+0x458>
				case 4:	scalfactor = 3670016;break;
     e84:	c1 2c       	mov	r12, r1
     e86:	d1 2c       	mov	r13, r1
     e88:	88 e3       	ldi	r24, 0x38	; 56
     e8a:	e8 2e       	mov	r14, r24
     e8c:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
     e8e:	34 30       	cpi	r19, 0x04	; 4
     e90:	d9 f0       	breq	.+54     	; 0xec8 <DPS310_get_pres+0xe0>
     e92:	90 f4       	brcc	.+36     	; 0xeb8 <DPS310_get_pres+0xd0>
     e94:	c1 2c       	mov	r12, r1
     e96:	d1 2c       	mov	r13, r1
     e98:	08 e0       	ldi	r16, 0x08	; 8
     e9a:	e0 2e       	mov	r14, r16
     e9c:	f1 2c       	mov	r15, r1
     e9e:	31 30       	cpi	r19, 0x01	; 1
     ea0:	99 f0       	breq	.+38     	; 0xec8 <DPS310_get_pres+0xe0>
				case 2:	scalfactor = 1572864;break;
     ea2:	c1 2c       	mov	r12, r1
     ea4:	d1 2c       	mov	r13, r1
     ea6:	48 e1       	ldi	r20, 0x18	; 24
     ea8:	e4 2e       	mov	r14, r20
     eaa:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
     eac:	32 30       	cpi	r19, 0x02	; 2
     eae:	61 f0       	breq	.+24     	; 0xec8 <DPS310_get_pres+0xe0>
	long scalfactor=0;
     eb0:	c1 2c       	mov	r12, r1
     eb2:	d1 2c       	mov	r13, r1
     eb4:	76 01       	movw	r14, r12
     eb6:	08 c0       	rjmp	.+16     	; 0xec8 <DPS310_get_pres+0xe0>
		switch(t_ovrs)
     eb8:	4e 81       	ldd	r20, Y+6	; 0x06
				case 8:	scalfactor = 7864320;break;
     eba:	c1 2c       	mov	r12, r1
     ebc:	d1 2c       	mov	r13, r1
     ebe:	38 e7       	ldi	r19, 0x78	; 120
     ec0:	e3 2e       	mov	r14, r19
     ec2:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
     ec4:	48 30       	cpi	r20, 0x08	; 8
     ec6:	a1 f7       	brne	.-24     	; 0xeb0 <DPS310_get_pres+0xc8>
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
			temp_sc = (float)temp_raw/scalfactor;
     ec8:	69 81       	ldd	r22, Y+1	; 0x01
     eca:	7a 81       	ldd	r23, Y+2	; 0x02
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	9c 81       	ldd	r25, Y+4	; 0x04
     ed0:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     ed4:	b6 2e       	mov	r11, r22
     ed6:	07 2f       	mov	r16, r23
     ed8:	18 2f       	mov	r17, r24
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	b9 82       	std	Y+1, r11	; 0x01
     eea:	0a 83       	std	Y+2, r16	; 0x02
     eec:	1b 83       	std	Y+3, r17	; 0x03
     eee:	8e 81       	ldd	r24, Y+6	; 0x06
     ef0:	8c 83       	std	Y+4, r24	; 0x04
     ef2:	69 81       	ldd	r22, Y+1	; 0x01
     ef4:	7a 81       	ldd	r23, Y+2	; 0x02
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	0e 94 61 30 	call	0x60c2	; 0x60c2 <__divsf3>
     efe:	b6 2e       	mov	r11, r22
     f00:	07 2f       	mov	r16, r23
     f02:	18 2f       	mov	r17, r24
     f04:	9e 83       	std	Y+6, r25	; 0x06
		
		buff[0] = DPS310_read(PRS_B2);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     f0c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <buff>
		buff[1] = DPS310_read(PRS_B1);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     f16:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <buff+0x1>
		buff[2] = DPS310_read(PRS_B0);
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
     f20:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <buff+0x2>
		
		prs_raw=((((long)buff[0]<<8)|buff[1])<<8)|buff[2];
     f24:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <buff>
     f28:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <buff+0x1>
     f2c:	54 27       	eor	r21, r20
     f2e:	45 27       	eor	r20, r21
     f30:	54 27       	eor	r21, r20
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	76 2f       	mov	r23, r22
     f38:	65 2f       	mov	r22, r21
     f3a:	54 2f       	mov	r21, r20
     f3c:	44 27       	eor	r20, r20
     f3e:	48 2b       	or	r20, r24
		prs_raw=(prs_raw<<8)>>8;
     f40:	76 2f       	mov	r23, r22
     f42:	65 2f       	mov	r22, r21
     f44:	54 2f       	mov	r21, r20
     f46:	44 27       	eor	r20, r20
     f48:	bb 27       	eor	r27, r27
     f4a:	77 fd       	sbrc	r23, 7
     f4c:	ba 95       	dec	r27
     f4e:	a7 2f       	mov	r26, r23
     f50:	96 2f       	mov	r25, r22
     f52:	85 2f       	mov	r24, r21
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	9a 83       	std	Y+2, r25	; 0x02
     f58:	ab 83       	std	Y+3, r26	; 0x03
     f5a:	bc 83       	std	Y+4, r27	; 0x04
		
		switch(p_ovrs)
     f5c:	9d 81       	ldd	r25, Y+5	; 0x05
     f5e:	90 31       	cpi	r25, 0x10	; 16
     f60:	09 f4       	brne	.+2      	; 0xf64 <DPS310_get_pres+0x17c>
     f62:	a4 c1       	rjmp	.+840    	; 0x12ac <DPS310_get_pres+0x4c4>
     f64:	08 f0       	brcs	.+2      	; 0xf68 <DPS310_get_pres+0x180>
     f66:	93 c1       	rjmp	.+806    	; 0x128e <DPS310_get_pres+0x4a6>
     f68:	94 30       	cpi	r25, 0x04	; 4
     f6a:	09 f4       	brne	.+2      	; 0xf6e <DPS310_get_pres+0x186>
     f6c:	a6 c1       	rjmp	.+844    	; 0x12ba <DPS310_get_pres+0x4d2>
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <DPS310_get_pres+0x18a>
     f70:	84 c1       	rjmp	.+776    	; 0x127a <DPS310_get_pres+0x492>
     f72:	91 30       	cpi	r25, 0x01	; 1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DPS310_get_pres+0x190>
     f76:	a7 c1       	rjmp	.+846    	; 0x12c6 <DPS310_get_pres+0x4de>
     f78:	92 30       	cpi	r25, 0x02	; 2
     f7a:	29 f4       	brne	.+10     	; 0xf86 <DPS310_get_pres+0x19e>
			{
				case 1:	scalfactor = 524288;break;
				case 2:	scalfactor = 1572864;break;
     f7c:	c1 2c       	mov	r12, r1
     f7e:	d1 2c       	mov	r13, r1
     f80:	78 e1       	ldi	r23, 0x18	; 24
     f82:	e7 2e       	mov	r14, r23
     f84:	f1 2c       	mov	r15, r1
				case 32:	scalfactor = 516096;break;
				case 64:	scalfactor = 1040384;break;
				case 128:	scalfactor = 2088960;break;
				
			}
		prs_sc = (float)prs_raw/scalfactor;
     f86:	69 81       	ldd	r22, Y+1	; 0x01
     f88:	7a 81       	ldd	r23, Y+2	; 0x02
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     f92:	4b 01       	movw	r8, r22
     f94:	a8 2e       	mov	r10, r24
     f96:	9d 83       	std	Y+5, r25	; 0x05
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
     fa4:	89 82       	std	Y+1, r8	; 0x01
     fa6:	9a 82       	std	Y+2, r9	; 0x02
     fa8:	ab 82       	std	Y+3, r10	; 0x03
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	69 81       	ldd	r22, Y+1	; 0x01
     fb0:	7a 81       	ldd	r23, Y+2	; 0x02
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	0e 94 61 30 	call	0x60c2	; 0x60c2 <__divsf3>
     fba:	d6 2e       	mov	r13, r22
     fbc:	e7 2e       	mov	r14, r23
     fbe:	f8 2e       	mov	r15, r24
     fc0:	9d 83       	std	Y+5, r25	; 0x05
		prs_comp=m_C00+prs_sc*(m_C10+prs_sc*(m_C20+(prs_sc*m_C30)))+temp_sc*m_C01+temp_sc*prs_sc*(m_C11+(prs_sc*m_C21));
     fc2:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <m_C30>
     fc6:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <m_C30+0x1>
     fca:	9c 01       	movw	r18, r24
     fcc:	99 0f       	add	r25, r25
     fce:	44 0b       	sbc	r20, r20
     fd0:	55 0b       	sbc	r21, r21
     fd2:	29 83       	std	Y+1, r18	; 0x01
     fd4:	3a 83       	std	Y+2, r19	; 0x02
     fd6:	4b 83       	std	Y+3, r20	; 0x03
     fd8:	5c 83       	std	Y+4, r21	; 0x04
     fda:	ca 01       	movw	r24, r20
     fdc:	b9 01       	movw	r22, r18
     fde:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
     fe2:	2d 2d       	mov	r18, r13
     fe4:	3e 2d       	mov	r19, r14
     fe6:	4f 2d       	mov	r20, r15
     fe8:	5d 81       	ldd	r21, Y+5	; 0x05
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	69 81       	ldd	r22, Y+1	; 0x01
     ff4:	7a 81       	ldd	r23, Y+2	; 0x02
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
     ffe:	4b 01       	movw	r8, r22
    1000:	a8 2e       	mov	r10, r24
    1002:	c9 2e       	mov	r12, r25
    1004:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <m_C20>
    1008:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <m_C20+0x1>
    100c:	9c 01       	movw	r18, r24
    100e:	99 0f       	add	r25, r25
    1010:	44 0b       	sbc	r20, r20
    1012:	55 0b       	sbc	r21, r21
    1014:	29 83       	std	Y+1, r18	; 0x01
    1016:	3a 83       	std	Y+2, r19	; 0x02
    1018:	4b 83       	std	Y+3, r20	; 0x03
    101a:	5c 83       	std	Y+4, r21	; 0x04
    101c:	ca 01       	movw	r24, r20
    101e:	b9 01       	movw	r22, r18
    1020:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	89 82       	std	Y+1, r8	; 0x01
    102a:	9a 82       	std	Y+2, r9	; 0x02
    102c:	ab 82       	std	Y+3, r10	; 0x03
    102e:	cc 82       	std	Y+4, r12	; 0x04
    1030:	69 81       	ldd	r22, Y+1	; 0x01
    1032:	7a 81       	ldd	r23, Y+2	; 0x02
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	9c 81       	ldd	r25, Y+4	; 0x04
    1038:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    103c:	2d 2d       	mov	r18, r13
    103e:	3e 2d       	mov	r19, r14
    1040:	4f 2d       	mov	r20, r15
    1042:	5d 81       	ldd	r21, Y+5	; 0x05
    1044:	69 83       	std	Y+1, r22	; 0x01
    1046:	7a 83       	std	Y+2, r23	; 0x02
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	69 81       	ldd	r22, Y+1	; 0x01
    104e:	7a 81       	ldd	r23, Y+2	; 0x02
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    1058:	4b 01       	movw	r8, r22
    105a:	a8 2e       	mov	r10, r24
    105c:	c9 2e       	mov	r12, r25
    105e:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <m_C10>
    1062:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <m_C10+0x1>
    1066:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <m_C10+0x2>
    106a:	90 91 94 05 	lds	r25, 0x0594	; 0x800594 <m_C10+0x3>
    106e:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	89 82       	std	Y+1, r8	; 0x01
    1078:	9a 82       	std	Y+2, r9	; 0x02
    107a:	ab 82       	std	Y+3, r10	; 0x03
    107c:	cc 82       	std	Y+4, r12	; 0x04
    107e:	69 81       	ldd	r22, Y+1	; 0x01
    1080:	7a 81       	ldd	r23, Y+2	; 0x02
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    108a:	2d 2d       	mov	r18, r13
    108c:	3e 2d       	mov	r19, r14
    108e:	4f 2d       	mov	r20, r15
    1090:	5d 81       	ldd	r21, Y+5	; 0x05
    1092:	69 83       	std	Y+1, r22	; 0x01
    1094:	7a 83       	std	Y+2, r23	; 0x02
    1096:	8b 83       	std	Y+3, r24	; 0x03
    1098:	9c 83       	std	Y+4, r25	; 0x04
    109a:	69 81       	ldd	r22, Y+1	; 0x01
    109c:	7a 81       	ldd	r23, Y+2	; 0x02
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    10a6:	4b 01       	movw	r8, r22
    10a8:	a8 2e       	mov	r10, r24
    10aa:	c9 2e       	mov	r12, r25
    10ac:	60 91 bb 05 	lds	r22, 0x05BB	; 0x8005bb <m_C00>
    10b0:	70 91 bc 05 	lds	r23, 0x05BC	; 0x8005bc <m_C00+0x1>
    10b4:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <m_C00+0x2>
    10b8:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <m_C00+0x3>
    10bc:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    10c0:	9b 01       	movw	r18, r22
    10c2:	ac 01       	movw	r20, r24
    10c4:	89 82       	std	Y+1, r8	; 0x01
    10c6:	9a 82       	std	Y+2, r9	; 0x02
    10c8:	ab 82       	std	Y+3, r10	; 0x03
    10ca:	cc 82       	std	Y+4, r12	; 0x04
    10cc:	69 81       	ldd	r22, Y+1	; 0x01
    10ce:	7a 81       	ldd	r23, Y+2	; 0x02
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    10d8:	4b 01       	movw	r8, r22
    10da:	a8 2e       	mov	r10, r24
    10dc:	c9 2e       	mov	r12, r25
    10de:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <m_C01>
    10e2:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <m_C01+0x1>
    10e6:	9c 01       	movw	r18, r24
    10e8:	99 0f       	add	r25, r25
    10ea:	44 0b       	sbc	r20, r20
    10ec:	55 0b       	sbc	r21, r21
    10ee:	29 83       	std	Y+1, r18	; 0x01
    10f0:	3a 83       	std	Y+2, r19	; 0x02
    10f2:	4b 83       	std	Y+3, r20	; 0x03
    10f4:	5c 83       	std	Y+4, r21	; 0x04
    10f6:	ca 01       	movw	r24, r20
    10f8:	b9 01       	movw	r22, r18
    10fa:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    10fe:	2b 2d       	mov	r18, r11
    1100:	30 2f       	mov	r19, r16
    1102:	41 2f       	mov	r20, r17
    1104:	5e 81       	ldd	r21, Y+6	; 0x06
    1106:	69 83       	std	Y+1, r22	; 0x01
    1108:	7a 83       	std	Y+2, r23	; 0x02
    110a:	8b 83       	std	Y+3, r24	; 0x03
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	69 81       	ldd	r22, Y+1	; 0x01
    1110:	7a 81       	ldd	r23, Y+2	; 0x02
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    111a:	9b 01       	movw	r18, r22
    111c:	ac 01       	movw	r20, r24
    111e:	89 82       	std	Y+1, r8	; 0x01
    1120:	9a 82       	std	Y+2, r9	; 0x02
    1122:	ab 82       	std	Y+3, r10	; 0x03
    1124:	cc 82       	std	Y+4, r12	; 0x04
    1126:	69 81       	ldd	r22, Y+1	; 0x01
    1128:	7a 81       	ldd	r23, Y+2	; 0x02
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    1132:	4b 01       	movw	r8, r22
    1134:	a8 2e       	mov	r10, r24
    1136:	c9 2e       	mov	r12, r25
    1138:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <m_C21>
    113c:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <m_C21+0x1>
    1140:	9c 01       	movw	r18, r24
    1142:	99 0f       	add	r25, r25
    1144:	44 0b       	sbc	r20, r20
    1146:	55 0b       	sbc	r21, r21
    1148:	29 83       	std	Y+1, r18	; 0x01
    114a:	3a 83       	std	Y+2, r19	; 0x02
    114c:	4b 83       	std	Y+3, r20	; 0x03
    114e:	5c 83       	std	Y+4, r21	; 0x04
    1150:	ca 01       	movw	r24, r20
    1152:	b9 01       	movw	r22, r18
    1154:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    1158:	2d 2d       	mov	r18, r13
    115a:	3e 2d       	mov	r19, r14
    115c:	4f 2d       	mov	r20, r15
    115e:	5d 81       	ldd	r21, Y+5	; 0x05
    1160:	69 83       	std	Y+1, r22	; 0x01
    1162:	7a 83       	std	Y+2, r23	; 0x02
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	69 81       	ldd	r22, Y+1	; 0x01
    116a:	7a 81       	ldd	r23, Y+2	; 0x02
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    1174:	2b 01       	movw	r4, r22
    1176:	3c 01       	movw	r6, r24
    1178:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <m_C11>
    117c:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <m_C11+0x1>
    1180:	9c 01       	movw	r18, r24
    1182:	99 0f       	add	r25, r25
    1184:	44 0b       	sbc	r20, r20
    1186:	55 0b       	sbc	r21, r21
    1188:	29 83       	std	Y+1, r18	; 0x01
    118a:	3a 83       	std	Y+2, r19	; 0x02
    118c:	4b 83       	std	Y+3, r20	; 0x03
    118e:	5c 83       	std	Y+4, r21	; 0x04
    1190:	ca 01       	movw	r24, r20
    1192:	b9 01       	movw	r22, r18
    1194:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	49 82       	std	Y+1, r4	; 0x01
    119e:	5a 82       	std	Y+2, r5	; 0x02
    11a0:	6b 82       	std	Y+3, r6	; 0x03
    11a2:	7c 82       	std	Y+4, r7	; 0x04
    11a4:	69 81       	ldd	r22, Y+1	; 0x01
    11a6:	7a 81       	ldd	r23, Y+2	; 0x02
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    11b0:	2b 01       	movw	r4, r22
    11b2:	3c 01       	movw	r6, r24
    11b4:	2d 2d       	mov	r18, r13
    11b6:	3e 2d       	mov	r19, r14
    11b8:	4f 2d       	mov	r20, r15
    11ba:	5d 81       	ldd	r21, Y+5	; 0x05
    11bc:	b9 82       	std	Y+1, r11	; 0x01
    11be:	0a 83       	std	Y+2, r16	; 0x02
    11c0:	1b 83       	std	Y+3, r17	; 0x03
    11c2:	8e 81       	ldd	r24, Y+6	; 0x06
    11c4:	8c 83       	std	Y+4, r24	; 0x04
    11c6:	69 81       	ldd	r22, Y+1	; 0x01
    11c8:	7a 81       	ldd	r23, Y+2	; 0x02
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	49 82       	std	Y+1, r4	; 0x01
    11d8:	5a 82       	std	Y+2, r5	; 0x02
    11da:	6b 82       	std	Y+3, r6	; 0x03
    11dc:	7c 82       	std	Y+4, r7	; 0x04
    11de:	69 81       	ldd	r22, Y+1	; 0x01
    11e0:	7a 81       	ldd	r23, Y+2	; 0x02
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	89 82       	std	Y+1, r8	; 0x01
    11f0:	9a 82       	std	Y+2, r9	; 0x02
    11f2:	ab 82       	std	Y+3, r10	; 0x03
    11f4:	cc 82       	std	Y+4, r12	; 0x04
    11f6:	69 81       	ldd	r22, Y+1	; 0x01
    11f8:	7a 81       	ldd	r23, Y+2	; 0x02
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
		return prs_comp; //2505 entspricht 25,5 Grad
}
    1202:	69 83       	std	Y+1, r22	; 0x01
    1204:	7a 83       	std	Y+2, r23	; 0x02
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	69 81       	ldd	r22, Y+1	; 0x01
    120c:	7a 81       	ldd	r23, Y+2	; 0x02
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	26 96       	adiw	r28, 0x06	; 6
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	9f 90       	pop	r9
    1234:	8f 90       	pop	r8
    1236:	7f 90       	pop	r7
    1238:	6f 90       	pop	r6
    123a:	5f 90       	pop	r5
    123c:	4f 90       	pop	r4
    123e:	08 95       	ret
		switch(t_ovrs)
    1240:	5e 81       	ldd	r21, Y+6	; 0x06
				case 64:	scalfactor = 1040384;break;
    1242:	c1 2c       	mov	r12, r1
    1244:	10 ee       	ldi	r17, 0xE0	; 224
    1246:	d1 2e       	mov	r13, r17
    1248:	1f e0       	ldi	r17, 0x0F	; 15
    124a:	e1 2e       	mov	r14, r17
    124c:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    124e:	50 34       	cpi	r21, 0x40	; 64
    1250:	09 f4       	brne	.+2      	; 0x1254 <DPS310_get_pres+0x46c>
    1252:	3a ce       	rjmp	.-908    	; 0xec8 <DPS310_get_pres+0xe0>
				case 128:	scalfactor = 2088960;break;
    1254:	c1 2c       	mov	r12, r1
    1256:	b0 ee       	ldi	r27, 0xE0	; 224
    1258:	db 2e       	mov	r13, r27
    125a:	bf e1       	ldi	r27, 0x1F	; 31
    125c:	eb 2e       	mov	r14, r27
    125e:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    1260:	50 38       	cpi	r21, 0x80	; 128
    1262:	09 f4       	brne	.+2      	; 0x1266 <DPS310_get_pres+0x47e>
    1264:	31 ce       	rjmp	.-926    	; 0xec8 <DPS310_get_pres+0xe0>
				case 32:	scalfactor = 516096;break;
    1266:	c1 2c       	mov	r12, r1
    1268:	20 ee       	ldi	r18, 0xE0	; 224
    126a:	d2 2e       	mov	r13, r18
    126c:	27 e0       	ldi	r18, 0x07	; 7
    126e:	e2 2e       	mov	r14, r18
    1270:	f1 2c       	mov	r15, r1
		switch(t_ovrs)
    1272:	50 32       	cpi	r21, 0x20	; 32
    1274:	09 f4       	brne	.+2      	; 0x1278 <DPS310_get_pres+0x490>
    1276:	28 ce       	rjmp	.-944    	; 0xec8 <DPS310_get_pres+0xe0>
    1278:	1b ce       	rjmp	.-970    	; 0xeb0 <DPS310_get_pres+0xc8>
		switch(p_ovrs)
    127a:	ad 81       	ldd	r26, Y+5	; 0x05
    127c:	a8 30       	cpi	r26, 0x08	; 8
    127e:	09 f0       	breq	.+2      	; 0x1282 <DPS310_get_pres+0x49a>
    1280:	82 ce       	rjmp	.-764    	; 0xf86 <DPS310_get_pres+0x19e>
				case 8:	scalfactor = 7864320;break;
    1282:	c1 2c       	mov	r12, r1
    1284:	d1 2c       	mov	r13, r1
    1286:	68 e7       	ldi	r22, 0x78	; 120
    1288:	e6 2e       	mov	r14, r22
    128a:	f1 2c       	mov	r15, r1
    128c:	7c ce       	rjmp	.-776    	; 0xf86 <DPS310_get_pres+0x19e>
		switch(p_ovrs)
    128e:	bd 81       	ldd	r27, Y+5	; 0x05
    1290:	b0 34       	cpi	r27, 0x40	; 64
    1292:	f9 f0       	breq	.+62     	; 0x12d2 <DPS310_get_pres+0x4ea>
    1294:	b0 38       	cpi	r27, 0x80	; 128
    1296:	21 f1       	breq	.+72     	; 0x12e0 <DPS310_get_pres+0x4f8>
    1298:	b0 32       	cpi	r27, 0x20	; 32
    129a:	09 f0       	breq	.+2      	; 0x129e <DPS310_get_pres+0x4b6>
    129c:	74 ce       	rjmp	.-792    	; 0xf86 <DPS310_get_pres+0x19e>
				case 32:	scalfactor = 516096;break;
    129e:	c1 2c       	mov	r12, r1
    12a0:	50 ee       	ldi	r21, 0xE0	; 224
    12a2:	d5 2e       	mov	r13, r21
    12a4:	57 e0       	ldi	r21, 0x07	; 7
    12a6:	e5 2e       	mov	r14, r21
    12a8:	f1 2c       	mov	r15, r1
    12aa:	6d ce       	rjmp	.-806    	; 0xf86 <DPS310_get_pres+0x19e>
				case 16:	scalfactor = 253952;break;
    12ac:	c1 2c       	mov	r12, r1
    12ae:	40 ee       	ldi	r20, 0xE0	; 224
    12b0:	d4 2e       	mov	r13, r20
    12b2:	43 e0       	ldi	r20, 0x03	; 3
    12b4:	e4 2e       	mov	r14, r20
    12b6:	f1 2c       	mov	r15, r1
    12b8:	66 ce       	rjmp	.-820    	; 0xf86 <DPS310_get_pres+0x19e>
				case 4:	scalfactor = 3670016;break;
    12ba:	c1 2c       	mov	r12, r1
    12bc:	d1 2c       	mov	r13, r1
    12be:	38 e3       	ldi	r19, 0x38	; 56
    12c0:	e3 2e       	mov	r14, r19
    12c2:	f1 2c       	mov	r15, r1
    12c4:	60 ce       	rjmp	.-832    	; 0xf86 <DPS310_get_pres+0x19e>
		switch(p_ovrs)
    12c6:	c1 2c       	mov	r12, r1
    12c8:	d1 2c       	mov	r13, r1
    12ca:	28 e0       	ldi	r18, 0x08	; 8
    12cc:	e2 2e       	mov	r14, r18
    12ce:	f1 2c       	mov	r15, r1
    12d0:	5a ce       	rjmp	.-844    	; 0xf86 <DPS310_get_pres+0x19e>
				case 64:	scalfactor = 1040384;break;
    12d2:	c1 2c       	mov	r12, r1
    12d4:	90 ee       	ldi	r25, 0xE0	; 224
    12d6:	d9 2e       	mov	r13, r25
    12d8:	9f e0       	ldi	r25, 0x0F	; 15
    12da:	e9 2e       	mov	r14, r25
    12dc:	f1 2c       	mov	r15, r1
    12de:	53 ce       	rjmp	.-858    	; 0xf86 <DPS310_get_pres+0x19e>
				case 128:	scalfactor = 2088960;break;
    12e0:	c1 2c       	mov	r12, r1
    12e2:	80 ee       	ldi	r24, 0xE0	; 224
    12e4:	d8 2e       	mov	r13, r24
    12e6:	8f e1       	ldi	r24, 0x1F	; 31
    12e8:	e8 2e       	mov	r14, r24
    12ea:	f1 2c       	mov	r15, r1
    12ec:	4c ce       	rjmp	.-872    	; 0xf86 <DPS310_get_pres+0x19e>

000012ee <calcalt>:

long calcalt(double press, uint32_t pressealevel)
{
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <calcalt+0xa>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <calcalt+0xc>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <calcalt+0xe>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8b 01       	movw	r16, r22
    1302:	8e 83       	std	Y+6, r24	; 0x06
    1304:	9d 83       	std	Y+5, r25	; 0x05
    1306:	b9 01       	movw	r22, r18
    1308:	ca 01       	movw	r24, r20
   return 100*(44330 * (1 - pow((double) press / pressealevel, 0.1902226)));
    130a:	0e 94 09 31 	call	0x6212	; 0x6212 <__floatunsisf>
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	09 83       	std	Y+1, r16	; 0x01
    1314:	1a 83       	std	Y+2, r17	; 0x02
    1316:	8e 81       	ldd	r24, Y+6	; 0x06
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	8c 83       	std	Y+4, r24	; 0x04
    131e:	69 81       	ldd	r22, Y+1	; 0x01
    1320:	7a 81       	ldd	r23, Y+2	; 0x02
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	0e 94 61 30 	call	0x60c2	; 0x60c2 <__divsf3>
    132a:	27 eb       	ldi	r18, 0xB7	; 183
    132c:	39 ec       	ldi	r19, 0xC9	; 201
    132e:	42 e4       	ldi	r20, 0x42	; 66
    1330:	5e e3       	ldi	r21, 0x3E	; 62
    1332:	69 83       	std	Y+1, r22	; 0x01
    1334:	7a 83       	std	Y+2, r23	; 0x02
    1336:	8b 83       	std	Y+3, r24	; 0x03
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	69 81       	ldd	r22, Y+1	; 0x01
    133c:	7a 81       	ldd	r23, Y+2	; 0x02
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	0e 94 04 32 	call	0x6408	; 0x6408 <pow>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	9f e3       	ldi	r25, 0x3F	; 63
    1352:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <__subsf3>
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3a e2       	ldi	r19, 0x2A	; 42
    135a:	4d e2       	ldi	r20, 0x2D	; 45
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	69 83       	std	Y+1, r22	; 0x01
    1360:	7a 83       	std	Y+2, r23	; 0x02
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	69 81       	ldd	r22, Y+1	; 0x01
    1368:	7a 81       	ldd	r23, Y+2	; 0x02
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	48 ec       	ldi	r20, 0xC8	; 200
    1378:	52 e4       	ldi	r21, 0x42	; 66
    137a:	69 83       	std	Y+1, r22	; 0x01
    137c:	7a 83       	std	Y+2, r23	; 0x02
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	69 81       	ldd	r22, Y+1	; 0x01
    1384:	7a 81       	ldd	r23, Y+2	; 0x02
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    138e:	69 83       	std	Y+1, r22	; 0x01
    1390:	7a 83       	std	Y+2, r23	; 0x02
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	69 81       	ldd	r22, Y+1	; 0x01
    1398:	7a 81       	ldd	r23, Y+2	; 0x02
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	9c 81       	ldd	r25, Y+4	; 0x04
    139e:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <__fixsfsi>
	//*100 um stellen von Komma nicht zu verlieren
}
    13a2:	26 96       	adiw	r28, 0x06	; 6
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <vor_komma>:

uint16_t vor_komma(uint32_t value)
{
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <vor_komma+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <vor_komma+0x8>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	return value/100;
    13c4:	24 e6       	ldi	r18, 0x64	; 100
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
	
}
    13d0:	c9 01       	movw	r24, r18
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <nach_komma>:
uint8_t nach_komma(uint32_t value)
{
    13e0:	cf 93       	push	r28
    13e2:	c6 2f       	mov	r28, r22
	uint8_t temp;
	temp = value/100;
    13e4:	24 e6       	ldi	r18, 0x64	; 100
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
	return value-(temp*100);
	
	
}
    13f0:	8c 2f       	mov	r24, r28
    13f2:	94 e6       	ldi	r25, 0x64	; 100
    13f4:	29 9f       	mul	r18, r25
    13f6:	80 19       	sub	r24, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <ReadADC>:
uint16_t ReadADC(uint8_t ADCchannel)
{
 //select ADC channel with safety mask
 ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
    13fe:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    1402:	90 7f       	andi	r25, 0xF0	; 240
    1404:	8f 70       	andi	r24, 0x0F	; 15
    1406:	98 2b       	or	r25, r24
    1408:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 //single conversion mode
 ADCSRA |= (1<<ADSC);
    140c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 // wait until ADC conversion is complete
 while( ADCSRA & (1<<ADSC) );
    1416:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    141a:	86 fd       	sbrc	r24, 6
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <ReadADC+0x18>
 return ADC;
    141e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1422:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    1426:	08 95       	ret

00001428 <showSD>:
void showSD(uint8_t stat)
{
    1428:	cf 93       	push	r28
    142a:	c8 2f       	mov	r28, r24
	//print SD Card Status
	ili9341_setcursor(90,0);
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	8a e5       	ldi	r24, 0x5A	; 90
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
	printf("          ");
    1438:	85 e2       	ldi	r24, 0x25	; 37
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	9f 93       	push	r25
    143e:	8f 93       	push	r24
    1440:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
	switch(stat)
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
	{
		case CLOSED:	printf("SD Closed");
						break;
		case OPENED:	printf("SD Open");
						break;
		case WRITING:	printf("SD WRITING");
    1448:	82 e4       	ldi	r24, 0x42	; 66
    144a:	91 e0       	ldi	r25, 0x01	; 1
	switch(stat)
    144c:	c6 30       	cpi	r28, 0x06	; 6
    144e:	81 f0       	breq	.+32     	; 0x1470 <showSD+0x48>
    1450:	58 f4       	brcc	.+22     	; 0x1468 <showSD+0x40>
		case CLOSED:	printf("SD Closed");
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	91 e0       	ldi	r25, 0x01	; 1
	switch(stat)
    1456:	c2 30       	cpi	r28, 0x02	; 2
    1458:	59 f0       	breq	.+22     	; 0x1470 <showSD+0x48>
		case OPENED:	printf("SD Open");
    145a:	8a e3       	ldi	r24, 0x3A	; 58
    145c:	91 e0       	ldi	r25, 0x01	; 1
	switch(stat)
    145e:	c4 30       	cpi	r28, 0x04	; 4
    1460:	39 f0       	breq	.+14     	; 0x1470 <showSD+0x48>
						break;
		case SYNCING:	printf("SD Syncing");
						break;
		default:		printf("?????");
    1462:	88 e5       	ldi	r24, 0x58	; 88
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <showSD+0x48>
		case SYNCING:	printf("SD Syncing");
    1468:	8d e4       	ldi	r24, 0x4D	; 77
    146a:	91 e0       	ldi	r25, 0x01	; 1
	switch(stat)
    146c:	c8 30       	cpi	r28, 0x08	; 8
    146e:	c9 f7       	brne	.-14     	; 0x1462 <showSD+0x3a>
		default:		printf("?????");
    1470:	9f 93       	push	r25
    1472:	8f 93       	push	r24
    1474:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
						break;
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
	}
}
    147c:	cf 91       	pop	r28
    147e:	08 95       	ret

00001480 <showADC>:
void showADC(void)//show output of ADC 1 + 2
{
	Temperature=ReadADC(1);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    1486:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <Temperature+0x1>
    148a:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <Temperature>
	ili9341_setcursor(10,20);
    148e:	64 e1       	ldi	r22, 0x14	; 20
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	8a e0       	ldi	r24, 0x0A	; 10
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
	printf("ADC1: %d", Temperature);
    149a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <Temperature+0x1>
    149e:	8f 93       	push	r24
    14a0:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <Temperature>
    14a4:	8f 93       	push	r24
    14a6:	8e e5       	ldi	r24, 0x5E	; 94
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	9f 93       	push	r25
    14ac:	8f 93       	push	r24
    14ae:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
	Temperature=ReadADC(2);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    14b8:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <Temperature+0x1>
    14bc:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <Temperature>
	ili9341_setcursor(10,40);
    14c0:	68 e2       	ldi	r22, 0x28	; 40
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	8a e0       	ldi	r24, 0x0A	; 10
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
	printf("ADC2: %d", Temperature);
    14cc:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <Temperature+0x1>
    14d0:	8f 93       	push	r24
    14d2:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <Temperature>
    14d6:	8f 93       	push	r24
    14d8:	87 e6       	ldi	r24, 0x67	; 103
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	9f 93       	push	r25
    14de:	8f 93       	push	r24
    14e0:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
	ili9341_setcursor(10,0);
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	8a e0       	ldi	r24, 0x0A	; 10
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
		//push button
		if(JOY_PUSH && (!entprell))
    14f0:	86 b1       	in	r24, 0x06	; 6
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <entprell>
    14f8:	89 2b       	or	r24, r25
    14fa:	2d b7       	in	r18, 0x3d	; 61
    14fc:	3e b7       	in	r19, 0x3e	; 62
    14fe:	28 5f       	subi	r18, 0xF8	; 248
    1500:	3f 4f       	sbci	r19, 0xFF	; 255
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	3e bf       	out	0x3e, r19	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	2d bf       	out	0x3d, r18	; 61
    150c:	81 11       	cpse	r24, r1
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <showADC+0xa0>
		{
			printf("PUSH");
    1510:	80 e7       	ldi	r24, 0x70	; 112
    1512:	91 e0       	ldi	r25, 0x01	; 1
    1514:	9f 93       	push	r25
    1516:	8f 93       	push	r24
    1518:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
		}
		//horizontal
		if(JOY_HOR LEFT)
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    1526:	89 35       	cpi	r24, 0x59	; 89
    1528:	92 40       	sbci	r25, 0x02	; 2
    152a:	08 f4       	brcc	.+2      	; 0x152e <showADC+0xae>
    152c:	44 c0       	rjmp	.+136    	; 0x15b6 <showADC+0x136>
		{
			printf("LEFT");
    152e:	85 e7       	ldi	r24, 0x75	; 117
    1530:	91 e0       	ldi	r25, 0x01	; 1
		}else if(JOY_HOR RIGHT)
		{
			printf("RIGHT");
    1532:	9f 93       	push	r25
    1534:	8f 93       	push	r24
    1536:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
		}
		//vertical
		if(JOY_VERT UP)
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    1544:	80 39       	cpi	r24, 0x90	; 144
    1546:	91 40       	sbci	r25, 0x01	; 1
    1548:	08 f0       	brcs	.+2      	; 0x154c <showADC+0xcc>
    154a:	3f c0       	rjmp	.+126    	; 0x15ca <showADC+0x14a>
		{
			printf("UP");
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	91 e0       	ldi	r25, 0x01	; 1
		}else if(JOY_VERT DOWN)
		{
			printf("DOWN");
    1550:	9f 93       	push	r25
    1552:	8f 93       	push	r24
    1554:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
		}
		if((JOY_HOR < 600) && (JOY_HOR>400) && (JOY_VERT<600) && (JOY_VERT>400) && !JOY_PUSH)
    155c:	82 e0       	ldi	r24, 0x02	; 2
    155e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    1562:	88 35       	cpi	r24, 0x58	; 88
    1564:	92 40       	sbci	r25, 0x02	; 2
    1566:	30 f5       	brcc	.+76     	; 0x15b4 <showADC+0x134>
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    156e:	81 39       	cpi	r24, 0x91	; 145
    1570:	91 40       	sbci	r25, 0x01	; 1
    1572:	00 f1       	brcs	.+64     	; 0x15b4 <showADC+0x134>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    157a:	88 35       	cpi	r24, 0x58	; 88
    157c:	92 40       	sbci	r25, 0x02	; 2
    157e:	d0 f4       	brcc	.+52     	; 0x15b4 <showADC+0x134>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    1586:	81 39       	cpi	r24, 0x91	; 145
    1588:	91 40       	sbci	r25, 0x01	; 1
    158a:	a0 f0       	brcs	.+40     	; 0x15b4 <showADC+0x134>
    158c:	30 9b       	sbis	0x06, 0	; 6
    158e:	12 c0       	rjmp	.+36     	; 0x15b4 <showADC+0x134>
    1590:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <entprell>
    1594:	81 11       	cpse	r24, r1
    1596:	0e c0       	rjmp	.+28     	; 0x15b4 <showADC+0x134>
		{
			ili9341_setcursor(10,0);
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
			printf("     ");
    15a4:	8a e2       	ldi	r24, 0x2A	; 42
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	9f 93       	push	r25
    15aa:	8f 93       	push	r24
    15ac:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
		}
	
}
    15b4:	08 95       	ret
		}else if(JOY_HOR RIGHT)
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    15bc:	80 39       	cpi	r24, 0x90	; 144
    15be:	91 40       	sbci	r25, 0x01	; 1
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <showADC+0x144>
    15c2:	bd cf       	rjmp	.-134    	; 0x153e <showADC+0xbe>
			printf("RIGHT");
    15c4:	8a e7       	ldi	r24, 0x7A	; 122
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	b4 cf       	rjmp	.-152    	; 0x1532 <showADC+0xb2>
		}else if(JOY_VERT DOWN)
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    15d0:	89 35       	cpi	r24, 0x59	; 89
    15d2:	92 40       	sbci	r25, 0x02	; 2
    15d4:	18 f2       	brcs	.-122    	; 0x155c <showADC+0xdc>
			printf("DOWN");
    15d6:	83 e8       	ldi	r24, 0x83	; 131
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	ba cf       	rjmp	.-140    	; 0x1550 <showADC+0xd0>

000015dc <ili9341_hard_init>:
uint16_t _height = 240;


void ili9341_hard_init(void)//init hardware
{
rstddr=0xFF;//output for reset
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	8a b9       	out	0x0a, r24	; 10
rstport |=(1<<rst);//pull high for normal operation
    15e0:	5f 9a       	sbi	0x0b, 7	; 11
controlddr|=(1<<dc);//D/C as output
    15e2:	20 9a       	sbi	0x04, 0	; 4
}
    15e4:	08 95       	ret

000015e6 <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
DDRB |=(1<<1)|(1<<2)|(1<<3)|(1<<5);//CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
    15e6:	84 b1       	in	r24, 0x04	; 4
    15e8:	8e 62       	ori	r24, 0x2E	; 46
    15ea:	84 b9       	out	0x04, r24	; 4
SPCR=(1<<SPE)|(1<<MSTR);//mode 0,fosc/4
    15ec:	80 e5       	ldi	r24, 0x50	; 80
    15ee:	8c bd       	out	0x2c, r24	; 44
SPSR |=(1<<SPI2X);//doubling spi speed.i.e final spi speed-fosc/2
    15f0:	8d b5       	in	r24, 0x2d	; 45
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	8d bd       	out	0x2d, r24	; 45
PORTB |=(1<<1);//cs off during startup
    15f6:	29 9a       	sbi	0x05, 1	; 5

}
    15f8:	08 95       	ret

000015fa <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
SPDR=spi_data;//move data into spdr
    15fa:	8e bd       	out	0x2e, r24	; 46
while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    15fc:	0d b4       	in	r0, 0x2d	; 45
    15fe:	07 fe       	sbrs	r0, 7
    1600:	fd cf       	rjmp	.-6      	; 0x15fc <ili9341_spi_send+0x2>
}
    1602:	08 95       	ret

00001604 <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
controlport &=~((1<<dc)|(1<<cs));//dc and cs both low to send command
    1604:	95 b1       	in	r25, 0x05	; 5
    1606:	9c 7f       	andi	r25, 0xFC	; 252
    1608:	95 b9       	out	0x05, r25	; 5
	__builtin_avr_delay_cycles(__ticks_dc);
    160a:	9a e1       	ldi	r25, 0x1A	; 26
    160c:	9a 95       	dec	r25
    160e:	f1 f7       	brne	.-4      	; 0x160c <ili9341_writecommand8+0x8>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <ili9341_writecommand8+0xe>
_delay_us(5);//little delay
ili9341_spi_send(com);
    1612:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ili9341_spi_send>
controlport |=(1<<cs);//pull high cs
    1616:	29 9a       	sbi	0x05, 1	; 5
}
    1618:	08 95       	ret

0000161a <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
controlport |=(1<<dc);//st dc high for data
    161a:	28 9a       	sbi	0x05, 0	; 5
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	9a 95       	dec	r25
    1620:	f1 f7       	brne	.-4      	; 0x161e <ili9341_writedata8+0x4>
    1622:	00 00       	nop
_delay_us(1);//delay
controlport &=~(1<<cs);//set cs low for operation
    1624:	29 98       	cbi	0x05, 1	; 5
ili9341_spi_send(data);
    1626:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <ili9341_spi_send>
controlport |=(1<<cs);
    162a:	29 9a       	sbi	0x05, 1	; 5
}
    162c:	08 95       	ret

0000162e <ili9341_setaddress>:


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
    162e:	df 92       	push	r13
    1630:	ef 92       	push	r14
    1632:	ff 92       	push	r15
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	e8 2e       	mov	r14, r24
    163e:	d9 2e       	mov	r13, r25
    1640:	d6 2f       	mov	r29, r22
    1642:	17 2f       	mov	r17, r23
    1644:	04 2f       	mov	r16, r20
    1646:	f5 2e       	mov	r15, r21
    1648:	c2 2f       	mov	r28, r18
ili9341_writecommand8(0x2A);
    164a:	8a e2       	ldi	r24, 0x2A	; 42
    164c:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(x1>>8);
    1650:	8d 2d       	mov	r24, r13
    1652:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(x1);
    1656:	8e 2d       	mov	r24, r14
    1658:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(x2>>8);
    165c:	8f 2d       	mov	r24, r15
    165e:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(x2);
    1662:	80 2f       	mov	r24, r16
    1664:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

ili9341_writecommand8(0x2B);
    1668:	8b e2       	ldi	r24, 0x2B	; 43
    166a:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(y1>>8);
    166e:	81 2f       	mov	r24, r17
    1670:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(y1);
    1674:	8d 2f       	mov	r24, r29
    1676:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(y2);
    167a:	8c 2f       	mov	r24, r28
    167c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(y2);
    1680:	8c 2f       	mov	r24, r28
    1682:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

ili9341_writecommand8(0x2C);//meory write
    1686:	8c e2       	ldi	r24, 0x2C	; 44
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
ili9341_writecommand8(0x2C);//meory write
    1696:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <ili9341_writecommand8>

0000169a <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
rstport |=(1<<rst);//pull high if low previously
    169a:	5f 9a       	sbi	0x0b, 7	; 11
	__builtin_avr_delay_cycles(__ticks_dc);
    169c:	2f ef       	ldi	r18, 0xFF	; 255
    169e:	83 ec       	ldi	r24, 0xC3	; 195
    16a0:	99 e0       	ldi	r25, 0x09	; 9
    16a2:	21 50       	subi	r18, 0x01	; 1
    16a4:	80 40       	sbci	r24, 0x00	; 0
    16a6:	90 40       	sbci	r25, 0x00	; 0
    16a8:	e1 f7       	brne	.-8      	; 0x16a2 <ili9341_hard_reset+0x8>
    16aa:	00 c0       	rjmp	.+0      	; 0x16ac <ili9341_hard_reset+0x12>
    16ac:	00 00       	nop
_delay_ms(200);
rstport &=~(1<<rst);//low for reset
    16ae:	5f 98       	cbi	0x0b, 7	; 11
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	83 ec       	ldi	r24, 0xC3	; 195
    16b4:	99 e0       	ldi	r25, 0x09	; 9
    16b6:	21 50       	subi	r18, 0x01	; 1
    16b8:	80 40       	sbci	r24, 0x00	; 0
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <ili9341_hard_reset+0x1c>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <ili9341_hard_reset+0x26>
    16c0:	00 00       	nop
_delay_ms(200);
rstport |=(1<<rst);//again pull high for normal operation
    16c2:	5f 9a       	sbi	0x0b, 7	; 11
    16c4:	2f ef       	ldi	r18, 0xFF	; 255
    16c6:	83 ec       	ldi	r24, 0xC3	; 195
    16c8:	99 e0       	ldi	r25, 0x09	; 9
    16ca:	21 50       	subi	r18, 0x01	; 1
    16cc:	80 40       	sbci	r24, 0x00	; 0
    16ce:	90 40       	sbci	r25, 0x00	; 0
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <ili9341_hard_reset+0x30>
    16d2:	00 c0       	rjmp	.+0      	; 0x16d4 <ili9341_hard_reset+0x3a>
    16d4:	00 00       	nop
_delay_ms(200);
}
    16d6:	08 95       	ret

000016d8 <ili9341_init>:


void ili9341_init(void)//set up display using predefined command sequence
{
ili9341_hard_init();
    16d8:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <ili9341_hard_init>
ili9341_spi_init();
    16dc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ili9341_spi_init>
ili9341_hard_reset();
    16e0:	0e 94 4d 0b 	call	0x169a	; 0x169a <ili9341_hard_reset>
ili9341_writecommand8(0x01);//soft reset
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
    16ea:	2f ef       	ldi	r18, 0xFF	; 255
    16ec:	83 ed       	ldi	r24, 0xD3	; 211
    16ee:	90 e3       	ldi	r25, 0x30	; 48
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	80 40       	sbci	r24, 0x00	; 0
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <ili9341_init+0x18>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <ili9341_init+0x22>
    16fa:	00 00       	nop
_delay_ms(1000);
//power control A
ili9341_writecommand8(0xCB);
    16fc:	8b ec       	ldi	r24, 0xCB	; 203
    16fe:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x39);
    1702:	89 e3       	ldi	r24, 0x39	; 57
    1704:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x2C);
    1708:	8c e2       	ldi	r24, 0x2C	; 44
    170a:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x00);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x34);
    1714:	84 e3       	ldi	r24, 0x34	; 52
    1716:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x02);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//power control B
ili9341_writecommand8(0xCF);
    1720:	8f ec       	ldi	r24, 0xCF	; 207
    1722:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0xC1);
    172c:	81 ec       	ldi	r24, 0xC1	; 193
    172e:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x30);
    1732:	80 e3       	ldi	r24, 0x30	; 48
    1734:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//driver timing control A
ili9341_writecommand8(0xE8);
    1738:	88 ee       	ldi	r24, 0xE8	; 232
    173a:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x85);
    173e:	85 e8       	ldi	r24, 0x85	; 133
    1740:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x00);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x78);
    174a:	88 e7       	ldi	r24, 0x78	; 120
    174c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//driver timing control B
ili9341_writecommand8(0xEA);
    1750:	8a ee       	ldi	r24, 0xEA	; 234
    1752:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x00);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//power on sequence control
ili9341_writecommand8(0xED);
    1762:	8d ee       	ldi	r24, 0xED	; 237
    1764:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x64);
    1768:	84 e6       	ldi	r24, 0x64	; 100
    176a:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x03);
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x12);
    1774:	82 e1       	ldi	r24, 0x12	; 18
    1776:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x81);
    177a:	81 e8       	ldi	r24, 0x81	; 129
    177c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//pump ratio control
ili9341_writecommand8(0xF7);
    1780:	87 ef       	ldi	r24, 0xF7	; 247
    1782:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x20);
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//power control,VRH[5:0]
ili9341_writecommand8(0xC0);
    178c:	80 ec       	ldi	r24, 0xC0	; 192
    178e:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x23);
    1792:	83 e2       	ldi	r24, 0x23	; 35
    1794:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//Power control,SAP[2:0];BT[3:0]
ili9341_writecommand8(0xC1);
    1798:	81 ec       	ldi	r24, 0xC1	; 193
    179a:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x10);
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//vcm control
ili9341_writecommand8(0xC5);
    17a4:	85 ec       	ldi	r24, 0xC5	; 197
    17a6:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x3E);
    17aa:	8e e3       	ldi	r24, 0x3E	; 62
    17ac:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x28);
    17b0:	88 e2       	ldi	r24, 0x28	; 40
    17b2:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//vcm control 2
ili9341_writecommand8(0xC7);
    17b6:	87 ec       	ldi	r24, 0xC7	; 199
    17b8:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x86);
    17bc:	86 e8       	ldi	r24, 0x86	; 134
    17be:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//memory access control
ili9341_writecommand8(0x36);
    17c2:	86 e3       	ldi	r24, 0x36	; 54
    17c4:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x48);
    17c8:	88 e4       	ldi	r24, 0x48	; 72
    17ca:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//pixel format
ili9341_writecommand8(0x3A);
    17ce:	8a e3       	ldi	r24, 0x3A	; 58
    17d0:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x55);
    17d4:	85 e5       	ldi	r24, 0x55	; 85
    17d6:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//frameration control,normal mode full colours
ili9341_writecommand8(0xB1);
    17da:	81 eb       	ldi	r24, 0xB1	; 177
    17dc:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x18);
    17e6:	88 e1       	ldi	r24, 0x18	; 24
    17e8:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//display function control
ili9341_writecommand8(0xB6);
    17ec:	86 eb       	ldi	r24, 0xB6	; 182
    17ee:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x08);
    17f2:	88 e0       	ldi	r24, 0x08	; 8
    17f4:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x82);
    17f8:	82 e8       	ldi	r24, 0x82	; 130
    17fa:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x27);
    17fe:	87 e2       	ldi	r24, 0x27	; 39
    1800:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//3gamma function disable
ili9341_writecommand8(0xF2);
    1804:	82 ef       	ldi	r24, 0xF2	; 242
    1806:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//gamma curve selected
ili9341_writecommand8(0x26);
    1810:	86 e2       	ldi	r24, 0x26	; 38
    1812:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x01);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//set positive gamma correction
ili9341_writecommand8(0xE0);
    181c:	80 ee       	ldi	r24, 0xE0	; 224
    181e:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x0F);
    1822:	8f e0       	ldi	r24, 0x0F	; 15
    1824:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x31);
    1828:	81 e3       	ldi	r24, 0x31	; 49
    182a:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x2B);
    182e:	8b e2       	ldi	r24, 0x2B	; 43
    1830:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0C);
    1834:	8c e0       	ldi	r24, 0x0C	; 12
    1836:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0E);
    183a:	8e e0       	ldi	r24, 0x0E	; 14
    183c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x08);
    1840:	88 e0       	ldi	r24, 0x08	; 8
    1842:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x4E);
    1846:	8e e4       	ldi	r24, 0x4E	; 78
    1848:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0xF1);
    184c:	81 ef       	ldi	r24, 0xF1	; 241
    184e:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x37);
    1852:	87 e3       	ldi	r24, 0x37	; 55
    1854:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x07);
    1858:	87 e0       	ldi	r24, 0x07	; 7
    185a:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x10);
    185e:	80 e1       	ldi	r24, 0x10	; 16
    1860:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x03);
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0E);
    186a:	8e e0       	ldi	r24, 0x0E	; 14
    186c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x09);
    1870:	89 e0       	ldi	r24, 0x09	; 9
    1872:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x00);
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//set negative gamma correction
ili9341_writecommand8(0xE1);
    187c:	81 ee       	ldi	r24, 0xE1	; 225
    187e:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
ili9341_writedata8(0x00);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0E);
    1888:	8e e0       	ldi	r24, 0x0E	; 14
    188a:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x14);
    188e:	84 e1       	ldi	r24, 0x14	; 20
    1890:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x03);
    1894:	83 e0       	ldi	r24, 0x03	; 3
    1896:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x11);
    189a:	81 e1       	ldi	r24, 0x11	; 17
    189c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x07);
    18a0:	87 e0       	ldi	r24, 0x07	; 7
    18a2:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x31);
    18a6:	81 e3       	ldi	r24, 0x31	; 49
    18a8:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0xC1);
    18ac:	81 ec       	ldi	r24, 0xC1	; 193
    18ae:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x48);
    18b2:	88 e4       	ldi	r24, 0x48	; 72
    18b4:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x08);
    18b8:	88 e0       	ldi	r24, 0x08	; 8
    18ba:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0F);
    18be:	8f e0       	ldi	r24, 0x0F	; 15
    18c0:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0C);
    18c4:	8c e0       	ldi	r24, 0x0C	; 12
    18c6:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x31);
    18ca:	81 e3       	ldi	r24, 0x31	; 49
    18cc:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x36);
    18d0:	86 e3       	ldi	r24, 0x36	; 54
    18d2:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(0x0F);
    18d6:	8f e0       	ldi	r24, 0x0F	; 15
    18d8:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>

//exit sleep
ili9341_writecommand8(0x11);
    18dc:	81 e1       	ldi	r24, 0x11	; 17
    18de:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
    18e2:	2f ef       	ldi	r18, 0xFF	; 255
    18e4:	8b ed       	ldi	r24, 0xDB	; 219
    18e6:	95 e0       	ldi	r25, 0x05	; 5
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	80 40       	sbci	r24, 0x00	; 0
    18ec:	90 40       	sbci	r25, 0x00	; 0
    18ee:	e1 f7       	brne	.-8      	; 0x18e8 <ili9341_init+0x210>
    18f0:	00 c0       	rjmp	.+0      	; 0x18f2 <ili9341_init+0x21a>
    18f2:	00 00       	nop
_delay_ms(120);
//display on
ili9341_writecommand8(0x29);
    18f4:	89 e2       	ldi	r24, 0x29	; 41
    18f6:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <ili9341_writecommand8>

000018fa <ili9341_pushcolour>:

}

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
    18fa:	cf 93       	push	r28
    18fc:	c8 2f       	mov	r28, r24
    18fe:	89 2f       	mov	r24, r25
ili9341_writedata8(colour>>8);
    1900:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
ili9341_writedata8(colour);
    1904:	8c 2f       	mov	r24, r28
}
    1906:	cf 91       	pop	r28
ili9341_writedata8(colour);
    1908:	0c 94 0d 0b 	jmp	0x161a	; 0x161a <ili9341_writedata8>

0000190c <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	18 2f       	mov	r17, r24
    191a:	09 2f       	mov	r16, r25
uint16_t i,j;
ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
    191c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <LCD_H>
    1920:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <LCD_H+0x1>
    1924:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <LCD_W>
    1928:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <LCD_W+0x1>
    192c:	21 50       	subi	r18, 0x01	; 1
    192e:	31 09       	sbc	r19, r1
    1930:	41 50       	subi	r20, 0x01	; 1
    1932:	51 09       	sbc	r21, r1
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0e 94 17 0b 	call	0x162e	; 0x162e <ili9341_setaddress>

for(i=0;i<LCD_W;i++)
    1940:	d0 e0       	ldi	r29, 0x00	; 0
    1942:	c0 e0       	ldi	r28, 0x00	; 0
    1944:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    1948:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    194c:	c8 17       	cp	r28, r24
    194e:	d9 07       	cpc	r29, r25
    1950:	b8 f0       	brcs	.+46     	; 0x1980 <ili9341_clear+0x74>
{
ili9341_pushcolour(colour);
}
}

}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	08 95       	ret
ili9341_pushcolour(colour);
    1960:	81 2f       	mov	r24, r17
    1962:	90 2f       	mov	r25, r16
    1964:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <ili9341_pushcolour>
for(j=0;j<LCD_H;j++)
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	e8 1a       	sub	r14, r24
    196c:	f8 0a       	sbc	r15, r24
    196e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    1972:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    1976:	e8 16       	cp	r14, r24
    1978:	f9 06       	cpc	r15, r25
    197a:	90 f3       	brcs	.-28     	; 0x1960 <ili9341_clear+0x54>
for(i=0;i<LCD_W;i++)
    197c:	21 96       	adiw	r28, 0x01	; 1
    197e:	e2 cf       	rjmp	.-60     	; 0x1944 <ili9341_clear+0x38>
for(j=0;j<LCD_H;j++)
    1980:	f1 2c       	mov	r15, r1
    1982:	e1 2c       	mov	r14, r1
    1984:	f4 cf       	rjmp	.-24     	; 0x196e <ili9341_clear+0x62>

00001986 <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	fc 01       	movw	r30, r24
    198c:	d4 2f       	mov	r29, r20
    198e:	c5 2f       	mov	r28, r21
if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H)) return;
    1990:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    1994:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    1998:	e8 17       	cp	r30, r24
    199a:	f9 07       	cpc	r31, r25
    199c:	b0 f4       	brcc	.+44     	; 0x19ca <ili9341_drawpixel+0x44>
    199e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    19a2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    19a6:	68 17       	cp	r22, r24
    19a8:	79 07       	cpc	r23, r25
    19aa:	78 f4       	brcc	.+30     	; 0x19ca <ili9341_drawpixel+0x44>

ili9341_setaddress(x3,y3,x3+1,y3+1);
    19ac:	9b 01       	movw	r18, r22
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	af 01       	movw	r20, r30
    19b4:	4f 5f       	subi	r20, 0xFF	; 255
    19b6:	5f 4f       	sbci	r21, 0xFF	; 255
    19b8:	cf 01       	movw	r24, r30
    19ba:	0e 94 17 0b 	call	0x162e	; 0x162e <ili9341_setaddress>

ili9341_pushcolour(colour1);
    19be:	8d 2f       	mov	r24, r29
    19c0:	9c 2f       	mov	r25, r28
}
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
ili9341_pushcolour(colour1);
    19c6:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <ili9341_pushcolour>
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <ili9341_drawvline>:


//draw vertical line
void ili9341_drawvline(uint16_t x,uint16_t y,uint16_t h,uint16_t colour)//basically we will see this line horizental if we see the display 320*240
{
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	fc 01       	movw	r30, r24
    19da:	ea 01       	movw	r28, r20
    19dc:	12 2f       	mov	r17, r18
    19de:	03 2f       	mov	r16, r19
if((x >=LCD_W) || (y >=LCD_H)) return;
    19e0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    19e4:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    19e8:	e8 17       	cp	r30, r24
    19ea:	f9 07       	cpc	r31, r25
    19ec:	18 f5       	brcc	.+70     	; 0x1a34 <ili9341_drawvline+0x64>
    19ee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    19f2:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    19f6:	68 17       	cp	r22, r24
    19f8:	79 07       	cpc	r23, r25
    19fa:	e0 f4       	brcc	.+56     	; 0x1a34 <ili9341_drawvline+0x64>
if((y+h-1)>=LCD_H)
    19fc:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <LCD_H>
    1a00:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <LCD_H+0x1>
    1a04:	ca 01       	movw	r24, r20
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	86 0f       	add	r24, r22
    1a0a:	97 1f       	adc	r25, r23
    1a0c:	82 17       	cp	r24, r18
    1a0e:	93 07       	cpc	r25, r19
    1a10:	30 f0       	brcs	.+12     	; 0x1a1e <ili9341_drawvline+0x4e>
h=LCD_H-y;
    1a12:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_H>
    1a16:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <LCD_H+0x1>
    1a1a:	c6 1b       	sub	r28, r22
    1a1c:	d7 0b       	sbc	r29, r23
ili9341_setaddress(x,y,x,y+h-1);
    1a1e:	9b 01       	movw	r18, r22
    1a20:	21 50       	subi	r18, 0x01	; 1
    1a22:	31 09       	sbc	r19, r1
    1a24:	2c 0f       	add	r18, r28
    1a26:	3d 1f       	adc	r19, r29
    1a28:	af 01       	movw	r20, r30
    1a2a:	cf 01       	movw	r24, r30
    1a2c:	0e 94 17 0b 	call	0x162e	; 0x162e <ili9341_setaddress>
while(h--)
    1a30:	21 97       	sbiw	r28, 0x01	; 1
    1a32:	28 f4       	brcc	.+10     	; 0x1a3e <ili9341_drawvline+0x6e>
{
ili9341_pushcolour(colour);
}
}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	08 95       	ret
ili9341_pushcolour(colour);
    1a3e:	81 2f       	mov	r24, r17
    1a40:	90 2f       	mov	r25, r16
    1a42:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <ili9341_pushcolour>
    1a46:	f4 cf       	rjmp	.-24     	; 0x1a30 <ili9341_drawvline+0x60>

00001a48 <ili9341_drawhline>:


//draw horizental line

void ili9341_drawhline(uint16_t x,uint16_t y,uint16_t w,uint16_t colour)
{
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	fc 01       	movw	r30, r24
    1a52:	ea 01       	movw	r28, r20
    1a54:	12 2f       	mov	r17, r18
    1a56:	03 2f       	mov	r16, r19
if((x >=LCD_W) || (y >=LCD_H)) return;
    1a58:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    1a5c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    1a60:	e8 17       	cp	r30, r24
    1a62:	f9 07       	cpc	r31, r25
    1a64:	18 f5       	brcc	.+70     	; 0x1aac <ili9341_drawhline+0x64>
    1a66:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    1a6a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    1a6e:	68 17       	cp	r22, r24
    1a70:	79 07       	cpc	r23, r25
    1a72:	e0 f4       	brcc	.+56     	; 0x1aac <ili9341_drawhline+0x64>
if((x+w-1)>=LCD_W)
    1a74:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <LCD_W>
    1a78:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <LCD_W+0x1>
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	8e 0f       	add	r24, r30
    1a82:	9f 1f       	adc	r25, r31
    1a84:	82 17       	cp	r24, r18
    1a86:	93 07       	cpc	r25, r19
    1a88:	30 f0       	brcs	.+12     	; 0x1a96 <ili9341_drawhline+0x4e>
w=LCD_W-x;
    1a8a:	c0 91 15 01 	lds	r28, 0x0115	; 0x800115 <LCD_W>
    1a8e:	d0 91 16 01 	lds	r29, 0x0116	; 0x800116 <LCD_W+0x1>
    1a92:	ce 1b       	sub	r28, r30
    1a94:	df 0b       	sbc	r29, r31
ili9341_setaddress(x,y,x+w-1,y);
    1a96:	af 01       	movw	r20, r30
    1a98:	41 50       	subi	r20, 0x01	; 1
    1a9a:	51 09       	sbc	r21, r1
    1a9c:	4c 0f       	add	r20, r28
    1a9e:	5d 1f       	adc	r21, r29
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	0e 94 17 0b 	call	0x162e	; 0x162e <ili9341_setaddress>
while(w--)
    1aa8:	21 97       	sbiw	r28, 0x01	; 1
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <ili9341_drawhline+0x6e>
{
ili9341_pushcolour(colour);
}
}
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	08 95       	ret
ili9341_pushcolour(colour);
    1ab6:	81 2f       	mov	r24, r17
    1ab8:	90 2f       	mov	r25, r16
    1aba:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <ili9341_pushcolour>
    1abe:	f4 cf       	rjmp	.-24     	; 0x1aa8 <ili9341_drawhline+0x60>

00001ac0 <ili9341_fillrect>:

//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	7a 01       	movw	r14, r20
    1ad4:	e9 01       	movw	r28, r18
if((x >=LCD_W) || (y >=LCD_H)) return;
    1ad6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    1ada:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    1ade:	e8 17       	cp	r30, r24
    1ae0:	f9 07       	cpc	r31, r25
    1ae2:	c0 f5       	brcc	.+112    	; 0x1b54 <ili9341_fillrect+0x94>
    1ae4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    1ae8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    1aec:	68 17       	cp	r22, r24
    1aee:	79 07       	cpc	r23, r25
    1af0:	88 f5       	brcc	.+98     	; 0x1b54 <ili9341_fillrect+0x94>
if((x+w-1)>=LCD_W)
    1af2:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <LCD_W>
    1af6:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <LCD_W+0x1>
    1afa:	ca 01       	movw	r24, r20
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	8e 0f       	add	r24, r30
    1b00:	9f 1f       	adc	r25, r31
    1b02:	82 17       	cp	r24, r18
    1b04:	93 07       	cpc	r25, r19
    1b06:	30 f0       	brcs	.+12     	; 0x1b14 <ili9341_fillrect+0x54>
w=LCD_W-x;
    1b08:	e0 90 15 01 	lds	r14, 0x0115	; 0x800115 <LCD_W>
    1b0c:	f0 90 16 01 	lds	r15, 0x0116	; 0x800116 <LCD_W+0x1>
    1b10:	ee 1a       	sub	r14, r30
    1b12:	ff 0a       	sbc	r15, r31
if((y+h-1)>=LCD_H)
    1b14:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <LCD_H>
    1b18:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <LCD_H+0x1>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	86 0f       	add	r24, r22
    1b22:	97 1f       	adc	r25, r23
    1b24:	82 17       	cp	r24, r18
    1b26:	93 07       	cpc	r25, r19
    1b28:	30 f0       	brcs	.+12     	; 0x1b36 <ili9341_fillrect+0x76>
h=LCD_H-y;
    1b2a:	c0 91 13 01 	lds	r28, 0x0113	; 0x800113 <LCD_H>
    1b2e:	d0 91 14 01 	lds	r29, 0x0114	; 0x800114 <LCD_H+0x1>
    1b32:	c6 1b       	sub	r28, r22
    1b34:	d7 0b       	sbc	r29, r23

ili9341_setaddress(x, y, x+w-1, y+h-1);
    1b36:	9b 01       	movw	r18, r22
    1b38:	21 50       	subi	r18, 0x01	; 1
    1b3a:	31 09       	sbc	r19, r1
    1b3c:	2c 0f       	add	r18, r28
    1b3e:	3d 1f       	adc	r19, r29
    1b40:	af 01       	movw	r20, r30
    1b42:	41 50       	subi	r20, 0x01	; 1
    1b44:	51 09       	sbc	r21, r1
    1b46:	4e 0d       	add	r20, r14
    1b48:	5f 1d       	adc	r21, r15
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	0e 94 17 0b 	call	0x162e	; 0x162e <ili9341_setaddress>

for(y=h; y>0; y--) 
    1b50:	20 97       	sbiw	r28, 0x00	; 0
    1b52:	a1 f4       	brne	.+40     	; 0x1b7c <ili9341_fillrect+0xbc>
for(x=w; x>0; x--)
{
ili9341_pushcolour(colour);
}
}
}
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	08 95       	ret
ili9341_pushcolour(colour);
    1b66:	c8 01       	movw	r24, r16
    1b68:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <ili9341_pushcolour>
for(x=w; x>0; x--)
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	c8 1a       	sub	r12, r24
    1b70:	d1 08       	sbc	r13, r1
    1b72:	c1 14       	cp	r12, r1
    1b74:	d1 04       	cpc	r13, r1
    1b76:	b9 f7       	brne	.-18     	; 0x1b66 <ili9341_fillrect+0xa6>
for(y=h; y>0; y--) 
    1b78:	21 97       	sbiw	r28, 0x01	; 1
    1b7a:	ea cf       	rjmp	.-44     	; 0x1b50 <ili9341_fillrect+0x90>
for(x=w; x>0; x--)
    1b7c:	67 01       	movw	r12, r14
    1b7e:	f9 cf       	rjmp	.-14     	; 0x1b72 <ili9341_fillrect+0xb2>

00001b80 <ili9341_setRotation>:
//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
    1b80:	cf 93       	push	r28
    1b82:	c8 2f       	mov	r28, r24
uint8_t rotation;
ili9341_writecommand8(0x36);
    1b84:	86 e3       	ldi	r24, 0x36	; 54
    1b86:	0e 94 02 0b 	call	0x1604	; 0x1604 <ili9341_writecommand8>
rotation=m%4;
    1b8a:	c3 70       	andi	r28, 0x03	; 3
switch (rotation) 
    1b8c:	c2 30       	cpi	r28, 0x02	; 2
    1b8e:	89 f0       	breq	.+34     	; 0x1bb2 <ili9341_setRotation+0x32>
    1b90:	c3 30       	cpi	r28, 0x03	; 3
    1b92:	01 f1       	breq	.+64     	; 0x1bd4 <ili9341_setRotation+0x54>
{
case 0:
ili9341_writedata8(0x40|0x08);
    1b94:	88 e4       	ldi	r24, 0x48	; 72
switch (rotation) 
    1b96:	c1 30       	cpi	r28, 0x01	; 1
    1b98:	69 f4       	brne	.+26     	; 0x1bb4 <ili9341_setRotation+0x34>
LCD_W = 240;
LCD_H = 320;
break;
case 1:
ili9341_writedata8(0x20|0x08);
    1b9a:	88 e2       	ldi	r24, 0x28	; 40
ili9341_writedata8(0x80|0x08);
LCD_W  = 240;
LCD_H = 320;
break;
case 3:
ili9341_writedata8(0x40|0x80|0x20|0x08);
    1b9c:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
LCD_W  = 320;
    1ba0:	80 e4       	ldi	r24, 0x40	; 64
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <LCD_W+0x1>
    1ba8:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <LCD_W>
LCD_H = 240;
    1bac:	80 ef       	ldi	r24, 0xF0	; 240
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	0b c0       	rjmp	.+22     	; 0x1bc8 <ili9341_setRotation+0x48>
ili9341_writedata8(0x80|0x08);
    1bb2:	88 e8       	ldi	r24, 0x88	; 136
    1bb4:	0e 94 0d 0b 	call	0x161a	; 0x161a <ili9341_writedata8>
LCD_W  = 240;
    1bb8:	80 ef       	ldi	r24, 0xF0	; 240
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <LCD_W+0x1>
    1bc0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <LCD_W>
LCD_H = 320;
    1bc4:	80 e4       	ldi	r24, 0x40	; 64
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
LCD_H = 240;
    1bc8:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <LCD_H+0x1>
    1bcc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <LCD_H>
break;
}
}
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret
ili9341_writedata8(0x40|0x80|0x20|0x08);
    1bd4:	88 ee       	ldi	r24, 0xE8	; 232
    1bd6:	e2 cf       	rjmp	.-60     	; 0x1b9c <ili9341_setRotation+0x1c>

00001bd8 <ili9341_drawCircle>:

// Draw a circle outline
void ili9341_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) 
{
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <ili9341_drawCircle+0x26>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <ili9341_drawCircle+0x28>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	8c 01       	movw	r16, r24
    1c06:	7b 01       	movw	r14, r22
    1c08:	4b 83       	std	Y+3, r20	; 0x03
    1c0a:	5c 83       	std	Y+4, r21	; 0x04
    1c0c:	52 2e       	mov	r5, r18
    1c0e:	43 2e       	mov	r4, r19
  int16_t f = 1 - r;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	5c 01       	movw	r10, r24
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	a2 1a       	sub	r10, r18
    1c1c:	b3 0a       	sbc	r11, r19
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    1c1e:	c9 01       	movw	r24, r18
    1c20:	91 95       	neg	r25
    1c22:	81 95       	neg	r24
    1c24:	91 09       	sbc	r25, r1
    1c26:	9c 01       	movw	r18, r24
    1c28:	22 0f       	add	r18, r18
    1c2a:	33 1f       	adc	r19, r19
    1c2c:	3a 83       	std	Y+2, r19	; 0x02
    1c2e:	29 83       	std	Y+1, r18	; 0x01
  int16_t x = 0;
  int16_t y = r;

  ili9341_drawpixel(x0  , y0+r, color);
    1c30:	6b 81       	ldd	r22, Y+3	; 0x03
    1c32:	7c 81       	ldd	r23, Y+4	; 0x04
    1c34:	6e 0d       	add	r22, r14
    1c36:	7f 1d       	adc	r23, r15
    1c38:	45 2d       	mov	r20, r5
    1c3a:	54 2d       	mov	r21, r4
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
  ili9341_drawpixel(x0  , y0-r, color);
    1c42:	b7 01       	movw	r22, r14
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	68 1b       	sub	r22, r24
    1c4a:	79 0b       	sbc	r23, r25
    1c4c:	45 2d       	mov	r20, r5
    1c4e:	54 2d       	mov	r21, r4
    1c50:	c8 01       	movw	r24, r16
    1c52:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
  ili9341_drawpixel(x0+r, y0  , color);
    1c56:	45 2d       	mov	r20, r5
    1c58:	54 2d       	mov	r21, r4
    1c5a:	b7 01       	movw	r22, r14
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	80 0f       	add	r24, r16
    1c62:	91 1f       	adc	r25, r17
    1c64:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
  ili9341_drawpixel(x0-r, y0  , color);
    1c68:	45 2d       	mov	r20, r5
    1c6a:	54 2d       	mov	r21, r4
    1c6c:	b7 01       	movw	r22, r14
    1c6e:	c8 01       	movw	r24, r16
    1c70:	2b 81       	ldd	r18, Y+3	; 0x03
    1c72:	3c 81       	ldd	r19, Y+4	; 0x04
    1c74:	82 1b       	sub	r24, r18
    1c76:	93 0b       	sbc	r25, r19
    1c78:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
  int16_t x = 0;
    1c7c:	d1 2c       	mov	r13, r1
    1c7e:	c1 2c       	mov	r12, r1

  while (x<y) {
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	c8 16       	cp	r12, r24
    1c86:	d9 06       	cpc	r13, r25
    1c88:	bc f0       	brlt	.+46     	; 0x1cb8 <ili9341_drawCircle+0xe0>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    ili9341_drawpixel(x0 - y, y0 + x, color);
    ili9341_drawpixel(x0 + y, y0 - x, color);
    ili9341_drawpixel(x0 - y, y0 - x, color);
  }
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	7f 90       	pop	r7
    1cac:	6f 90       	pop	r6
    1cae:	5f 90       	pop	r5
    1cb0:	4f 90       	pop	r4
    1cb2:	3f 90       	pop	r3
    1cb4:	2f 90       	pop	r2
    1cb6:	08 95       	ret
    if (f >= 0) {
    1cb8:	b7 fc       	sbrc	r11, 7
    1cba:	0d c0       	rjmp	.+26     	; 0x1cd6 <ili9341_drawCircle+0xfe>
      y--;
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9c 83       	std	Y+4, r25	; 0x04
    1cc4:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    1cc6:	29 81       	ldd	r18, Y+1	; 0x01
    1cc8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cca:	2e 5f       	subi	r18, 0xFE	; 254
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	3a 83       	std	Y+2, r19	; 0x02
    1cd0:	29 83       	std	Y+1, r18	; 0x01
      f += ddF_y;
    1cd2:	a2 0e       	add	r10, r18
    1cd4:	b3 1e       	adc	r11, r19
    x++;
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	c3 1a       	sub	r12, r19
    1cda:	d3 0a       	sbc	r13, r19
    f += ddF_x;
    1cdc:	c6 01       	movw	r24, r12
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	a8 0e       	add	r10, r24
    1ce6:	b9 1e       	adc	r11, r25
    ili9341_drawpixel(x0 + x, y0 + y, color);
    1ce8:	38 01       	movw	r6, r16
    1cea:	6c 0c       	add	r6, r12
    1cec:	7d 1c       	adc	r7, r13
    1cee:	45 2d       	mov	r20, r5
    1cf0:	54 2d       	mov	r21, r4
    1cf2:	8b 80       	ldd	r8, Y+3	; 0x03
    1cf4:	9c 80       	ldd	r9, Y+4	; 0x04
    1cf6:	8e 0c       	add	r8, r14
    1cf8:	9f 1c       	adc	r9, r15
    1cfa:	b4 01       	movw	r22, r8
    1cfc:	c3 01       	movw	r24, r6
    1cfe:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 + y, color);
    1d02:	18 01       	movw	r2, r16
    1d04:	2c 18       	sub	r2, r12
    1d06:	3d 08       	sbc	r3, r13
    1d08:	45 2d       	mov	r20, r5
    1d0a:	54 2d       	mov	r21, r4
    1d0c:	b4 01       	movw	r22, r8
    1d0e:	c1 01       	movw	r24, r2
    1d10:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + x, y0 - y, color);
    1d14:	45 2d       	mov	r20, r5
    1d16:	54 2d       	mov	r21, r4
    1d18:	47 01       	movw	r8, r14
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	88 1a       	sub	r8, r24
    1d20:	99 0a       	sbc	r9, r25
    1d22:	b4 01       	movw	r22, r8
    1d24:	c3 01       	movw	r24, r6
    1d26:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - x, y0 - y, color);
    1d2a:	45 2d       	mov	r20, r5
    1d2c:	54 2d       	mov	r21, r4
    1d2e:	b4 01       	movw	r22, r8
    1d30:	c1 01       	movw	r24, r2
    1d32:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 + x, color);
    1d36:	47 01       	movw	r8, r14
    1d38:	8c 0c       	add	r8, r12
    1d3a:	9d 1c       	adc	r9, r13
    1d3c:	45 2d       	mov	r20, r5
    1d3e:	54 2d       	mov	r21, r4
    1d40:	b4 01       	movw	r22, r8
    1d42:	6b 80       	ldd	r6, Y+3	; 0x03
    1d44:	7c 80       	ldd	r7, Y+4	; 0x04
    1d46:	60 0e       	add	r6, r16
    1d48:	71 1e       	adc	r7, r17
    1d4a:	c3 01       	movw	r24, r6
    1d4c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 + x, color);
    1d50:	45 2d       	mov	r20, r5
    1d52:	54 2d       	mov	r21, r4
    1d54:	b4 01       	movw	r22, r8
    1d56:	18 01       	movw	r2, r16
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	22 1a       	sub	r2, r18
    1d5e:	33 0a       	sbc	r3, r19
    1d60:	c1 01       	movw	r24, r2
    1d62:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 + y, y0 - x, color);
    1d66:	47 01       	movw	r8, r14
    1d68:	8c 18       	sub	r8, r12
    1d6a:	9d 08       	sbc	r9, r13
    1d6c:	45 2d       	mov	r20, r5
    1d6e:	54 2d       	mov	r21, r4
    1d70:	b4 01       	movw	r22, r8
    1d72:	c3 01       	movw	r24, r6
    1d74:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    ili9341_drawpixel(x0 - y, y0 - x, color);
    1d78:	45 2d       	mov	r20, r5
    1d7a:	54 2d       	mov	r21, r4
    1d7c:	b4 01       	movw	r22, r8
    1d7e:	c1 01       	movw	r24, r2
    1d80:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    1d84:	7d cf       	rjmp	.-262    	; 0x1c80 <ili9341_drawCircle+0xa8>

00001d86 <ili9341_drawCircleHelper>:

//DRaw Circle Helper
void ili9341_drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color) 
{
    1d86:	2f 92       	push	r2
    1d88:	3f 92       	push	r3
    1d8a:	4f 92       	push	r4
    1d8c:	5f 92       	push	r5
    1d8e:	6f 92       	push	r6
    1d90:	7f 92       	push	r7
    1d92:	8f 92       	push	r8
    1d94:	9f 92       	push	r9
    1d96:	af 92       	push	r10
    1d98:	bf 92       	push	r11
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	6c 01       	movw	r12, r24
    1dac:	5b 01       	movw	r10, r22
    1dae:	ea 01       	movw	r28, r20
  int16_t f     = 1 - r;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	4c 01       	movw	r8, r24
    1db6:	84 1a       	sub	r8, r20
    1db8:	95 0a       	sbc	r9, r21
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
    1dba:	66 24       	eor	r6, r6
    1dbc:	77 24       	eor	r7, r7
    1dbe:	64 1a       	sub	r6, r20
    1dc0:	75 0a       	sbc	r7, r21
    1dc2:	66 0c       	add	r6, r6
    1dc4:	77 1c       	adc	r7, r7
  int16_t x     = 0;
    1dc6:	f1 2c       	mov	r15, r1
    1dc8:	e1 2c       	mov	r14, r1
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
    1dca:	82 2f       	mov	r24, r18
    1dcc:	84 70       	andi	r24, 0x04	; 4
    1dce:	58 2e       	mov	r5, r24
      ili9341_drawpixel(x0 + x, y0 + y, color);
      ili9341_drawpixel(x0 + y, y0 + x, color);
    }
    if (cornername & 0x2) {
    1dd0:	82 2f       	mov	r24, r18
    1dd2:	82 70       	andi	r24, 0x02	; 2
    1dd4:	48 2e       	mov	r4, r24
      ili9341_drawpixel(x0 + x, y0 - y, color);
      ili9341_drawpixel(x0 + y, y0 - x, color);
    }
    if (cornername & 0x8) {
    1dd6:	82 2f       	mov	r24, r18
    1dd8:	88 70       	andi	r24, 0x08	; 8
    1dda:	38 2e       	mov	r3, r24
      ili9341_drawpixel(x0 - y, y0 + x, color);
      ili9341_drawpixel(x0 - x, y0 + y, color);
    }
    if (cornername & 0x1) {
    1ddc:	21 70       	andi	r18, 0x01	; 1
    1dde:	22 2e       	mov	r2, r18
  while (x<y) {
    1de0:	ec 16       	cp	r14, r28
    1de2:	fd 06       	cpc	r15, r29
    1de4:	9c f0       	brlt	.+38     	; 0x1e0c <ili9341_drawCircleHelper+0x86>
      ili9341_drawpixel(x0 - y, y0 - x, color);
      ili9341_drawpixel(x0 - x, y0 - y, color);
    }
  }
}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	08 95       	ret
    if (f >= 0) {
    1e0c:	97 fc       	sbrc	r9, 7
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <ili9341_drawCircleHelper+0x96>
      y--;
    1e10:	21 97       	sbiw	r28, 0x01	; 1
      ddF_y += 2;
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	68 0e       	add	r6, r24
    1e16:	71 1c       	adc	r7, r1
      f     += ddF_y;
    1e18:	86 0c       	add	r8, r6
    1e1a:	97 1c       	adc	r9, r7
    x++;
    1e1c:	8f ef       	ldi	r24, 0xFF	; 255
    1e1e:	e8 1a       	sub	r14, r24
    1e20:	f8 0a       	sbc	r15, r24
    f     += ddF_x;
    1e22:	c7 01       	movw	r24, r14
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	88 0e       	add	r8, r24
    1e2c:	99 1e       	adc	r9, r25
    if (cornername & 0x4) {
    1e2e:	55 20       	and	r5, r5
    1e30:	91 f0       	breq	.+36     	; 0x1e56 <ili9341_drawCircleHelper+0xd0>
      ili9341_drawpixel(x0 + x, y0 + y, color);
    1e32:	a8 01       	movw	r20, r16
    1e34:	be 01       	movw	r22, r28
    1e36:	6a 0d       	add	r22, r10
    1e38:	7b 1d       	adc	r23, r11
    1e3a:	c6 01       	movw	r24, r12
    1e3c:	8e 0d       	add	r24, r14
    1e3e:	9f 1d       	adc	r25, r15
    1e40:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 + x, color);
    1e44:	a8 01       	movw	r20, r16
    1e46:	b5 01       	movw	r22, r10
    1e48:	6e 0d       	add	r22, r14
    1e4a:	7f 1d       	adc	r23, r15
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	8c 0d       	add	r24, r12
    1e50:	9d 1d       	adc	r25, r13
    1e52:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    if (cornername & 0x2) {
    1e56:	44 20       	and	r4, r4
    1e58:	91 f0       	breq	.+36     	; 0x1e7e <ili9341_drawCircleHelper+0xf8>
      ili9341_drawpixel(x0 + x, y0 - y, color);
    1e5a:	a8 01       	movw	r20, r16
    1e5c:	b5 01       	movw	r22, r10
    1e5e:	6c 1b       	sub	r22, r28
    1e60:	7d 0b       	sbc	r23, r29
    1e62:	c6 01       	movw	r24, r12
    1e64:	8e 0d       	add	r24, r14
    1e66:	9f 1d       	adc	r25, r15
    1e68:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
      ili9341_drawpixel(x0 + y, y0 - x, color);
    1e6c:	a8 01       	movw	r20, r16
    1e6e:	b5 01       	movw	r22, r10
    1e70:	6e 19       	sub	r22, r14
    1e72:	7f 09       	sbc	r23, r15
    1e74:	ce 01       	movw	r24, r28
    1e76:	8c 0d       	add	r24, r12
    1e78:	9d 1d       	adc	r25, r13
    1e7a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    if (cornername & 0x8) {
    1e7e:	33 20       	and	r3, r3
    1e80:	91 f0       	breq	.+36     	; 0x1ea6 <ili9341_drawCircleHelper+0x120>
      ili9341_drawpixel(x0 - y, y0 + x, color);
    1e82:	a8 01       	movw	r20, r16
    1e84:	b5 01       	movw	r22, r10
    1e86:	6e 0d       	add	r22, r14
    1e88:	7f 1d       	adc	r23, r15
    1e8a:	c6 01       	movw	r24, r12
    1e8c:	8c 1b       	sub	r24, r28
    1e8e:	9d 0b       	sbc	r25, r29
    1e90:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 + y, color);
    1e94:	a8 01       	movw	r20, r16
    1e96:	be 01       	movw	r22, r28
    1e98:	6a 0d       	add	r22, r10
    1e9a:	7b 1d       	adc	r23, r11
    1e9c:	c6 01       	movw	r24, r12
    1e9e:	8e 19       	sub	r24, r14
    1ea0:	9f 09       	sbc	r25, r15
    1ea2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    if (cornername & 0x1) {
    1ea6:	22 20       	and	r2, r2
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <ili9341_drawCircleHelper+0x126>
    1eaa:	9a cf       	rjmp	.-204    	; 0x1de0 <ili9341_drawCircleHelper+0x5a>
      ili9341_drawpixel(x0 - y, y0 - x, color);
    1eac:	a8 01       	movw	r20, r16
    1eae:	b5 01       	movw	r22, r10
    1eb0:	6e 19       	sub	r22, r14
    1eb2:	7f 09       	sbc	r23, r15
    1eb4:	c6 01       	movw	r24, r12
    1eb6:	8c 1b       	sub	r24, r28
    1eb8:	9d 0b       	sbc	r25, r29
    1eba:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
      ili9341_drawpixel(x0 - x, y0 - y, color);
    1ebe:	a8 01       	movw	r20, r16
    1ec0:	b5 01       	movw	r22, r10
    1ec2:	6c 1b       	sub	r22, r28
    1ec4:	7d 0b       	sbc	r23, r29
    1ec6:	c6 01       	movw	r24, r12
    1ec8:	8e 19       	sub	r24, r14
    1eca:	9f 09       	sbc	r25, r15
    1ecc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    1ed0:	87 cf       	rjmp	.-242    	; 0x1de0 <ili9341_drawCircleHelper+0x5a>

00001ed2 <ili9341_drawLine>:
}


// Bresenham's algorithm - thx wikpedia
void ili9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) 
{
    1ed2:	2f 92       	push	r2
    1ed4:	3f 92       	push	r3
    1ed6:	4f 92       	push	r4
    1ed8:	5f 92       	push	r5
    1eda:	6f 92       	push	r6
    1edc:	7f 92       	push	r7
    1ede:	8f 92       	push	r8
    1ee0:	9f 92       	push	r9
    1ee2:	af 92       	push	r10
    1ee4:	bf 92       	push	r11
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <ili9341_drawLine+0x26>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <ili9341_drawLine+0x28>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	7b 01       	movw	r14, r22
    1f04:	6a 01       	movw	r12, r20
    1f06:	c9 01       	movw	r24, r18
    1f08:	09 83       	std	Y+1, r16	; 0x01
    1f0a:	1a 83       	std	Y+2, r17	; 0x02
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    1f0c:	89 01       	movw	r16, r18
    1f0e:	06 1b       	sub	r16, r22
    1f10:	17 0b       	sbc	r17, r23
    1f12:	17 ff       	sbrs	r17, 7
    1f14:	03 c0       	rjmp	.+6      	; 0x1f1c <ili9341_drawLine+0x4a>
    1f16:	11 95       	neg	r17
    1f18:	01 95       	neg	r16
    1f1a:	11 09       	sbc	r17, r1
    1f1c:	46 01       	movw	r8, r12
    1f1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f20:	3c 81       	ldd	r19, Y+4	; 0x04
    1f22:	82 1a       	sub	r8, r18
    1f24:	93 0a       	sbc	r9, r19
    1f26:	97 fe       	sbrs	r9, 7
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <ili9341_drawLine+0x5e>
    1f2a:	91 94       	neg	r9
    1f2c:	81 94       	neg	r8
    1f2e:	91 08       	sbc	r9, r1
  if (steep) {
    1f30:	80 16       	cp	r8, r16
    1f32:	91 06       	cpc	r9, r17
    1f34:	5c f4       	brge	.+22     	; 0x1f4c <ili9341_drawLine+0x7a>
    1f36:	3c 2d       	mov	r19, r12
    1f38:	2d 2d       	mov	r18, r13
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
    1f3a:	6c 01       	movw	r12, r24
    1f3c:	83 2f       	mov	r24, r19
    1f3e:	92 2f       	mov	r25, r18
  if (steep) {
    1f40:	3b 81       	ldd	r19, Y+3	; 0x03
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    _swap_int16_t(x0, y0);
    1f44:	fc 82       	std	Y+4, r15	; 0x04
    1f46:	eb 82       	std	Y+3, r14	; 0x03
    1f48:	e3 2e       	mov	r14, r19
    1f4a:	f2 2e       	mov	r15, r18
  }

  if (x0 > x1) {
    1f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f50:	c2 16       	cp	r12, r18
    1f52:	d3 06       	cpc	r13, r19
    1f54:	5c f4       	brge	.+22     	; 0x1f6c <ili9341_drawLine+0x9a>
    1f56:	3e 2d       	mov	r19, r14
    1f58:	2f 2d       	mov	r18, r15
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
    1f5a:	7c 01       	movw	r14, r24
    1f5c:	83 2f       	mov	r24, r19
    1f5e:	92 2f       	mov	r25, r18
  if (x0 > x1) {
    1f60:	3b 81       	ldd	r19, Y+3	; 0x03
    1f62:	2c 81       	ldd	r18, Y+4	; 0x04
    1f64:	dc 82       	std	Y+4, r13	; 0x04
    1f66:	cb 82       	std	Y+3, r12	; 0x03
    1f68:	c3 2e       	mov	r12, r19
    1f6a:	d2 2e       	mov	r13, r18
  }

  int16_t dx, dy;
  dx = x1 - x0;
    1f6c:	16 01       	movw	r2, r12
    1f6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f70:	3c 81       	ldd	r19, Y+4	; 0x04
    1f72:	22 1a       	sub	r2, r18
    1f74:	33 0a       	sbc	r3, r19
  dy = abs(y1 - y0);
    1f76:	2c 01       	movw	r4, r24
    1f78:	4e 18       	sub	r4, r14
    1f7a:	5f 08       	sbc	r5, r15
    1f7c:	57 fe       	sbrs	r5, 7
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <ili9341_drawLine+0xb4>
    1f80:	51 94       	neg	r5
    1f82:	41 94       	neg	r4
    1f84:	51 08       	sbc	r5, r1

  int16_t err = dx / 2;
    1f86:	31 01       	movw	r6, r2
    1f88:	37 fe       	sbrs	r3, 7
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <ili9341_drawLine+0xc0>
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	63 1a       	sub	r6, r19
    1f90:	73 0a       	sbc	r7, r19
    1f92:	75 94       	asr	r7
    1f94:	67 94       	ror	r6
  int16_t ystep;

  if (y0 < y1) {
    1f96:	e8 16       	cp	r14, r24
    1f98:	f9 06       	cpc	r15, r25
    1f9a:	d4 f1       	brlt	.+116    	; 0x2010 <ili9341_drawLine+0x13e>
    ystep = 1;
  } else {
    ystep = -1;
    1f9c:	aa 24       	eor	r10, r10
    1f9e:	aa 94       	dec	r10
    1fa0:	ba 2c       	mov	r11, r10
  }

  for (; x0<=x1; x0++) {
    1fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1fa6:	c2 16       	cp	r12, r18
    1fa8:	d3 06       	cpc	r13, r19
    1faa:	bc f4       	brge	.+46     	; 0x1fda <ili9341_drawLine+0x108>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	df 90       	pop	r13
    1fc2:	cf 90       	pop	r12
    1fc4:	bf 90       	pop	r11
    1fc6:	af 90       	pop	r10
    1fc8:	9f 90       	pop	r9
    1fca:	8f 90       	pop	r8
    1fcc:	7f 90       	pop	r7
    1fce:	6f 90       	pop	r6
    1fd0:	5f 90       	pop	r5
    1fd2:	4f 90       	pop	r4
    1fd4:	3f 90       	pop	r3
    1fd6:	2f 90       	pop	r2
    1fd8:	08 95       	ret
      ili9341_drawpixel(y0, x0, color);
    1fda:	49 81       	ldd	r20, Y+1	; 0x01
    1fdc:	5a 81       	ldd	r21, Y+2	; 0x02
    1fde:	6b 81       	ldd	r22, Y+3	; 0x03
    1fe0:	7c 81       	ldd	r23, Y+4	; 0x04
    1fe2:	c7 01       	movw	r24, r14
    if (steep) {
    1fe4:	80 16       	cp	r8, r16
    1fe6:	91 06       	cpc	r9, r17
    1fe8:	1c f0       	brlt	.+6      	; 0x1ff0 <ili9341_drawLine+0x11e>
      ili9341_drawpixel(x0, y0, color);
    1fea:	b7 01       	movw	r22, r14
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    err -= dy;
    1ff4:	64 18       	sub	r6, r4
    1ff6:	75 08       	sbc	r7, r5
    if (err < 0) {
    1ff8:	77 fe       	sbrs	r7, 7
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <ili9341_drawLine+0x132>
      y0 += ystep;
    1ffc:	ea 0c       	add	r14, r10
    1ffe:	fb 1c       	adc	r15, r11
      err += dx;
    2000:	62 0c       	add	r6, r2
    2002:	73 1c       	adc	r7, r3
  for (; x0<=x1; x0++) {
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	8b 83       	std	Y+3, r24	; 0x03
    200e:	c9 cf       	rjmp	.-110    	; 0x1fa2 <ili9341_drawLine+0xd0>
    ystep = 1;
    2010:	aa 24       	eor	r10, r10
    2012:	a3 94       	inc	r10
    2014:	b1 2c       	mov	r11, r1
    2016:	c5 cf       	rjmp	.-118    	; 0x1fa2 <ili9341_drawLine+0xd0>

00002018 <ili9341_drawFastVLine>:
{
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	89 01       	movw	r16, r18
  ili9341_drawLine(x, y, x, y+h-1, color);
    201e:	46 0f       	add	r20, r22
    2020:	57 1f       	adc	r21, r23
    2022:	9a 01       	movw	r18, r20
    2024:	21 50       	subi	r18, 0x01	; 1
    2026:	31 09       	sbc	r19, r1
    2028:	ac 01       	movw	r20, r24
    202a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ili9341_drawLine>
}
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <ili9341_fillCircleHelper>:
{
    2034:	2f 92       	push	r2
    2036:	3f 92       	push	r3
    2038:	4f 92       	push	r4
    203a:	5f 92       	push	r5
    203c:	6f 92       	push	r6
    203e:	7f 92       	push	r7
    2040:	8f 92       	push	r8
    2042:	9f 92       	push	r9
    2044:	af 92       	push	r10
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	00 d0       	rcall	.+0      	; 0x205a <ili9341_fillCircleHelper+0x26>
    205a:	00 d0       	rcall	.+0      	; 0x205c <ili9341_fillCircleHelper+0x28>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	2c 01       	movw	r4, r24
    2062:	5b 01       	movw	r10, r22
    2064:	4b 83       	std	Y+3, r20	; 0x03
    2066:	5c 83       	std	Y+4, r21	; 0x04
    2068:	48 01       	movw	r8, r16
  int16_t f     = 1 - r;
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	6c 01       	movw	r12, r24
    2070:	4b 81       	ldd	r20, Y+3	; 0x03
    2072:	5c 81       	ldd	r21, Y+4	; 0x04
    2074:	c4 1a       	sub	r12, r20
    2076:	d5 0a       	sbc	r13, r21
  int16_t ddF_y = -2 * r;
    2078:	1a 01       	movw	r2, r20
    207a:	31 94       	neg	r3
    207c:	21 94       	neg	r2
    207e:	31 08       	sbc	r3, r1
    2080:	22 0c       	add	r2, r2
    2082:	33 1c       	adc	r3, r3
  int16_t x     = 0;
    2084:	10 e0       	ldi	r17, 0x00	; 0
    2086:	00 e0       	ldi	r16, 0x00	; 0
  int16_t ddF_x = 1;
    2088:	66 24       	eor	r6, r6
    208a:	63 94       	inc	r6
    208c:	71 2c       	mov	r7, r1
    if (cornername & 0x1) {
    208e:	52 2f       	mov	r21, r18
    2090:	51 70       	andi	r21, 0x01	; 1
    2092:	59 83       	std	Y+1, r21	; 0x01
    if (cornername & 0x2) {
    2094:	22 70       	andi	r18, 0x02	; 2
    2096:	2a 83       	std	Y+2, r18	; 0x02
  while (x<y) {
    2098:	4b 81       	ldd	r20, Y+3	; 0x03
    209a:	5c 81       	ldd	r21, Y+4	; 0x04
    209c:	04 17       	cp	r16, r20
    209e:	15 07       	cpc	r17, r21
    20a0:	bc f0       	brlt	.+46     	; 0x20d0 <ili9341_fillCircleHelper+0x9c>
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	9f 90       	pop	r9
    20c0:	8f 90       	pop	r8
    20c2:	7f 90       	pop	r7
    20c4:	6f 90       	pop	r6
    20c6:	5f 90       	pop	r5
    20c8:	4f 90       	pop	r4
    20ca:	3f 90       	pop	r3
    20cc:	2f 90       	pop	r2
    20ce:	08 95       	ret
    if (f >= 0) {
    20d0:	d7 fc       	sbrc	r13, 7
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <ili9341_fillCircleHelper+0xb4>
      y--;
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
      ddF_y += 2;
    20de:	92 e0       	ldi	r25, 0x02	; 2
    20e0:	29 0e       	add	r2, r25
    20e2:	31 1c       	adc	r3, r1
      f     += ddF_y;
    20e4:	c2 0c       	add	r12, r2
    20e6:	d3 1c       	adc	r13, r3
    x++;
    20e8:	0f 5f       	subi	r16, 0xFF	; 255
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    ddF_x += 2;
    20ec:	e2 e0       	ldi	r30, 0x02	; 2
    20ee:	6e 0e       	add	r6, r30
    20f0:	71 1c       	adc	r7, r1
    f     += ddF_x;
    20f2:	c6 0c       	add	r12, r6
    20f4:	d7 1c       	adc	r13, r7
    if (cornername & 0x1) {
    20f6:	f9 81       	ldd	r31, Y+1	; 0x01
    20f8:	ff 23       	and	r31, r31
    20fa:	01 f1       	breq	.+64     	; 0x213c <ili9341_fillCircleHelper+0x108>
      ili9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
    20fc:	4b 81       	ldd	r20, Y+3	; 0x03
    20fe:	5c 81       	ldd	r21, Y+4	; 0x04
    2100:	44 0f       	add	r20, r20
    2102:	55 1f       	adc	r21, r21
    2104:	4f 5f       	subi	r20, 0xFF	; 255
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	48 0d       	add	r20, r8
    210a:	59 1d       	adc	r21, r9
    210c:	97 01       	movw	r18, r14
    210e:	b5 01       	movw	r22, r10
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	68 1b       	sub	r22, r24
    2116:	79 0b       	sbc	r23, r25
    2118:	c2 01       	movw	r24, r4
    211a:	80 0f       	add	r24, r16
    211c:	91 1f       	adc	r25, r17
    211e:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
    2122:	97 01       	movw	r18, r14
    2124:	a4 01       	movw	r20, r8
    2126:	46 0d       	add	r20, r6
    2128:	57 1d       	adc	r21, r7
    212a:	b5 01       	movw	r22, r10
    212c:	60 1b       	sub	r22, r16
    212e:	71 0b       	sbc	r23, r17
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	84 0d       	add	r24, r4
    2136:	95 1d       	adc	r25, r5
    2138:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
    if (cornername & 0x2) {
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	99 23       	and	r25, r25
    2140:	09 f4       	brne	.+2      	; 0x2144 <ili9341_fillCircleHelper+0x110>
    2142:	aa cf       	rjmp	.-172    	; 0x2098 <ili9341_fillCircleHelper+0x64>
      ili9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
    2144:	4b 81       	ldd	r20, Y+3	; 0x03
    2146:	5c 81       	ldd	r21, Y+4	; 0x04
    2148:	44 0f       	add	r20, r20
    214a:	55 1f       	adc	r21, r21
    214c:	4f 5f       	subi	r20, 0xFF	; 255
    214e:	5f 4f       	sbci	r21, 0xFF	; 255
    2150:	48 0d       	add	r20, r8
    2152:	59 1d       	adc	r21, r9
    2154:	97 01       	movw	r18, r14
    2156:	b5 01       	movw	r22, r10
    2158:	eb 81       	ldd	r30, Y+3	; 0x03
    215a:	fc 81       	ldd	r31, Y+4	; 0x04
    215c:	6e 1b       	sub	r22, r30
    215e:	7f 0b       	sbc	r23, r31
    2160:	c2 01       	movw	r24, r4
    2162:	80 1b       	sub	r24, r16
    2164:	91 0b       	sbc	r25, r17
    2166:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
      ili9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
    216a:	97 01       	movw	r18, r14
    216c:	a3 01       	movw	r20, r6
    216e:	48 0d       	add	r20, r8
    2170:	59 1d       	adc	r21, r9
    2172:	b5 01       	movw	r22, r10
    2174:	60 1b       	sub	r22, r16
    2176:	71 0b       	sbc	r23, r17
    2178:	c2 01       	movw	r24, r4
    217a:	eb 81       	ldd	r30, Y+3	; 0x03
    217c:	fc 81       	ldd	r31, Y+4	; 0x04
    217e:	8e 1b       	sub	r24, r30
    2180:	9f 0b       	sbc	r25, r31
    2182:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
    2186:	88 cf       	rjmp	.-240    	; 0x2098 <ili9341_fillCircleHelper+0x64>

00002188 <ili9341_fillCircle>:
{
    2188:	af 92       	push	r10
    218a:	bf 92       	push	r11
    218c:	cf 92       	push	r12
    218e:	df 92       	push	r13
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	6c 01       	movw	r12, r24
    219e:	5b 01       	movw	r10, r22
    21a0:	ea 01       	movw	r28, r20
    21a2:	79 01       	movw	r14, r18
  ili9341_drawvline(x0, y0-r, 2*r+1, color);
    21a4:	44 0f       	add	r20, r20
    21a6:	55 1f       	adc	r21, r21
    21a8:	4f 5f       	subi	r20, 0xFF	; 255
    21aa:	5f 4f       	sbci	r21, 0xFF	; 255
    21ac:	6c 1b       	sub	r22, r28
    21ae:	7d 0b       	sbc	r23, r29
    21b0:	c6 01       	movw	r24, r12
    21b2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <ili9341_drawvline>
  ili9341_fillCircleHelper(x0, y0, r, 3, 0, color);
    21b6:	10 e0       	ldi	r17, 0x00	; 0
    21b8:	00 e0       	ldi	r16, 0x00	; 0
    21ba:	23 e0       	ldi	r18, 0x03	; 3
    21bc:	ae 01       	movw	r20, r28
    21be:	b5 01       	movw	r22, r10
    21c0:	c6 01       	movw	r24, r12
    21c2:	0e 94 1a 10 	call	0x2034	; 0x2034 <ili9341_fillCircleHelper>
}
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	ef 90       	pop	r14
    21d2:	df 90       	pop	r13
    21d4:	cf 90       	pop	r12
    21d6:	bf 90       	pop	r11
    21d8:	af 90       	pop	r10
    21da:	08 95       	ret

000021dc <ili9341_drawFastHLine>:
{
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	89 01       	movw	r16, r18
  ili9341_drawLine(x, y, x+w-1, y, color);
    21e2:	48 0f       	add	r20, r24
    21e4:	59 1f       	adc	r21, r25
    21e6:	41 50       	subi	r20, 0x01	; 1
    21e8:	51 09       	sbc	r21, r1
    21ea:	9b 01       	movw	r18, r22
    21ec:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ili9341_drawLine>
}
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <ili9341_drawRect>:

// Draw a rectangle
void ili9341_drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    21f6:	af 92       	push	r10
    21f8:	bf 92       	push	r11
    21fa:	cf 92       	push	r12
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	ec 01       	movw	r28, r24
    220c:	7b 01       	movw	r14, r22
    220e:	5a 01       	movw	r10, r20
    2210:	69 01       	movw	r12, r18
  ili9341_drawFastHLine(x, y, w, color);
    2212:	98 01       	movw	r18, r16
    2214:	0e 94 ee 10 	call	0x21dc	; 0x21dc <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x, y+h-1, w, color);
    2218:	b7 01       	movw	r22, r14
    221a:	6c 0d       	add	r22, r12
    221c:	7d 1d       	adc	r23, r13
    221e:	61 50       	subi	r22, 0x01	; 1
    2220:	71 09       	sbc	r23, r1
    2222:	98 01       	movw	r18, r16
    2224:	a5 01       	movw	r20, r10
    2226:	ce 01       	movw	r24, r28
    2228:	0e 94 ee 10 	call	0x21dc	; 0x21dc <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x, y, h, color);
    222c:	98 01       	movw	r18, r16
    222e:	a6 01       	movw	r20, r12
    2230:	b7 01       	movw	r22, r14
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y, h, color);
    2238:	ce 01       	movw	r24, r28
    223a:	8a 0d       	add	r24, r10
    223c:	9b 1d       	adc	r25, r11
    223e:	98 01       	movw	r18, r16
    2240:	a6 01       	movw	r20, r12
    2242:	b7 01       	movw	r22, r14
    2244:	01 97       	sbiw	r24, 0x01	; 1
}
    2246:	df 91       	pop	r29
    2248:	cf 91       	pop	r28
    224a:	1f 91       	pop	r17
    224c:	0f 91       	pop	r16
    224e:	ff 90       	pop	r15
    2250:	ef 90       	pop	r14
    2252:	df 90       	pop	r13
    2254:	cf 90       	pop	r12
    2256:	bf 90       	pop	r11
    2258:	af 90       	pop	r10
  ili9341_drawFastVLine(x+w-1, y, h, color);
    225a:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <ili9341_drawFastVLine>

0000225e <ili9341_fillRect>:


void ili9341_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) 
{
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	d6 2e       	mov	r13, r22
    2274:	c7 2e       	mov	r12, r23
    2276:	b2 2e       	mov	r11, r18
    2278:	a3 2e       	mov	r10, r19
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
    227a:	ec 01       	movw	r28, r24
    227c:	7c 01       	movw	r14, r24
    227e:	e4 0e       	add	r14, r20
    2280:	f5 1e       	adc	r15, r21
    2282:	ce 15       	cp	r28, r14
    2284:	df 05       	cpc	r29, r15
    2286:	5c f0       	brlt	.+22     	; 0x229e <ili9341_fillRect+0x40>
    ili9341_drawFastVLine(i, y, h, color);
  }
}
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ff 90       	pop	r15
    2292:	ef 90       	pop	r14
    2294:	df 90       	pop	r13
    2296:	cf 90       	pop	r12
    2298:	bf 90       	pop	r11
    229a:	af 90       	pop	r10
    229c:	08 95       	ret
    ili9341_drawFastVLine(i, y, h, color);
    229e:	98 01       	movw	r18, r16
    22a0:	4b 2d       	mov	r20, r11
    22a2:	5a 2d       	mov	r21, r10
    22a4:	6d 2d       	mov	r22, r13
    22a6:	7c 2d       	mov	r23, r12
    22a8:	ce 01       	movw	r24, r28
    22aa:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
  for (int16_t i=x; i<x+w; i++) {
    22ae:	21 96       	adiw	r28, 0x01	; 1
    22b0:	e8 cf       	rjmp	.-48     	; 0x2282 <ili9341_fillRect+0x24>

000022b2 <ili9341_drawRoundRect>:
// Draw a rounded rectangle
void ili9341_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    22b2:	2f 92       	push	r2
    22b4:	3f 92       	push	r3
    22b6:	4f 92       	push	r4
    22b8:	5f 92       	push	r5
    22ba:	6f 92       	push	r6
    22bc:	7f 92       	push	r7
    22be:	8f 92       	push	r8
    22c0:	9f 92       	push	r9
    22c2:	af 92       	push	r10
    22c4:	bf 92       	push	r11
    22c6:	cf 92       	push	r12
    22c8:	df 92       	push	r13
    22ca:	ef 92       	push	r14
    22cc:	ff 92       	push	r15
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
    22d4:	df 93       	push	r29
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <ili9341_drawRoundRect+0x26>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <ili9341_drawRoundRect+0x28>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	5c 01       	movw	r10, r24
    22e0:	6b 01       	movw	r12, r22
    22e2:	1a 01       	movw	r2, r20
    22e4:	29 01       	movw	r4, r18
    22e6:	0b 83       	std	Y+3, r16	; 0x03
    22e8:	1c 83       	std	Y+4, r17	; 0x04
  // smarter version
  ili9341_drawFastHLine(x+r  , y    , w-2*r, color); // Top
    22ea:	0b 81       	ldd	r16, Y+3	; 0x03
    22ec:	1c 81       	ldd	r17, Y+4	; 0x04
    22ee:	00 0f       	add	r16, r16
    22f0:	11 1f       	adc	r17, r17
    22f2:	3a 01       	movw	r6, r20
    22f4:	60 1a       	sub	r6, r16
    22f6:	71 0a       	sbc	r7, r17
    22f8:	8b 80       	ldd	r8, Y+3	; 0x03
    22fa:	9c 80       	ldd	r9, Y+4	; 0x04
    22fc:	8a 0c       	add	r8, r10
    22fe:	9b 1c       	adc	r9, r11
    2300:	97 01       	movw	r18, r14
    2302:	a3 01       	movw	r20, r6
    2304:	c4 01       	movw	r24, r8
    2306:	0e 94 ee 10 	call	0x21dc	; 0x21dc <ili9341_drawFastHLine>
  ili9341_drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
    230a:	c6 01       	movw	r24, r12
    230c:	84 0d       	add	r24, r4
    230e:	95 1d       	adc	r25, r5
    2310:	9a 83       	std	Y+2, r25	; 0x02
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	bc 01       	movw	r22, r24
    2316:	61 50       	subi	r22, 0x01	; 1
    2318:	71 09       	sbc	r23, r1
    231a:	97 01       	movw	r18, r14
    231c:	a3 01       	movw	r20, r6
    231e:	c4 01       	movw	r24, r8
    2320:	0e 94 ee 10 	call	0x21dc	; 0x21dc <ili9341_drawFastHLine>
  ili9341_drawFastVLine(x    , y+r  , h-2*r, color); // Left
    2324:	40 1a       	sub	r4, r16
    2326:	51 0a       	sbc	r5, r17
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	c8 0e       	add	r12, r24
    232e:	d9 1e       	adc	r13, r25
    2330:	97 01       	movw	r18, r14
    2332:	a2 01       	movw	r20, r4
    2334:	b6 01       	movw	r22, r12
    2336:	c5 01       	movw	r24, r10
    2338:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
  ili9341_drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
    233c:	a2 0c       	add	r10, r2
    233e:	b3 1c       	adc	r11, r3
    2340:	97 01       	movw	r18, r14
    2342:	a2 01       	movw	r20, r4
    2344:	b6 01       	movw	r22, r12
    2346:	c5 01       	movw	r24, r10
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	0e 94 0c 10 	call	0x2018	; 0x2018 <ili9341_drawFastVLine>
  // draw four corners
  ili9341_drawCircleHelper(x+r    , y+r    , r, 1, color);
    234e:	87 01       	movw	r16, r14
    2350:	21 e0       	ldi	r18, 0x01	; 1
    2352:	4b 81       	ldd	r20, Y+3	; 0x03
    2354:	5c 81       	ldd	r21, Y+4	; 0x04
    2356:	b6 01       	movw	r22, r12
    2358:	c4 01       	movw	r24, r8
    235a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	a8 1a       	sub	r10, r24
    2364:	b9 0a       	sbc	r11, r25
    2366:	91 e0       	ldi	r25, 0x01	; 1
    2368:	a9 1a       	sub	r10, r25
    236a:	b1 08       	sbc	r11, r1
    236c:	22 e0       	ldi	r18, 0x02	; 2
    236e:	4b 81       	ldd	r20, Y+3	; 0x03
    2370:	5c 81       	ldd	r21, Y+4	; 0x04
    2372:	b6 01       	movw	r22, r12
    2374:	c5 01       	movw	r24, r10
    2376:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
    237a:	c9 80       	ldd	r12, Y+1	; 0x01
    237c:	da 80       	ldd	r13, Y+2	; 0x02
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	c8 1a       	sub	r12, r24
    2384:	d9 0a       	sbc	r13, r25
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	c9 1a       	sub	r12, r25
    238a:	d1 08       	sbc	r13, r1
    238c:	24 e0       	ldi	r18, 0x04	; 4
    238e:	4b 81       	ldd	r20, Y+3	; 0x03
    2390:	5c 81       	ldd	r21, Y+4	; 0x04
    2392:	b6 01       	movw	r22, r12
    2394:	c5 01       	movw	r24, r10
    2396:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <ili9341_drawCircleHelper>
  ili9341_drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
    239a:	28 e0       	ldi	r18, 0x08	; 8
    239c:	4b 81       	ldd	r20, Y+3	; 0x03
    239e:	5c 81       	ldd	r21, Y+4	; 0x04
    23a0:	b6 01       	movw	r22, r12
    23a2:	c4 01       	movw	r24, r8
    23a4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <ili9341_drawCircleHelper>
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	af 90       	pop	r10
    23c4:	9f 90       	pop	r9
    23c6:	8f 90       	pop	r8
    23c8:	7f 90       	pop	r7
    23ca:	6f 90       	pop	r6
    23cc:	5f 90       	pop	r5
    23ce:	4f 90       	pop	r4
    23d0:	3f 90       	pop	r3
    23d2:	2f 90       	pop	r2
    23d4:	08 95       	ret

000023d6 <ili9341_fillRoundRect>:

// Fill a rounded rectangle
void ili9341_fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color) 
{
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	1c 01       	movw	r2, r24
    23fc:	5b 01       	movw	r10, r22
    23fe:	2a 01       	movw	r4, r20
    2400:	e9 01       	movw	r28, r18
    2402:	68 01       	movw	r12, r16
    2404:	37 01       	movw	r6, r14
  // smarter version
  ili9341_fillRect(x+r, y, w-2*r, h, color);
    2406:	78 01       	movw	r14, r16
    2408:	ee 0c       	add	r14, r14
    240a:	ff 1c       	adc	r15, r15
    240c:	48 01       	movw	r8, r16
    240e:	82 0c       	add	r8, r2
    2410:	93 1c       	adc	r9, r3
    2412:	4e 19       	sub	r20, r14
    2414:	5f 09       	sbc	r21, r15
    2416:	83 01       	movw	r16, r6
    2418:	c4 01       	movw	r24, r8
    241a:	0e 94 2f 11 	call	0x225e	; 0x225e <ili9341_fillRect>

  // draw four corners
  ili9341_fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    241e:	ce 19       	sub	r28, r14
    2420:	df 09       	sbc	r29, r15
    2422:	21 97       	sbiw	r28, 0x01	; 1
    2424:	ac 0c       	add	r10, r12
    2426:	bd 1c       	adc	r11, r13
    2428:	42 0c       	add	r4, r2
    242a:	53 1c       	adc	r5, r3
    242c:	c2 01       	movw	r24, r4
    242e:	8c 19       	sub	r24, r12
    2430:	9d 09       	sbc	r25, r13
    2432:	73 01       	movw	r14, r6
    2434:	8e 01       	movw	r16, r28
    2436:	21 e0       	ldi	r18, 0x01	; 1
    2438:	a6 01       	movw	r20, r12
    243a:	b5 01       	movw	r22, r10
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	0e 94 1a 10 	call	0x2034	; 0x2034 <ili9341_fillCircleHelper>
  ili9341_fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
    2442:	22 e0       	ldi	r18, 0x02	; 2
    2444:	a6 01       	movw	r20, r12
    2446:	b5 01       	movw	r22, r10
    2448:	c4 01       	movw	r24, r8
    244a:	0e 94 1a 10 	call	0x2034	; 0x2034 <ili9341_fillCircleHelper>
}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	7f 90       	pop	r7
    2468:	6f 90       	pop	r6
    246a:	5f 90       	pop	r5
    246c:	4f 90       	pop	r4
    246e:	3f 90       	pop	r3
    2470:	2f 90       	pop	r2
    2472:	08 95       	ret

00002474 <ili9341_drawBitmap>:

// Draw a 1-bit image (bitmap) at the specified (x,y) position from the
// provided bitmap buffer (must be PROGMEM memory) using the specified
// foreground color (unset bits are transparent).
void ili9341_drawBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    2474:	2f 92       	push	r2
    2476:	3f 92       	push	r3
    2478:	4f 92       	push	r4
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	00 d0       	rcall	.+0      	; 0x249a <ili9341_drawBitmap+0x26>
    249a:	00 d0       	rcall	.+0      	; 0x249c <ili9341_drawBitmap+0x28>
    249c:	00 d0       	rcall	.+0      	; 0x249e <ili9341_drawBitmap+0x2a>
    249e:	0f 92       	push	r0
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	2c 01       	movw	r4, r24
    24a6:	3b 01       	movw	r6, r22
    24a8:	5a 01       	movw	r10, r20
    24aa:	69 01       	movw	r12, r18
    24ac:	09 83       	std	Y+1, r16	; 0x01
    24ae:	1a 83       	std	Y+2, r17	; 0x02
    24b0:	ed 82       	std	Y+5, r14	; 0x05
    24b2:	2f 2c       	mov	r2, r15

  int16_t i, j, byteWidth = (w + 7) / 8;
    24b4:	c9 01       	movw	r24, r18
    24b6:	07 96       	adiw	r24, 0x07	; 7
    24b8:	97 fd       	sbrc	r25, 7
    24ba:	07 96       	adiw	r24, 0x07	; 7
    24bc:	9c 01       	movw	r18, r24
    24be:	93 e0       	ldi	r25, 0x03	; 3
    24c0:	35 95       	asr	r19
    24c2:	27 95       	ror	r18
    24c4:	9a 95       	dec	r25
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <ili9341_drawBitmap+0x4c>
    24c8:	3c 83       	std	Y+4, r19	; 0x04
    24ca:	2b 83       	std	Y+3, r18	; 0x03
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    24cc:	f1 2c       	mov	r15, r1
    24ce:	e1 2c       	mov	r14, r1
  uint8_t byte=0;
    24d0:	31 2c       	mov	r3, r1
  for(j=0; j<h; j++) {
    24d2:	10 e0       	ldi	r17, 0x00	; 0
    24d4:	00 e0       	ldi	r16, 0x00	; 0
    24d6:	29 81       	ldd	r18, Y+1	; 0x01
    24d8:	3a 81       	ldd	r19, Y+2	; 0x02
    24da:	02 17       	cp	r16, r18
    24dc:	13 07       	cpc	r17, r19
    24de:	0c f4       	brge	.+2      	; 0x24e2 <ili9341_drawBitmap+0x6e>
    24e0:	48 c0       	rjmp	.+144    	; 0x2572 <ili9341_drawBitmap+0xfe>
      if(i & 7) byte <<= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    24e2:	27 96       	adiw	r28, 0x07	; 7
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	bf 90       	pop	r11
    2500:	af 90       	pop	r10
    2502:	9f 90       	pop	r9
    2504:	8f 90       	pop	r8
    2506:	7f 90       	pop	r7
    2508:	6f 90       	pop	r6
    250a:	5f 90       	pop	r5
    250c:	4f 90       	pop	r4
    250e:	3f 90       	pop	r3
    2510:	2f 90       	pop	r2
    2512:	08 95       	ret
      if(i & 7) byte <<= 1;
    2514:	8e 81       	ldd	r24, Y+6	; 0x06
    2516:	9f 81       	ldd	r25, Y+7	; 0x07
    2518:	87 70       	andi	r24, 0x07	; 7
    251a:	99 27       	eor	r25, r25
    251c:	33 0c       	add	r3, r3
    251e:	89 2b       	or	r24, r25
    2520:	61 f4       	brne	.+24     	; 0x253a <ili9341_drawBitmap+0xc6>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    2522:	ee 81       	ldd	r30, Y+6	; 0x06
    2524:	ff 81       	ldd	r31, Y+7	; 0x07
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	f5 95       	asr	r31
    252a:	e7 95       	ror	r30
    252c:	8a 95       	dec	r24
    252e:	e1 f7       	brne	.-8      	; 0x2528 <ili9341_drawBitmap+0xb4>
    2530:	ee 0d       	add	r30, r14
    2532:	ff 1d       	adc	r31, r15
    2534:	ea 0d       	add	r30, r10
    2536:	fb 1d       	adc	r31, r11
    2538:	34 90       	lpm	r3, Z
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    253a:	37 fe       	sbrs	r3, 7
    253c:	09 c0       	rjmp	.+18     	; 0x2550 <ili9341_drawBitmap+0xdc>
    253e:	4d 81       	ldd	r20, Y+5	; 0x05
    2540:	52 2d       	mov	r21, r2
    2542:	b4 01       	movw	r22, r8
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	84 0d       	add	r24, r4
    254a:	95 1d       	adc	r25, r5
    254c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    for(i=0; i<w; i++) {
    2550:	8e 81       	ldd	r24, Y+6	; 0x06
    2552:	9f 81       	ldd	r25, Y+7	; 0x07
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	9f 83       	std	Y+7, r25	; 0x07
    2558:	8e 83       	std	Y+6, r24	; 0x06
    255a:	2e 81       	ldd	r18, Y+6	; 0x06
    255c:	3f 81       	ldd	r19, Y+7	; 0x07
    255e:	2c 15       	cp	r18, r12
    2560:	3d 05       	cpc	r19, r13
    2562:	c4 f2       	brlt	.-80     	; 0x2514 <ili9341_drawBitmap+0xa0>
  for(j=0; j<h; j++) {
    2564:	0f 5f       	subi	r16, 0xFF	; 255
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	e8 0e       	add	r14, r24
    256e:	f9 1e       	adc	r15, r25
    2570:	b2 cf       	rjmp	.-156    	; 0x24d6 <ili9341_drawBitmap+0x62>
    for(i=0; i<w; i++) {
    2572:	1f 82       	std	Y+7, r1	; 0x07
    2574:	1e 82       	std	Y+6, r1	; 0x06
      if(byte & 0x80) ili9341_drawpixel(x+i, y+j, color);
    2576:	43 01       	movw	r8, r6
    2578:	80 0e       	add	r8, r16
    257a:	91 1e       	adc	r9, r17
    257c:	ee cf       	rjmp	.-36     	; 0x255a <ili9341_drawBitmap+0xe6>

0000257e <ili9341_drawXBitmap>:

//Draw XBitMap Files (*.xbm), exported from GIMP,
//Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
//C Array can be directly used with this function
void ili9341_drawXBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h, uint16_t color) 
{
    257e:	2f 92       	push	r2
    2580:	3f 92       	push	r3
    2582:	4f 92       	push	r4
    2584:	5f 92       	push	r5
    2586:	6f 92       	push	r6
    2588:	7f 92       	push	r7
    258a:	8f 92       	push	r8
    258c:	9f 92       	push	r9
    258e:	af 92       	push	r10
    2590:	bf 92       	push	r11
    2592:	cf 92       	push	r12
    2594:	df 92       	push	r13
    2596:	ef 92       	push	r14
    2598:	ff 92       	push	r15
    259a:	0f 93       	push	r16
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <ili9341_drawXBitmap+0x26>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <ili9341_drawXBitmap+0x28>
    25a6:	0f 92       	push	r0
    25a8:	cd b7       	in	r28, 0x3d	; 61
    25aa:	de b7       	in	r29, 0x3e	; 62
    25ac:	3c 01       	movw	r6, r24
    25ae:	5a 01       	movw	r10, r20
    25b0:	69 01       	movw	r12, r18
    25b2:	09 83       	std	Y+1, r16	; 0x01
    25b4:	1a 83       	std	Y+2, r17	; 0x02
    25b6:	eb 82       	std	Y+3, r14	; 0x03
    25b8:	2f 2c       	mov	r2, r15

  int16_t i, j, byteWidth = (w + 7) / 8;
  uint8_t byte=0;

  for(j=0; j<h; j++) {
    25ba:	8b 01       	movw	r16, r22
  int16_t i, j, byteWidth = (w + 7) / 8;
    25bc:	29 01       	movw	r4, r18
    25be:	87 e0       	ldi	r24, 0x07	; 7
    25c0:	48 0e       	add	r4, r24
    25c2:	51 1c       	adc	r5, r1
    25c4:	57 fe       	sbrs	r5, 7
    25c6:	04 c0       	rjmp	.+8      	; 0x25d0 <ili9341_drawXBitmap+0x52>
    25c8:	29 01       	movw	r4, r18
    25ca:	9e e0       	ldi	r25, 0x0E	; 14
    25cc:	49 0e       	add	r4, r25
    25ce:	51 1c       	adc	r5, r1
    25d0:	93 e0       	ldi	r25, 0x03	; 3
    25d2:	55 94       	asr	r5
    25d4:	47 94       	ror	r4
    25d6:	9a 95       	dec	r25
    25d8:	e1 f7       	brne	.-8      	; 0x25d2 <ili9341_drawXBitmap+0x54>
  for(j=0; j<h; j++) {
    25da:	91 2c       	mov	r9, r1
    25dc:	81 2c       	mov	r8, r1
  uint8_t byte=0;
    25de:	31 2c       	mov	r3, r1
  for(j=0; j<h; j++) {
    25e0:	f1 2c       	mov	r15, r1
    25e2:	e1 2c       	mov	r14, r1
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	e8 16       	cp	r14, r24
    25ea:	f9 06       	cpc	r15, r25
    25ec:	0c f4       	brge	.+2      	; 0x25f0 <ili9341_drawXBitmap+0x72>
    25ee:	48 c0       	rjmp	.+144    	; 0x2680 <ili9341_drawXBitmap+0x102>
      if(i & 7) byte >>= 1;
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    }
  }
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	7f 90       	pop	r7
    2614:	6f 90       	pop	r6
    2616:	5f 90       	pop	r5
    2618:	4f 90       	pop	r4
    261a:	3f 90       	pop	r3
    261c:	2f 90       	pop	r2
    261e:	08 95       	ret
      if(i & 7) byte >>= 1;
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	87 70       	andi	r24, 0x07	; 7
    2626:	99 27       	eor	r25, r25
    2628:	36 94       	lsr	r3
    262a:	89 2b       	or	r24, r25
    262c:	61 f4       	brne	.+24     	; 0x2646 <ili9341_drawXBitmap+0xc8>
      else      byte   = pgm_read_byte(bitmap + j * byteWidth + i / 8);
    262e:	ec 81       	ldd	r30, Y+4	; 0x04
    2630:	fd 81       	ldd	r31, Y+5	; 0x05
    2632:	83 e0       	ldi	r24, 0x03	; 3
    2634:	f5 95       	asr	r31
    2636:	e7 95       	ror	r30
    2638:	8a 95       	dec	r24
    263a:	e1 f7       	brne	.-8      	; 0x2634 <ili9341_drawXBitmap+0xb6>
    263c:	e8 0d       	add	r30, r8
    263e:	f9 1d       	adc	r31, r9
    2640:	ea 0d       	add	r30, r10
    2642:	fb 1d       	adc	r31, r11
    2644:	34 90       	lpm	r3, Z
      if(byte & 0x01) ili9341_drawpixel(x+i, y+j, color);
    2646:	30 fe       	sbrs	r3, 0
    2648:	09 c0       	rjmp	.+18     	; 0x265c <ili9341_drawXBitmap+0xde>
    264a:	4b 81       	ldd	r20, Y+3	; 0x03
    264c:	52 2d       	mov	r21, r2
    264e:	b8 01       	movw	r22, r16
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	86 0d       	add	r24, r6
    2656:	97 1d       	adc	r25, r7
    2658:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
    for(i=0; i<w; i++ ) {
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	9d 83       	std	Y+5, r25	; 0x05
    2664:	8c 83       	std	Y+4, r24	; 0x04
    2666:	8c 81       	ldd	r24, Y+4	; 0x04
    2668:	9d 81       	ldd	r25, Y+5	; 0x05
    266a:	8c 15       	cp	r24, r12
    266c:	9d 05       	cpc	r25, r13
    266e:	c4 f2       	brlt	.-80     	; 0x2620 <ili9341_drawXBitmap+0xa2>
  for(j=0; j<h; j++) {
    2670:	9f ef       	ldi	r25, 0xFF	; 255
    2672:	e9 1a       	sub	r14, r25
    2674:	f9 0a       	sbc	r15, r25
    2676:	0f 5f       	subi	r16, 0xFF	; 255
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	84 0c       	add	r8, r4
    267c:	95 1c       	adc	r9, r5
    267e:	b2 cf       	rjmp	.-156    	; 0x25e4 <ili9341_drawXBitmap+0x66>
    for(i=0; i<w; i++ ) {
    2680:	1d 82       	std	Y+5, r1	; 0x05
    2682:	1c 82       	std	Y+4, r1	; 0x04
    2684:	f0 cf       	rjmp	.-32     	; 0x2666 <ili9341_drawXBitmap+0xe8>

00002686 <backuplocationvset>:



void backuplocationvset(void)//backing up vset data start location to print next vset data in exact location
{
vsetx=cursor_x;
    2686:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    268a:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    268e:	90 93 ec 05 	sts	0x05EC, r25	; 0x8005ec <vsetx+0x1>
    2692:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <vsetx>
vsety=cursor_y;
    2696:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    269a:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    269e:	90 93 ea 05 	sts	0x05EA, r25	; 0x8005ea <vsety+0x1>
    26a2:	80 93 e9 05 	sts	0x05E9, r24	; 0x8005e9 <vsety>
}
    26a6:	08 95       	ret

000026a8 <backuplocationvactual>:


void backuplocationvactual(void)//backing up vactual data start location to print next vactual data in exact location
{
vactualx=cursor_x;
    26a8:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    26ac:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    26b0:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <vactualx+0x1>
    26b4:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <vactualx>
vactualy=cursor_y;
    26b8:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    26bc:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    26c0:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <vactualy+0x1>
    26c4:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <vactualy>
}
    26c8:	08 95       	ret

000026ca <backuplocationiset>:

void backuplocationiset(void)//backing up iset data start location to print next iset data in exact location
{
isetx=cursor_x;
    26ca:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    26ce:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    26d2:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <isetx+0x1>
    26d6:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <isetx>
isety=cursor_y;
    26da:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    26de:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    26e2:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <isety+0x1>
    26e6:	80 93 f4 05 	sts	0x05F4, r24	; 0x8005f4 <isety>
}
    26ea:	08 95       	ret

000026ec <backuplocationiactual>:


void backuplocationiactual(void)//backing up iactual data start location to print next iactual data in exact location
{
iactualx=cursor_x;
    26ec:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    26f0:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    26f4:	90 93 e2 05 	sts	0x05E2, r25	; 0x8005e2 <iactualx+0x1>
    26f8:	80 93 e1 05 	sts	0x05E1, r24	; 0x8005e1 <iactualx>
iactualy=cursor_y;
    26fc:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2700:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2704:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <iactualy+0x1>
    2708:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <iactualy>
}
    270c:	08 95       	ret

0000270e <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    270e:	2f 92       	push	r2
    2710:	3f 92       	push	r3
    2712:	4f 92       	push	r4
    2714:	5f 92       	push	r5
    2716:	6f 92       	push	r6
    2718:	7f 92       	push	r7
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
    2736:	29 97       	sbiw	r28, 0x09	; 9
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	6b 01       	movw	r12, r22
    2744:	19 01       	movw	r2, r18
    2746:	09 83       	std	Y+1, r16	; 0x01
    2748:	1a 83       	std	Y+2, r17	; 0x02

if((x >=LCD_W)            || // Clip right
    274a:	88 87       	std	Y+8, r24	; 0x08
    274c:	99 87       	std	Y+9, r25	; 0x09
    274e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <LCD_W>
    2752:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <LCD_W+0x1>
    2756:	28 85       	ldd	r18, Y+8	; 0x08
    2758:	39 85       	ldd	r19, Y+9	; 0x09
    275a:	28 17       	cp	r18, r24
    275c:	39 07       	cpc	r19, r25
    275e:	08 f0       	brcs	.+2      	; 0x2762 <ili9341_drawchar+0x54>
    2760:	68 c0       	rjmp	.+208    	; 0x2832 <ili9341_drawchar+0x124>
    2762:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <LCD_H>
    2766:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <LCD_H+0x1>
    276a:	68 17       	cp	r22, r24
    276c:	79 07       	cpc	r23, r25
    276e:	08 f0       	brcs	.+2      	; 0x2772 <ili9341_drawchar+0x64>
    2770:	60 c0       	rjmp	.+192    	; 0x2832 <ili9341_drawchar+0x124>
(y >=LCD_H)           || // Clip bottom
((x + 6 * size - 1) < 0) || // Clip left
    2772:	c9 01       	movw	r24, r18
    2774:	36 e0       	ldi	r19, 0x06	; 6
    2776:	e3 9e       	mul	r14, r19
    2778:	80 0d       	add	r24, r0
    277a:	91 1d       	adc	r25, r1
    277c:	11 24       	eor	r1, r1
(y >=LCD_H)           || // Clip bottom
    277e:	18 16       	cp	r1, r24
    2780:	19 06       	cpc	r1, r25
    2782:	0c f0       	brlt	.+2      	; 0x2786 <ili9341_drawchar+0x78>
    2784:	56 c0       	rjmp	.+172    	; 0x2832 <ili9341_drawchar+0x124>
((y + 8 * size - 1) < 0))   // Clip top
    2786:	8e 2d       	mov	r24, r14
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	9d 83       	std	Y+5, r25	; 0x05
    278c:	8c 83       	std	Y+4, r24	; 0x04
    278e:	e8 e0       	ldi	r30, 0x08	; 8
    2790:	ee 9e       	mul	r14, r30
    2792:	c0 01       	movw	r24, r0
    2794:	11 24       	eor	r1, r1
    2796:	86 0f       	add	r24, r22
    2798:	97 1f       	adc	r25, r23
((x + 6 * size - 1) < 0) || // Clip left
    279a:	18 16       	cp	r1, r24
    279c:	19 06       	cpc	r1, r25
    279e:	0c f0       	brlt	.+2      	; 0x27a2 <ili9341_drawchar+0x94>
    27a0:	48 c0       	rjmp	.+144    	; 0x2832 <ili9341_drawchar+0x124>
for (int8_t i=0; i<6; i++ ) {
uint8_t line;
if (i == 5) 
line = 0x0;
else 
line = pgm_read_byte(font+(c*5)+i);
    27a2:	f5 e0       	ldi	r31, 0x05	; 5
    27a4:	4f 9f       	mul	r20, r31
    27a6:	a0 01       	movw	r20, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	9a 01       	movw	r18, r20
    27ac:	29 53       	subi	r18, 0x39	; 57
    27ae:	3e 4f       	sbci	r19, 0xFE	; 254
    27b0:	3f 83       	std	Y+7, r19	; 0x07
    27b2:	2e 83       	std	Y+6, r18	; 0x06
    27b4:	68 84       	ldd	r6, Y+8	; 0x08
    27b6:	79 84       	ldd	r7, Y+9	; 0x09
for (int8_t i=0; i<6; i++ ) {
    27b8:	1b 82       	std	Y+3, r1	; 0x03
} else if (bg != color) {
if (size == 1) // default size
ili9341_drawpixel(x+i, y+j, bg);
else 
{  // big size
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    27ba:	5c 80       	ldd	r5, Y+4	; 0x04
    27bc:	4d 80       	ldd	r4, Y+5	; 0x05
if (i == 5) 
    27be:	3b 81       	ldd	r19, Y+3	; 0x03
line = 0x0;
    27c0:	f1 2c       	mov	r15, r1
if (i == 5) 
    27c2:	35 30       	cpi	r19, 0x05	; 5
    27c4:	19 f0       	breq	.+6      	; 0x27cc <ili9341_drawchar+0xbe>
line = pgm_read_byte(font+(c*5)+i);
    27c6:	ee 81       	ldd	r30, Y+6	; 0x06
    27c8:	ff 81       	ldd	r31, Y+7	; 0x07
    27ca:	f4 90       	lpm	r15, Z
line = 0x0;
    27cc:	46 01       	movw	r8, r12
    27ce:	b1 2c       	mov	r11, r1
    27d0:	a1 2c       	mov	r10, r1
if (line & 0x1) {
    27d2:	f0 fe       	sbrs	r15, 0
    27d4:	47 c0       	rjmp	.+142    	; 0x2864 <ili9341_drawchar+0x156>
if (size == 1) // default size
    27d6:	f1 e0       	ldi	r31, 0x01	; 1
ili9341_drawpixel(x+i, y+j, color);
    27d8:	a1 01       	movw	r20, r2
ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    27da:	81 01       	movw	r16, r2
if (size == 1) // default size
    27dc:	ef 12       	cpse	r14, r31
    27de:	50 c0       	rjmp	.+160    	; 0x2880 <ili9341_drawchar+0x172>
ili9341_drawpixel(x+i, y+j, bg);
    27e0:	b6 01       	movw	r22, r12
    27e2:	6a 0d       	add	r22, r10
    27e4:	7b 1d       	adc	r23, r11
    27e6:	c3 01       	movw	r24, r6
    27e8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <ili9341_drawpixel>
}
}
line >>= 1;
    27ec:	f6 94       	lsr	r15
for (int8_t j = 0; j<8; j++) {
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	a8 1a       	sub	r10, r24
    27f2:	b8 0a       	sbc	r11, r24
    27f4:	ec 81       	ldd	r30, Y+4	; 0x04
    27f6:	fd 81       	ldd	r31, Y+5	; 0x05
    27f8:	8e 0e       	add	r8, r30
    27fa:	9f 1e       	adc	r9, r31
    27fc:	f8 e0       	ldi	r31, 0x08	; 8
    27fe:	af 16       	cp	r10, r31
    2800:	b1 04       	cpc	r11, r1
    2802:	39 f7       	brne	.-50     	; 0x27d2 <ili9341_drawchar+0xc4>
for (int8_t i=0; i<6; i++ ) {
    2804:	2b 81       	ldd	r18, Y+3	; 0x03
    2806:	2f 5f       	subi	r18, 0xFF	; 255
    2808:	2b 83       	std	Y+3, r18	; 0x03
    280a:	88 85       	ldd	r24, Y+8	; 0x08
    280c:	99 85       	ldd	r25, Y+9	; 0x09
    280e:	ec 81       	ldd	r30, Y+4	; 0x04
    2810:	fd 81       	ldd	r31, Y+5	; 0x05
    2812:	8e 0f       	add	r24, r30
    2814:	9f 1f       	adc	r25, r31
    2816:	99 87       	std	Y+9, r25	; 0x09
    2818:	88 87       	std	Y+8, r24	; 0x08
    281a:	ff ef       	ldi	r31, 0xFF	; 255
    281c:	6f 1a       	sub	r6, r31
    281e:	7f 0a       	sbc	r7, r31
    2820:	2e 81       	ldd	r18, Y+6	; 0x06
    2822:	3f 81       	ldd	r19, Y+7	; 0x07
    2824:	2f 5f       	subi	r18, 0xFF	; 255
    2826:	3f 4f       	sbci	r19, 0xFF	; 255
    2828:	3f 83       	std	Y+7, r19	; 0x07
    282a:	2e 83       	std	Y+6, r18	; 0x06
    282c:	3b 81       	ldd	r19, Y+3	; 0x03
    282e:	36 30       	cpi	r19, 0x06	; 6
    2830:	31 f6       	brne	.-116    	; 0x27be <ili9341_drawchar+0xb0>
}
}
}
    2832:	29 96       	adiw	r28, 0x09	; 9
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	7f 90       	pop	r7
    2858:	6f 90       	pop	r6
    285a:	5f 90       	pop	r5
    285c:	4f 90       	pop	r4
    285e:	3f 90       	pop	r3
    2860:	2f 90       	pop	r2
    2862:	08 95       	ret
} else if (bg != color) {
    2864:	29 81       	ldd	r18, Y+1	; 0x01
    2866:	3a 81       	ldd	r19, Y+2	; 0x02
    2868:	22 15       	cp	r18, r2
    286a:	33 05       	cpc	r19, r3
    286c:	09 f4       	brne	.+2      	; 0x2870 <ili9341_drawchar+0x162>
    286e:	be cf       	rjmp	.-132    	; 0x27ec <ili9341_drawchar+0xde>
if (size == 1) // default size
    2870:	31 e0       	ldi	r19, 0x01	; 1
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2872:	09 81       	ldd	r16, Y+1	; 0x01
    2874:	1a 81       	ldd	r17, Y+2	; 0x02
if (size == 1) // default size
    2876:	e3 12       	cpse	r14, r19
    2878:	03 c0       	rjmp	.+6      	; 0x2880 <ili9341_drawchar+0x172>
ili9341_drawpixel(x+i, y+j, bg);
    287a:	49 81       	ldd	r20, Y+1	; 0x01
    287c:	5a 81       	ldd	r21, Y+2	; 0x02
    287e:	b0 cf       	rjmp	.-160    	; 0x27e0 <ili9341_drawchar+0xd2>
ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2880:	25 2d       	mov	r18, r5
    2882:	34 2d       	mov	r19, r4
    2884:	45 2d       	mov	r20, r5
    2886:	54 2d       	mov	r21, r4
    2888:	b4 01       	movw	r22, r8
    288a:	88 85       	ldd	r24, Y+8	; 0x08
    288c:	99 85       	ldd	r25, Y+9	; 0x09
    288e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <ili9341_fillrect>
    2892:	ac cf       	rjmp	.-168    	; 0x27ec <ili9341_drawchar+0xde>

00002894 <ili9341_write.part.0>:
{
if(s>8) return;
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
    2894:	ef 92       	push	r14
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	48 2f       	mov	r20, r24
} else if (c == '\r') {
 // skip em
}
else
{
ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    289c:	e0 90 f3 05 	lds	r14, 0x05F3	; 0x8005f3 <textsize>
    28a0:	00 91 dd 05 	lds	r16, 0x05DD	; 0x8005dd <textbgcolour>
    28a4:	10 91 de 05 	lds	r17, 0x05DE	; 0x8005de <textbgcolour+0x1>
    28a8:	20 91 ef 05 	lds	r18, 0x05EF	; 0x8005ef <textcolour>
    28ac:	30 91 f0 05 	lds	r19, 0x05F0	; 0x8005f0 <textcolour+0x1>
    28b0:	60 91 df 05 	lds	r22, 0x05DF	; 0x8005df <cursor_y>
    28b4:	70 91 e0 05 	lds	r23, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    28b8:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    28bc:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    28c0:	0e 94 87 13 	call	0x270e	; 0x270e <ili9341_drawchar>
cursor_x += textsize*6;
    28c4:	20 91 f3 05 	lds	r18, 0x05F3	; 0x8005f3 <textsize>
    28c8:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <cursor_x>
    28cc:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <cursor_x+0x1>
    28d0:	36 e0       	ldi	r19, 0x06	; 6
    28d2:	23 9f       	mul	r18, r19
    28d4:	80 0d       	add	r24, r0
    28d6:	91 1d       	adc	r25, r1
    28d8:	11 24       	eor	r1, r1
    28da:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <cursor_x+0x1>
    28de:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <cursor_x>
}
}
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ef 90       	pop	r14
    28e8:	08 95       	ret

000028ea <ili9341_setcursor>:
cursor_x=x;
    28ea:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <cursor_x+0x1>
    28ee:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <cursor_x>
cursor_y=y;
    28f2:	70 93 e0 05 	sts	0x05E0, r23	; 0x8005e0 <cursor_y+0x1>
    28f6:	60 93 df 05 	sts	0x05DF, r22	; 0x8005df <cursor_y>
}
    28fa:	08 95       	ret

000028fc <ili9341_settextcolour>:
textcolour=x;
    28fc:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <textcolour+0x1>
    2900:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <textcolour>
textbgcolour=y;
    2904:	70 93 de 05 	sts	0x05DE, r23	; 0x8005de <textbgcolour+0x1>
    2908:	60 93 dd 05 	sts	0x05DD, r22	; 0x8005dd <textbgcolour>
}
    290c:	08 95       	ret

0000290e <ili9341_settextsize>:
if(s>8) return;
    290e:	89 30       	cpi	r24, 0x09	; 9
    2910:	28 f4       	brcc	.+10     	; 0x291c <ili9341_settextsize+0xe>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2912:	81 11       	cpse	r24, r1
    2914:	01 c0       	rjmp	.+2      	; 0x2918 <ili9341_settextsize+0xa>
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <textsize>
}
    291c:	08 95       	ret

0000291e <ili9341_write>:
if (c == '\n') {
    291e:	8a 30       	cpi	r24, 0x0A	; 10
    2920:	a9 f4       	brne	.+42     	; 0x294c <ili9341_write+0x2e>
cursor_y += textsize*8;
    2922:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <textsize>
    2926:	20 91 df 05 	lds	r18, 0x05DF	; 0x8005df <cursor_y>
    292a:	30 91 e0 05 	lds	r19, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    292e:	48 e0       	ldi	r20, 0x08	; 8
    2930:	84 9f       	mul	r24, r20
    2932:	c0 01       	movw	r24, r0
    2934:	11 24       	eor	r1, r1
    2936:	82 0f       	add	r24, r18
    2938:	93 1f       	adc	r25, r19
    293a:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    293e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
cursor_x  = 0;
    2942:	10 92 f2 05 	sts	0x05F2, r1	; 0x8005f2 <cursor_x+0x1>
    2946:	10 92 f1 05 	sts	0x05F1, r1	; 0x8005f1 <cursor_x>
    294a:	08 95       	ret
} else if (c == '\r') {
    294c:	8d 30       	cpi	r24, 0x0D	; 13
    294e:	11 f0       	breq	.+4      	; 0x2954 <ili9341_write+0x36>
    2950:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <ili9341_write.part.0>
}
    2954:	08 95       	ret

00002956 <ili9341_putchar_printf>:
	ili9341_write(var);
    2956:	0e 94 8f 14 	call	0x291e	; 0x291e <ili9341_write>
}
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	08 95       	ret

00002960 <display_init>:


void display_init(void)//display initial data regarding my power supply
{
    2960:	8f 92       	push	r8
    2962:	9f 92       	push	r9
    2964:	af 92       	push	r10
    2966:	bf 92       	push	r11
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	cf 93       	push	r28
    2974:	df 93       	push	r29
stdout = & mydata;//it is used for printf function and must be declared locally
    2976:	87 e1       	ldi	r24, 0x17	; 23
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <__iob+0x3>
    297e:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <__iob+0x2>
cursor_x=x;
    2982:	04 e0       	ldi	r16, 0x04	; 4
    2984:	10 e0       	ldi	r17, 0x00	; 0
    2986:	10 93 f2 05 	sts	0x05F2, r17	; 0x8005f2 <cursor_x+0x1>
    298a:	00 93 f1 05 	sts	0x05F1, r16	; 0x8005f1 <cursor_x>
cursor_y=y;
    298e:	10 93 e0 05 	sts	0x05E0, r17	; 0x8005e0 <cursor_y+0x1>
    2992:	00 93 df 05 	sts	0x05DF, r16	; 0x8005df <cursor_y>
    2996:	8f e3       	ldi	r24, 0x3F	; 63
    2998:	9f e1       	ldi	r25, 0x1F	; 31
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <display_init+0x3a>
    299e:	00 c0       	rjmp	.+0      	; 0x29a0 <display_init+0x40>
    29a0:	00 00       	nop
textcolour=x;
    29a2:	80 ee       	ldi	r24, 0xE0	; 224
    29a4:	97 e0       	ldi	r25, 0x07	; 7
    29a6:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <textcolour+0x1>
    29aa:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <textcolour>
textbgcolour=y;
    29ae:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <textbgcolour+0x1>
    29b2:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <textbgcolour>
    29b6:	8f e3       	ldi	r24, 0x3F	; 63
    29b8:	9f e1       	ldi	r25, 0x1F	; 31
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <display_init+0x5a>
    29be:	00 c0       	rjmp	.+0      	; 0x29c0 <display_init+0x60>
    29c0:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    29c2:	c2 e0       	ldi	r28, 0x02	; 2
    29c4:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    29c8:	8f e3       	ldi	r24, 0x3F	; 63
    29ca:	9f e1       	ldi	r25, 0x1F	; 31
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <display_init+0x6c>
    29d0:	00 c0       	rjmp	.+0      	; 0x29d2 <display_init+0x72>
    29d2:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(GREEN,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("mode - ");
    29d4:	8d e1       	ldi	r24, 0x1D	; 29
    29d6:	92 e0       	ldi	r25, 0x02	; 2
    29d8:	9f 93       	push	r25
    29da:	8f 93       	push	r24
    29dc:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    29e0:	8f e3       	ldi	r24, 0x3F	; 63
    29e2:	9f e1       	ldi	r25, 0x1F	; 31
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <display_init+0x84>
    29e8:	00 c0       	rjmp	.+0      	; 0x29ea <display_init+0x8a>
    29ea:	00 00       	nop
textcolour=x;
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	98 ef       	ldi	r25, 0xF8	; 248
    29f0:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <textcolour+0x1>
    29f4:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <textcolour>
textbgcolour=y;
    29f8:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <textbgcolour+0x1>
    29fc:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <textbgcolour>
    2a00:	8f e3       	ldi	r24, 0x3F	; 63
    2a02:	9f e1       	ldi	r25, 0x1F	; 31
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <display_init+0xa4>
    2a08:	00 c0       	rjmp	.+0      	; 0x2a0a <display_init+0xaa>
    2a0a:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2a0c:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    2a10:	8f e3       	ldi	r24, 0x3F	; 63
    2a12:	9f e1       	ldi	r25, 0x1F	; 31
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <display_init+0xb4>
    2a18:	00 c0       	rjmp	.+0      	; 0x2a1a <display_init+0xba>
    2a1a:	00 00       	nop
_delay_ms(2);
ili9341_settextcolour(RED,BLACK);
_delay_ms(2);
ili9341_settextsize(2);
_delay_ms(2);
printf("constant voltage");
    2a1c:	85 e2       	ldi	r24, 0x25	; 37
    2a1e:	92 e0       	ldi	r25, 0x02	; 2
    2a20:	9f 93       	push	r25
    2a22:	8f 93       	push	r24
    2a24:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2a28:	8f e3       	ldi	r24, 0x3F	; 63
    2a2a:	9f e1       	ldi	r25, 0x1F	; 31
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <display_init+0xcc>
    2a30:	00 c0       	rjmp	.+0      	; 0x2a32 <display_init+0xd2>
    2a32:	00 00       	nop
cursor_x=x;
    2a34:	10 93 f2 05 	sts	0x05F2, r17	; 0x8005f2 <cursor_x+0x1>
    2a38:	00 93 f1 05 	sts	0x05F1, r16	; 0x8005f1 <cursor_x>
cursor_y=y;
    2a3c:	88 e2       	ldi	r24, 0x28	; 40
    2a3e:	a8 2e       	mov	r10, r24
    2a40:	b1 2c       	mov	r11, r1
    2a42:	b0 92 e0 05 	sts	0x05E0, r11	; 0x8005e0 <cursor_y+0x1>
    2a46:	a0 92 df 05 	sts	0x05DF, r10	; 0x8005df <cursor_y>
    2a4a:	8f e3       	ldi	r24, 0x3F	; 63
    2a4c:	9f e1       	ldi	r25, 0x1F	; 31
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <display_init+0xee>
    2a52:	00 c0       	rjmp	.+0      	; 0x2a54 <display_init+0xf4>
    2a54:	00 00       	nop
textcolour=x;
    2a56:	8f ef       	ldi	r24, 0xFF	; 255
    2a58:	97 e0       	ldi	r25, 0x07	; 7
    2a5a:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <textcolour+0x1>
    2a5e:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <textcolour>
textbgcolour=y;
    2a62:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <textbgcolour+0x1>
    2a66:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <textbgcolour>
    2a6a:	8f e3       	ldi	r24, 0x3F	; 63
    2a6c:	9f e1       	ldi	r25, 0x1F	; 31
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <display_init+0x10e>
    2a72:	00 c0       	rjmp	.+0      	; 0x2a74 <display_init+0x114>
    2a74:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2a76:	d4 e0       	ldi	r29, 0x04	; 4
    2a78:	d0 93 f3 05 	sts	0x05F3, r29	; 0x8005f3 <textsize>
    2a7c:	8f e3       	ldi	r24, 0x3F	; 63
    2a7e:	9f e1       	ldi	r25, 0x1F	; 31
    2a80:	01 97       	sbiw	r24, 0x01	; 1
    2a82:	f1 f7       	brne	.-4      	; 0x2a80 <display_init+0x120>
    2a84:	00 c0       	rjmp	.+0      	; 0x2a86 <display_init+0x126>
    2a86:	00 00       	nop
} else if (c == '\r') {
    2a88:	86 e5       	ldi	r24, 0x56	; 86
    2a8a:	0e 94 4a 14 	call	0x2894	; 0x2894 <ili9341_write.part.0>
    2a8e:	8f e3       	ldi	r24, 0x3F	; 63
    2a90:	9f e1       	ldi	r25, 0x1F	; 31
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <display_init+0x132>
    2a96:	00 c0       	rjmp	.+0      	; 0x2a98 <display_init+0x138>
    2a98:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    2a9a:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2a9e:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2aa2:	06 96       	adiw	r24, 0x06	; 6
    2aa4:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2aa8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2aac:	c3 e0       	ldi	r28, 0x03	; 3
    2aae:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    2ab2:	8f e3       	ldi	r24, 0x3F	; 63
    2ab4:	9f e1       	ldi	r25, 0x1F	; 31
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <display_init+0x156>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <display_init+0x15c>
    2abc:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set\n");
    2abe:	86 e3       	ldi	r24, 0x36	; 54
    2ac0:	92 e0       	ldi	r25, 0x02	; 2
    2ac2:	0e 94 65 34 	call	0x68ca	; 0x68ca <puts>
    2ac6:	8f e3       	ldi	r24, 0x3F	; 63
    2ac8:	9f e1       	ldi	r25, 0x1F	; 31
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <display_init+0x16a>
    2ace:	00 c0       	rjmp	.+0      	; 0x2ad0 <display_init+0x170>
    2ad0:	00 00       	nop
_delay_ms(2);
cursor_y=cursor_y+12;
    2ad2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2ad6:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2ada:	0c 96       	adiw	r24, 0x0c	; 12
    2adc:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2ae0:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
backuplocationvset();
    2ae4:	0e 94 43 13 	call	0x2686	; 0x2686 <backuplocationvset>
printf("00.00v");
    2ae8:	8a e3       	ldi	r24, 0x3A	; 58
    2aea:	92 e0       	ldi	r25, 0x02	; 2
    2aec:	9f 93       	push	r25
    2aee:	8f 93       	push	r24
    2af0:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2af4:	8f e3       	ldi	r24, 0x3F	; 63
    2af6:	9f e1       	ldi	r25, 0x1F	; 31
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <display_init+0x198>
    2afc:	00 c0       	rjmp	.+0      	; 0x2afe <display_init+0x19e>
    2afe:	00 00       	nop
cursor_x=x;
    2b00:	10 93 f2 05 	sts	0x05F2, r17	; 0x8005f2 <cursor_x+0x1>
    2b04:	00 93 f1 05 	sts	0x05F1, r16	; 0x8005f1 <cursor_x>
cursor_y=y;
    2b08:	98 e7       	ldi	r25, 0x78	; 120
    2b0a:	89 2e       	mov	r8, r25
    2b0c:	91 2c       	mov	r9, r1
    2b0e:	90 92 e0 05 	sts	0x05E0, r9	; 0x8005e0 <cursor_y+0x1>
    2b12:	80 92 df 05 	sts	0x05DF, r8	; 0x8005df <cursor_y>
    2b16:	8f e3       	ldi	r24, 0x3F	; 63
    2b18:	9f e1       	ldi	r25, 0x1F	; 31
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <display_init+0x1ba>
    2b1e:	00 c0       	rjmp	.+0      	; 0x2b20 <display_init+0x1c0>
    2b20:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2b22:	d0 93 f3 05 	sts	0x05F3, r29	; 0x8005f3 <textsize>
    2b26:	8f e3       	ldi	r24, 0x3F	; 63
    2b28:	9f e1       	ldi	r25, 0x1F	; 31
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <display_init+0x1ca>
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <display_init+0x1d0>
    2b30:	00 00       	nop
} else if (c == '\r') {
    2b32:	86 e5       	ldi	r24, 0x56	; 86
    2b34:	0e 94 4a 14 	call	0x2894	; 0x2894 <ili9341_write.part.0>
    2b38:	8f e3       	ldi	r24, 0x3F	; 63
    2b3a:	9f e1       	ldi	r25, 0x1F	; 31
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	f1 f7       	brne	.-4      	; 0x2b3c <display_init+0x1dc>
    2b40:	00 c0       	rjmp	.+0      	; 0x2b42 <display_init+0x1e2>
    2b42:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('V');
_delay_ms(2);
cursor_y=cursor_y+6;
    2b44:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2b48:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2b4c:	06 96       	adiw	r24, 0x06	; 6
    2b4e:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2b52:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2b56:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    2b5a:	8f e3       	ldi	r24, 0x3F	; 63
    2b5c:	9f e1       	ldi	r25, 0x1F	; 31
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <display_init+0x1fe>
    2b62:	00 c0       	rjmp	.+0      	; 0x2b64 <display_init+0x204>
    2b64:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual\n\n");
    2b66:	81 e4       	ldi	r24, 0x41	; 65
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	0e 94 65 34 	call	0x68ca	; 0x68ca <puts>
    2b6e:	8f e3       	ldi	r24, 0x3F	; 63
    2b70:	9f e1       	ldi	r25, 0x1F	; 31
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <display_init+0x212>
    2b76:	00 c0       	rjmp	.+0      	; 0x2b78 <display_init+0x218>
    2b78:	00 00       	nop
_delay_ms(2);
backuplocationvactual();
    2b7a:	0e 94 54 13 	call	0x26a8	; 0x26a8 <backuplocationvactual>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2b7e:	25 e0       	ldi	r18, 0x05	; 5
    2b80:	d2 2e       	mov	r13, r18
    2b82:	d0 92 f3 05 	sts	0x05F3, r13	; 0x8005f3 <textsize>
ili9341_settextsize(5);
printf("00.00");
    2b86:	09 e4       	ldi	r16, 0x49	; 73
    2b88:	12 e0       	ldi	r17, 0x02	; 2
    2b8a:	1f 93       	push	r17
    2b8c:	0f 93       	push	r16
    2b8e:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2b92:	8f e3       	ldi	r24, 0x3F	; 63
    2b94:	9f e1       	ldi	r25, 0x1F	; 31
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <display_init+0x236>
    2b9a:	00 c0       	rjmp	.+0      	; 0x2b9c <display_init+0x23c>
    2b9c:	00 00       	nop
cursor_x=x;
    2b9e:	34 ea       	ldi	r19, 0xA4	; 164
    2ba0:	e3 2e       	mov	r14, r19
    2ba2:	f1 2c       	mov	r15, r1
    2ba4:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <cursor_x+0x1>
    2ba8:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <cursor_x>
cursor_y=y;
    2bac:	b0 92 e0 05 	sts	0x05E0, r11	; 0x8005e0 <cursor_y+0x1>
    2bb0:	a0 92 df 05 	sts	0x05DF, r10	; 0x8005df <cursor_y>
    2bb4:	8f e3       	ldi	r24, 0x3F	; 63
    2bb6:	9f e1       	ldi	r25, 0x1F	; 31
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <display_init+0x258>
    2bbc:	00 c0       	rjmp	.+0      	; 0x2bbe <display_init+0x25e>
    2bbe:	00 00       	nop
textcolour=x;
    2bc0:	80 ee       	ldi	r24, 0xE0	; 224
    2bc2:	9f ef       	ldi	r25, 0xFF	; 255
    2bc4:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <textcolour+0x1>
    2bc8:	80 93 ef 05 	sts	0x05EF, r24	; 0x8005ef <textcolour>
textbgcolour=y;
    2bcc:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <textbgcolour+0x1>
    2bd0:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <textbgcolour>
    2bd4:	8f e3       	ldi	r24, 0x3F	; 63
    2bd6:	9f e1       	ldi	r25, 0x1F	; 31
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <display_init+0x278>
    2bdc:	00 c0       	rjmp	.+0      	; 0x2bde <display_init+0x27e>
    2bde:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2be0:	d0 93 f3 05 	sts	0x05F3, r29	; 0x8005f3 <textsize>
    2be4:	8f e3       	ldi	r24, 0x3F	; 63
    2be6:	9f e1       	ldi	r25, 0x1F	; 31
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <display_init+0x288>
    2bec:	00 c0       	rjmp	.+0      	; 0x2bee <display_init+0x28e>
    2bee:	00 00       	nop
} else if (c == '\r') {
    2bf0:	89 e4       	ldi	r24, 0x49	; 73
    2bf2:	0e 94 4a 14 	call	0x2894	; 0x2894 <ili9341_write.part.0>
    2bf6:	8f e3       	ldi	r24, 0x3F	; 63
    2bf8:	9f e1       	ldi	r25, 0x1F	; 31
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <display_init+0x29a>
    2bfe:	00 c0       	rjmp	.+0      	; 0x2c00 <display_init+0x2a0>
    2c00:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    2c02:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2c06:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2c0a:	06 96       	adiw	r24, 0x06	; 6
    2c0c:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2c10:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2c14:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    2c18:	8f e3       	ldi	r24, 0x3F	; 63
    2c1a:	9f e1       	ldi	r25, 0x1F	; 31
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <display_init+0x2bc>
    2c20:	00 c0       	rjmp	.+0      	; 0x2c22 <display_init+0x2c2>
    2c22:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("set");
    2c24:	86 e3       	ldi	r24, 0x36	; 54
    2c26:	92 e0       	ldi	r25, 0x02	; 2
    2c28:	9f 93       	push	r25
    2c2a:	8f 93       	push	r24
    2c2c:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2c30:	8f e3       	ldi	r24, 0x3F	; 63
    2c32:	9f e1       	ldi	r25, 0x1F	; 31
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <display_init+0x2d4>
    2c38:	00 c0       	rjmp	.+0      	; 0x2c3a <display_init+0x2da>
    2c3a:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    2c3c:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <cursor_x+0x1>
    2c40:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <cursor_x>
cursor_y=(cursor_y+36);
    2c44:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2c48:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2c4c:	84 96       	adiw	r24, 0x24	; 36
    2c4e:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2c52:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
backuplocationiset();
    2c56:	0e 94 65 13 	call	0x26ca	; 0x26ca <backuplocationiset>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2c5a:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
ili9341_settextsize(3);
printf("00.00a");
    2c5e:	8f e4       	ldi	r24, 0x4F	; 79
    2c60:	92 e0       	ldi	r25, 0x02	; 2
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2c6a:	8f e3       	ldi	r24, 0x3F	; 63
    2c6c:	9f e1       	ldi	r25, 0x1F	; 31
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <display_init+0x30e>
    2c72:	00 c0       	rjmp	.+0      	; 0x2c74 <display_init+0x314>
    2c74:	00 00       	nop
cursor_x=x;
    2c76:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <cursor_x+0x1>
    2c7a:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <cursor_x>
cursor_y=y;
    2c7e:	90 92 e0 05 	sts	0x05E0, r9	; 0x8005e0 <cursor_y+0x1>
    2c82:	80 92 df 05 	sts	0x05DF, r8	; 0x8005df <cursor_y>
    2c86:	8f e3       	ldi	r24, 0x3F	; 63
    2c88:	9f e1       	ldi	r25, 0x1F	; 31
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <display_init+0x32a>
    2c8e:	00 c0       	rjmp	.+0      	; 0x2c90 <display_init+0x330>
    2c90:	00 00       	nop
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2c92:	d0 93 f3 05 	sts	0x05F3, r29	; 0x8005f3 <textsize>
    2c96:	8f e3       	ldi	r24, 0x3F	; 63
    2c98:	9f e1       	ldi	r25, 0x1F	; 31
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <display_init+0x33a>
    2c9e:	00 c0       	rjmp	.+0      	; 0x2ca0 <display_init+0x340>
    2ca0:	00 00       	nop
} else if (c == '\r') {
    2ca2:	89 e4       	ldi	r24, 0x49	; 73
    2ca4:	0e 94 4a 14 	call	0x2894	; 0x2894 <ili9341_write.part.0>
    2ca8:	8f e3       	ldi	r24, 0x3F	; 63
    2caa:	9f e1       	ldi	r25, 0x1F	; 31
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <display_init+0x34c>
    2cb0:	00 c0       	rjmp	.+0      	; 0x2cb2 <display_init+0x352>
    2cb2:	00 00       	nop
_delay_ms(2);
ili9341_settextsize(4);
_delay_ms(2);
ili9341_write('I');
_delay_ms(2);
cursor_y=cursor_y+6;
    2cb4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2cb8:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2cbc:	06 96       	adiw	r24, 0x06	; 6
    2cbe:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2cc2:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2cc6:	c0 93 f3 05 	sts	0x05F3, r28	; 0x8005f3 <textsize>
    2cca:	8f e3       	ldi	r24, 0x3F	; 63
    2ccc:	9f e1       	ldi	r25, 0x1F	; 31
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <display_init+0x36e>
    2cd2:	00 c0       	rjmp	.+0      	; 0x2cd4 <display_init+0x374>
    2cd4:	00 00       	nop
ili9341_settextsize(3);
_delay_ms(2);
printf("actual");
    2cd6:	86 e5       	ldi	r24, 0x56	; 86
    2cd8:	92 e0       	ldi	r25, 0x02	; 2
    2cda:	9f 93       	push	r25
    2cdc:	8f 93       	push	r24
    2cde:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2ce2:	8f e3       	ldi	r24, 0x3F	; 63
    2ce4:	9f e1       	ldi	r25, 0x1F	; 31
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <display_init+0x386>
    2cea:	00 c0       	rjmp	.+0      	; 0x2cec <display_init+0x38c>
    2cec:	00 00       	nop
_delay_ms(2);
cursor_x=164;
    2cee:	f0 92 f2 05 	sts	0x05F2, r15	; 0x8005f2 <cursor_x+0x1>
    2cf2:	e0 92 f1 05 	sts	0x05F1, r14	; 0x8005f1 <cursor_x>
backuplocationiactual();
    2cf6:	0e 94 76 13 	call	0x26ec	; 0x26ec <backuplocationiactual>
cursor_y=cursor_y+48;
    2cfa:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <cursor_y>
    2cfe:	90 91 e0 05 	lds	r25, 0x05E0	; 0x8005e0 <cursor_y+0x1>
    2d02:	c0 96       	adiw	r24, 0x30	; 48
    2d04:	90 93 e0 05 	sts	0x05E0, r25	; 0x8005e0 <cursor_y+0x1>
    2d08:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <cursor_y>
textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    2d0c:	d0 92 f3 05 	sts	0x05F3, r13	; 0x8005f3 <textsize>
ili9341_settextsize(5);
printf("00.00");
    2d10:	1f 93       	push	r17
    2d12:	0f 93       	push	r16
    2d14:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
    2d18:	9f ef       	ldi	r25, 0xFF	; 255
    2d1a:	27 ea       	ldi	r18, 0xA7	; 167
    2d1c:	81 e6       	ldi	r24, 0x61	; 97
    2d1e:	91 50       	subi	r25, 0x01	; 1
    2d20:	20 40       	sbci	r18, 0x00	; 0
    2d22:	80 40       	sbci	r24, 0x00	; 0
    2d24:	e1 f7       	brne	.-8      	; 0x2d1e <display_init+0x3be>
    2d26:	00 c0       	rjmp	.+0      	; 0x2d28 <display_init+0x3c8>
    2d28:	00 00       	nop
_delay_ms(2000);

}
    2d2a:	8d b7       	in	r24, 0x3d	; 61
    2d2c:	9e b7       	in	r25, 0x3e	; 62
    2d2e:	40 96       	adiw	r24, 0x10	; 16
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	9e bf       	out	0x3e, r25	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	8d bf       	out	0x3d, r24	; 61
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	08 95       	ret

00002d52 <uart_init>:
#define USE_SLEEP 1

void uart_init(void)
{
    /* set baud rate */
    UBRRH = UBRRVAL >> 8;
    2d52:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UBRRL = UBRRVAL & 0xff;
    2d56:	87 e6       	ldi	r24, 0x67	; 103
    2d58:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    /* set frame format: 8 bit, no parity, 1 bit */
    UCSRC = UCSRC_SELECT | (1 << UCSZ1) | (1 << UCSZ0);
    2d5c:	86 e0       	ldi	r24, 0x06	; 6
    2d5e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    /* enable serial receiver and transmitter */
#if !USE_SLEEP
    UCSRB = (1 << RXEN) | (1 << TXEN);
#else
    UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);
    2d62:	88 e9       	ldi	r24, 0x98	; 152
    2d64:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
#endif
}
    2d68:	08 95       	ret

00002d6a <uart_putc>:

void uart_putc(uint8_t c)
{
    2d6a:	cf 93       	push	r28
    2d6c:	c8 2f       	mov	r28, r24
    if(c == '\n')
    2d6e:	8a 30       	cpi	r24, 0x0A	; 10
    2d70:	19 f4       	brne	.+6      	; 0x2d78 <uart_putc+0xe>
        uart_putc('\r');
    2d72:	8d e0       	ldi	r24, 0x0D	; 13
    2d74:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>

    /* wait until transmit buffer is empty */
    while(!(UCSRA & (1 << UDRE)));
    2d78:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2d7c:	85 ff       	sbrs	r24, 5
    2d7e:	fc cf       	rjmp	.-8      	; 0x2d78 <uart_putc+0xe>

    /* send next byte */
    UDR = c;
    2d80:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    2d84:	cf 91       	pop	r28
    2d86:	08 95       	ret

00002d88 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    2d88:	cf 93       	push	r28
    2d8a:	c8 2f       	mov	r28, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    2d8c:	82 95       	swap	r24
    2d8e:	8f 70       	andi	r24, 0x0F	; 15
    2d90:	c0 3a       	cpi	r28, 0xA0	; 160
    2d92:	58 f4       	brcc	.+22     	; 0x2daa <uart_putc_hex+0x22>
        uart_putc((b >> 4) + '0');
    2d94:	80 5d       	subi	r24, 0xD0	; 208
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    2d96:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    2d9a:	8c 2f       	mov	r24, r28
    2d9c:	8f 70       	andi	r24, 0x0F	; 15
    2d9e:	8a 30       	cpi	r24, 0x0A	; 10
    2da0:	30 f4       	brcc	.+12     	; 0x2dae <uart_putc_hex+0x26>
        uart_putc((b & 0x0f) + '0');
    2da2:	80 5d       	subi	r24, 0xD0	; 208
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
}
    2da4:	cf 91       	pop	r28
        uart_putc((b & 0x0f) - 0x0a + 'a');
    2da6:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <uart_putc>
        uart_putc((b >> 4) - 0x0a + 'a');
    2daa:	89 5a       	subi	r24, 0xA9	; 169
    2dac:	f4 cf       	rjmp	.-24     	; 0x2d96 <uart_putc_hex+0xe>
        uart_putc((b & 0x0f) - 0x0a + 'a');
    2dae:	89 5a       	subi	r24, 0xA9	; 169
    2db0:	f9 cf       	rjmp	.-14     	; 0x2da4 <uart_putc_hex+0x1c>

00002db2 <uart_putw_hex>:

void uart_putw_hex(uint16_t w)
{
    2db2:	cf 93       	push	r28
    2db4:	c8 2f       	mov	r28, r24
    2db6:	89 2f       	mov	r24, r25
    uart_putc_hex((uint8_t) (w >> 8));
    2db8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    2dbc:	8c 2f       	mov	r24, r28
}
    2dbe:	cf 91       	pop	r28
    uart_putc_hex((uint8_t) (w & 0xff));
    2dc0:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <uart_putc_hex>

00002dc4 <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	d6 2f       	mov	r29, r22
    2dca:	c7 2f       	mov	r28, r23
    uart_putw_hex((uint16_t) (dw >> 16));
    2dcc:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    2dd0:	8d 2f       	mov	r24, r29
    2dd2:	9c 2f       	mov	r25, r28
}
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    uart_putw_hex((uint16_t) (dw & 0xffff));
    2dd8:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <uart_putw_hex>

00002ddc <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    2ddc:	af 92       	push	r10
    2dde:	bf 92       	push	r11
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	8c 01       	movw	r16, r24
    2df0:	85 e0       	ldi	r24, 0x05	; 5
    2df2:	e8 2e       	mov	r14, r24
    2df4:	f1 2c       	mov	r15, r1
    uint16_t num = 10000;
    uint8_t started = 0;
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    uint16_t num = 10000;
    2df8:	c0 e1       	ldi	r28, 0x10	; 16
    2dfa:	d7 e2       	ldi	r29, 0x27	; 39
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    2dfc:	9a e0       	ldi	r25, 0x0A	; 10
    2dfe:	a9 2e       	mov	r10, r25
    2e00:	b1 2c       	mov	r11, r1
        uint8_t b = w / num;
    2e02:	c8 01       	movw	r24, r16
    2e04:	be 01       	movw	r22, r28
    2e06:	0e 94 99 33 	call	0x6732	; 0x6732 <__udivmodhi4>
    2e0a:	d6 2e       	mov	r13, r22
        if(b > 0 || started || num == 1)
    2e0c:	26 2b       	or	r18, r22
    2e0e:	19 f4       	brne	.+6      	; 0x2e16 <uart_putw_dec+0x3a>
    2e10:	c1 30       	cpi	r28, 0x01	; 1
    2e12:	d1 05       	cpc	r29, r1
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <uart_putw_dec+0x44>
            uart_putc('0' + b);
    2e16:	80 e3       	ldi	r24, 0x30	; 48
    2e18:	8d 0d       	add	r24, r13
    2e1a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
            started = 1;
    2e1e:	21 e0       	ldi	r18, 0x01	; 1
        w -= b * num;
    2e20:	dc 9e       	mul	r13, r28
    2e22:	c0 01       	movw	r24, r0
    2e24:	dd 9e       	mul	r13, r29
    2e26:	90 0d       	add	r25, r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	08 1b       	sub	r16, r24
    2e2c:	19 0b       	sbc	r17, r25
        num /= 10;
    2e2e:	ce 01       	movw	r24, r28
    2e30:	b5 01       	movw	r22, r10
    2e32:	0e 94 99 33 	call	0x6732	; 0x6732 <__udivmodhi4>
    2e36:	eb 01       	movw	r28, r22
    while(num > 0)
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	e8 1a       	sub	r14, r24
    2e3c:	f1 08       	sbc	r15, r1
    2e3e:	09 f7       	brne	.-62     	; 0x2e02 <uart_putw_dec+0x26>
    }
}
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	1f 91       	pop	r17
    2e46:	0f 91       	pop	r16
    2e48:	ff 90       	pop	r15
    2e4a:	ef 90       	pop	r14
    2e4c:	df 90       	pop	r13
    2e4e:	bf 90       	pop	r11
    2e50:	af 90       	pop	r10
    2e52:	08 95       	ret

00002e54 <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    2e54:	8f 92       	push	r8
    2e56:	9f 92       	push	r9
    2e58:	af 92       	push	r10
    2e5a:	bf 92       	push	r11
    2e5c:	cf 92       	push	r12
    2e5e:	df 92       	push	r13
    2e60:	ef 92       	push	r14
    2e62:	ff 92       	push	r15
    2e64:	0f 93       	push	r16
    2e66:	1f 93       	push	r17
    2e68:	cf 93       	push	r28
    2e6a:	df 93       	push	r29
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	29 97       	sbiw	r28, 0x09	; 9
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	69 83       	std	Y+1, r22	; 0x01
    2e7e:	7a 83       	std	Y+2, r23	; 0x02
    2e80:	8b 83       	std	Y+3, r24	; 0x03
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	0a e0       	ldi	r16, 0x0A	; 10
    2e86:	10 e0       	ldi	r17, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;
    2e88:	19 86       	std	Y+9, r1	; 0x09
    uint32_t num = 1000000000;
    2e8a:	c1 2c       	mov	r12, r1
    2e8c:	8a ec       	ldi	r24, 0xCA	; 202
    2e8e:	d8 2e       	mov	r13, r24
    2e90:	8a e9       	ldi	r24, 0x9A	; 154
    2e92:	e8 2e       	mov	r14, r24
    2e94:	8b e3       	ldi	r24, 0x3B	; 59
    2e96:	f8 2e       	mov	r15, r24
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    2e98:	9a e0       	ldi	r25, 0x0A	; 10
    2e9a:	89 2e       	mov	r8, r25
    2e9c:	91 2c       	mov	r9, r1
    2e9e:	a1 2c       	mov	r10, r1
    2ea0:	b1 2c       	mov	r11, r1
        uint8_t b = dw / num;
    2ea2:	69 81       	ldd	r22, Y+1	; 0x01
    2ea4:	7a 81       	ldd	r23, Y+2	; 0x02
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	a7 01       	movw	r20, r14
    2eac:	96 01       	movw	r18, r12
    2eae:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
    2eb2:	2d 83       	std	Y+5, r18	; 0x05
        if(b > 0 || started || num == 1)
    2eb4:	39 85       	ldd	r19, Y+9	; 0x09
    2eb6:	32 2b       	or	r19, r18
    2eb8:	39 87       	std	Y+9, r19	; 0x09
    2eba:	31 11       	cpse	r19, r1
    2ebc:	06 c0       	rjmp	.+12     	; 0x2eca <uart_putdw_dec+0x76>
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	c4 16       	cp	r12, r20
    2ec2:	d1 04       	cpc	r13, r1
    2ec4:	e1 04       	cpc	r14, r1
    2ec6:	f1 04       	cpc	r15, r1
    2ec8:	31 f4       	brne	.+12     	; 0x2ed6 <uart_putdw_dec+0x82>
            uart_putc('0' + b);
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	80 5d       	subi	r24, 0xD0	; 208
    2ece:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
            started = 1;
    2ed2:	51 e0       	ldi	r21, 0x01	; 1
    2ed4:	59 87       	std	Y+9, r21	; 0x09
        dw -= b * num;
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	a8 2f       	mov	r26, r24
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	a7 01       	movw	r20, r14
    2ede:	96 01       	movw	r18, r12
    2ee0:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <__muluhisi3>
    2ee4:	29 81       	ldd	r18, Y+1	; 0x01
    2ee6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ee8:	4b 81       	ldd	r20, Y+3	; 0x03
    2eea:	5c 81       	ldd	r21, Y+4	; 0x04
    2eec:	26 1b       	sub	r18, r22
    2eee:	37 0b       	sbc	r19, r23
    2ef0:	48 0b       	sbc	r20, r24
    2ef2:	59 0b       	sbc	r21, r25
    2ef4:	29 83       	std	Y+1, r18	; 0x01
    2ef6:	3a 83       	std	Y+2, r19	; 0x02
    2ef8:	4b 83       	std	Y+3, r20	; 0x03
    2efa:	5c 83       	std	Y+4, r21	; 0x04
        num /= 10;
    2efc:	c7 01       	movw	r24, r14
    2efe:	b6 01       	movw	r22, r12
    2f00:	a5 01       	movw	r20, r10
    2f02:	94 01       	movw	r18, r8
    2f04:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
    2f08:	69 01       	movw	r12, r18
    2f0a:	7a 01       	movw	r14, r20
    while(num > 0)
    2f0c:	01 50       	subi	r16, 0x01	; 1
    2f0e:	11 09       	sbc	r17, r1
    2f10:	41 f6       	brne	.-112    	; 0x2ea2 <uart_putdw_dec+0x4e>
    }
}
    2f12:	29 96       	adiw	r28, 0x09	; 9
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	df 91       	pop	r29
    2f20:	cf 91       	pop	r28
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	ff 90       	pop	r15
    2f28:	ef 90       	pop	r14
    2f2a:	df 90       	pop	r13
    2f2c:	cf 90       	pop	r12
    2f2e:	bf 90       	pop	r11
    2f30:	af 90       	pop	r10
    2f32:	9f 90       	pop	r9
    2f34:	8f 90       	pop	r8
    2f36:	08 95       	ret

00002f38 <uart_puts>:

void uart_puts(const char* str)
{
    2f38:	cf 93       	push	r28
    2f3a:	df 93       	push	r29
    2f3c:	ec 01       	movw	r28, r24
    while(*str)
    2f3e:	89 91       	ld	r24, Y+
    2f40:	81 11       	cpse	r24, r1
    2f42:	03 c0       	rjmp	.+6      	; 0x2f4a <uart_puts+0x12>
        uart_putc(*str++);
}
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	08 95       	ret
        uart_putc(*str++);
    2f4a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    2f4e:	f7 cf       	rjmp	.-18     	; 0x2f3e <uart_puts+0x6>

00002f50 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    2f50:	cf 93       	push	r28
    2f52:	df 93       	push	r29
    2f54:	ec 01       	movw	r28, r24
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    2f56:	fe 01       	movw	r30, r28
    2f58:	84 91       	lpm	r24, Z
        if(!b)
    2f5a:	21 96       	adiw	r28, 0x01	; 1
    2f5c:	88 23       	and	r24, r24
    2f5e:	19 f0       	breq	.+6      	; 0x2f66 <uart_puts_p+0x16>
            break;

        uart_putc(b);
    2f60:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    {
    2f64:	f8 cf       	rjmp	.-16     	; 0x2f56 <uart_puts_p+0x6>
    }
}
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	08 95       	ret

00002f6c <uart_getc>:

uint8_t uart_getc(void)
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    2f6c:	9f b7       	in	r25, 0x3f	; 63
    sei();
    2f6e:	78 94       	sei

    while(!(UCSRA & (1 << RXC)))
    2f70:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2f74:	87 ff       	sbrs	r24, 7
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <uart_getc+0x1a>
        sleep_mode();

    SREG = sreg;
    2f78:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR;
    2f7a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    if(b == '\r')
    2f7e:	8d 30       	cpi	r24, 0x0D	; 13
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <uart_getc+0x18>
        b = '\n';
    2f82:	8a e0       	ldi	r24, 0x0A	; 10

    return b;
}
    2f84:	08 95       	ret
        sleep_mode();
    2f86:	83 b7       	in	r24, 0x33	; 51
    2f88:	81 60       	ori	r24, 0x01	; 1
    2f8a:	83 bf       	out	0x33, r24	; 51
    2f8c:	88 95       	sleep
    2f8e:	83 b7       	in	r24, 0x33	; 51
    2f90:	8e 7f       	andi	r24, 0xFE	; 254
    2f92:	83 bf       	out	0x33, r24	; 51
    2f94:	ed cf       	rjmp	.-38     	; 0x2f70 <uart_getc+0x4>

00002f96 <__vector_18>:

EMPTY_INTERRUPT(USART_RXC_vect)
    2f96:	18 95       	reti

00002f98 <TWIInit>:
 */

void TWIInit(void)
{
 /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  PRR =0x00;
    2f98:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 // TWSR |= (1<<TWPS0);                          /* no prescaler */
 
  
  //set sck to 400khz
	TWSR = 0x02;
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	//TWBR = 0x0C;
	 TWBR = ((16000000/400000)-16)/2;  /* (F_CPU / F_TWI) must be > 10 for stable operation */
    2fa2:	8c e0       	ldi	r24, 0x0C	; 12
    2fa4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//enable TWI
	TWCR = (1<<TWEN);
    2fa8:	84 e0       	ldi	r24, 0x04	; 4
    2faa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    2fae:	08 95       	ret

00002fb0 <TWIStart>:
 
void TWIStart(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    2fb0:	84 ea       	ldi	r24, 0xA4	; 164
    2fb2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    2fb6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fba:	87 ff       	sbrs	r24, 7
    2fbc:	fc cf       	rjmp	.-8      	; 0x2fb6 <TWIStart+0x6>
}
    2fbe:	08 95       	ret

00002fc0 <TWIStop>:

void TWIStop(void)
{
	TWCR = ((1<<TWINT) | (1<<TWSTO) | (1<<TWEN));
    2fc0:	84 e9       	ldi	r24, 0x94	; 148
    2fc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
} 
    2fc6:	08 95       	ret

00002fc8 <TWIWrite>:

void TWIWrite(uint8_t u8data)
{
	TWDR = u8data;
    2fc8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = ((1<<TWINT) | (1<<TWEN));
    2fcc:	84 e8       	ldi	r24, 0x84	; 132
    2fce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    2fd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fd6:	87 ff       	sbrs	r24, 7
    2fd8:	fc cf       	rjmp	.-8      	; 0x2fd2 <TWIWrite+0xa>
}
    2fda:	08 95       	ret

00002fdc <TWIReadACK>:

uint8_t TWIReadACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN) | (1<<TWEA));
    2fdc:	84 ec       	ldi	r24, 0xC4	; 196
    2fde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    2fe2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2fe6:	87 ff       	sbrs	r24, 7
    2fe8:	fc cf       	rjmp	.-8      	; 0x2fe2 <TWIReadACK+0x6>
	return TWDR;
    2fea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    2fee:	08 95       	ret

00002ff0 <TWIReadNACK>:

uint8_t TWIReadNACK(void)
{
	TWCR = ((1<<TWINT) | (1<<TWEN));
    2ff0:	84 e8       	ldi	r24, 0x84	; 132
    2ff2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1<<TWINT)) == 0);
    2ff6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ffa:	87 ff       	sbrs	r24, 7
    2ffc:	fc cf       	rjmp	.-8      	; 0x2ff6 <TWIReadNACK+0x6>
	return TWDR;
    2ffe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
    3002:	08 95       	ret

00003004 <TWIGetStatus>:
	 *  0x38   Arbitration in SLA+W lost
	 */
	 
	uint8_t status;
	//mask status
	status = TWSR & 0xF8;
    3004:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	return status;
}
    3008:	88 7f       	andi	r24, 0xF8	; 248
    300a:	08 95       	ret

0000300c <read16>:
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
           (((uint16_t) p[0]) << 0);
}
    300c:	fc 01       	movw	r30, r24
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	08 95       	ret

00003014 <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	00 d0       	rcall	.+0      	; 0x301a <read32+0x6>
    301a:	00 d0       	rcall	.+0      	; 0x301c <read32+0x8>
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    return (((uint32_t) p[3]) << 24) |
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
    3020:	fc 01       	movw	r30, r24
    3022:	20 81       	ld	r18, Z
    3024:	31 81       	ldd	r19, Z+1	; 0x01
    3026:	42 81       	ldd	r20, Z+2	; 0x02
    3028:	53 81       	ldd	r21, Z+3	; 0x03
           (((uint32_t) p[0]) <<  0);
}
    302a:	ca 01       	movw	r24, r20
    302c:	b9 01       	movw	r22, r18
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	08 95       	ret

0000303c <write16>:
 * \param[in] i The 16-bit integer to write.
 */
void write16(uint8_t* p, uint16_t i)
{
    p[1] = (uint8_t) ((i & 0xff00) >> 8);
    p[0] = (uint8_t) ((i & 0x00ff) >> 0);
    303c:	fc 01       	movw	r30, r24
    303e:	71 83       	std	Z+1, r23	; 0x01
    3040:	60 83       	st	Z, r22
}
    3042:	08 95       	ret

00003044 <write32>:
void write32(uint8_t* p, uint32_t i)
{
    p[3] = (uint8_t) ((i & 0xff000000) >> 24);
    p[2] = (uint8_t) ((i & 0x00ff0000) >> 16);
    p[1] = (uint8_t) ((i & 0x0000ff00) >>  8);
    p[0] = (uint8_t) ((i & 0x000000ff) >>  0);
    3044:	fc 01       	movw	r30, r24
    3046:	40 83       	st	Z, r20
    3048:	51 83       	std	Z+1, r21	; 0x01
    304a:	62 83       	std	Z+2, r22	; 0x02
    304c:	73 83       	std	Z+3, r23	; 0x03
}
    304e:	08 95       	ret

00003050 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    3050:	80 e1       	ldi	r24, 0x10	; 16
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	08 95       	ret

00003056 <fat_calc_83_checksum>:
 *
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    3056:	9c 01       	movw	r18, r24
    uint8_t checksum = file_name_83[0];
    3058:	fc 01       	movw	r30, r24
    305a:	81 91       	ld	r24, Z+
    for(uint8_t i = 1; i < 11; ++i)
    305c:	25 5f       	subi	r18, 0xF5	; 245
    305e:	3f 4f       	sbci	r19, 0xFF	; 255
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    3060:	80 fb       	bst	r24, 0
    3062:	87 95       	ror	r24
    3064:	87 f9       	bld	r24, 7
    3066:	91 91       	ld	r25, Z+
    3068:	89 0f       	add	r24, r25
    for(uint8_t i = 1; i < 11; ++i)
    306a:	2e 17       	cp	r18, r30
    306c:	3f 07       	cpc	r19, r31
    306e:	c1 f7       	brne	.-16     	; 0x3060 <fat_calc_83_checksum+0xa>

    return checksum;
}
    3070:	08 95       	ret

00003072 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	7c 01       	movw	r14, r24
    3084:	e9 01       	movw	r28, r18
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;
    3086:	ca 80       	ldd	r12, Y+2	; 0x02
    3088:	db 80       	ldd	r13, Y+3	; 0x03

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    308a:	10 e0       	ldi	r17, 0x00	; 0
    308c:	00 e0       	ldi	r16, 0x00	; 0
    308e:	c7 01       	movw	r24, r14
    3090:	80 0f       	add	r24, r16
    3092:	91 1f       	adc	r25, r17
    3094:	0c 15       	cp	r16, r12
    3096:	1d 05       	cpc	r17, r13
    3098:	50 f0       	brcs	.+20     	; 0x30ae <fat_get_fs_free_16_callback+0x3c>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	08 95       	ret
        uint16_t cluster = read16(buffer);
    30ae:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    30b2:	89 2b       	or	r24, r25
    30b4:	29 f4       	brne	.+10     	; 0x30c0 <fat_get_fs_free_16_callback+0x4e>
            ++(count_arg->cluster_count);
    30b6:	88 81       	ld	r24, Y
    30b8:	99 81       	ldd	r25, Y+1	; 0x01
    30ba:	01 96       	adiw	r24, 0x01	; 1
    30bc:	99 83       	std	Y+1, r25	; 0x01
    30be:	88 83       	st	Y, r24
    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    30c0:	0e 5f       	subi	r16, 0xFE	; 254
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	e4 cf       	rjmp	.-56     	; 0x308e <fat_get_fs_free_16_callback+0x1c>

000030c6 <fat_dir_entry_read_callback>:
{
    30c6:	8f 92       	push	r8
    30c8:	9f 92       	push	r9
    30ca:	af 92       	push	r10
    30cc:	bf 92       	push	r11
    30ce:	cf 92       	push	r12
    30d0:	df 92       	push	r13
    30d2:	ef 92       	push	r14
    30d4:	ff 92       	push	r15
    30d6:	0f 93       	push	r16
    30d8:	1f 93       	push	r17
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
    30e2:	2d 97       	sbiw	r28, 0x0d	; 13
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	7c 01       	movw	r14, r24
    30f0:	4a 01       	movw	r8, r20
    30f2:	5b 01       	movw	r10, r22
    30f4:	69 01       	movw	r12, r18
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    30f6:	d9 01       	movw	r26, r18
    30f8:	0d 91       	ld	r16, X+
    30fa:	1c 91       	ld	r17, X
    30fc:	11 97       	sbiw	r26, 0x01	; 1
    arg->bytes_read += 32;
    30fe:	12 96       	adiw	r26, 0x02	; 2
    3100:	8d 91       	ld	r24, X+
    3102:	9c 91       	ld	r25, X
    3104:	13 97       	sbiw	r26, 0x03	; 3
    3106:	80 96       	adiw	r24, 0x20	; 32
    3108:	13 96       	adiw	r26, 0x03	; 3
    310a:	9c 93       	st	X, r25
    310c:	8e 93       	st	-X, r24
    310e:	12 97       	sbiw	r26, 0x02	; 2
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    3110:	f7 01       	movw	r30, r14
    3112:	80 81       	ld	r24, Z
    3114:	85 3e       	cpi	r24, 0xE5	; 229
    3116:	11 f0       	breq	.+4      	; 0x311c <fat_dir_entry_read_callback+0x56>
    3118:	81 11       	cpse	r24, r1
    311a:	17 c0       	rjmp	.+46     	; 0x314a <fat_dir_entry_read_callback+0x84>
        arg->checksum = 0;
    311c:	d6 01       	movw	r26, r12
    311e:	14 96       	adiw	r26, 0x04	; 4
    3120:	1c 92       	st	X, r1
        return 1;
    3122:	81 e0       	ldi	r24, 0x01	; 1
}
    3124:	2d 96       	adiw	r28, 0x0d	; 13
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	1f 91       	pop	r17
    3136:	0f 91       	pop	r16
    3138:	ff 90       	pop	r15
    313a:	ef 90       	pop	r14
    313c:	df 90       	pop	r13
    313e:	cf 90       	pop	r12
    3140:	bf 90       	pop	r11
    3142:	af 90       	pop	r10
    3144:	9f 90       	pop	r9
    3146:	8f 90       	pop	r8
    3148:	08 95       	ret
    if(buffer[11] == 0x0f)
    314a:	83 85       	ldd	r24, Z+11	; 0x0b
    314c:	8f 30       	cpi	r24, 0x0F	; 15
    314e:	09 f0       	breq	.+2      	; 0x3152 <fat_dir_entry_read_callback+0x8c>
    3150:	45 c0       	rjmp	.+138    	; 0x31dc <fat_dir_entry_read_callback+0x116>
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    3152:	14 96       	adiw	r26, 0x04	; 4
    3154:	8c 91       	ld	r24, X
    3156:	88 23       	and	r24, r24
    3158:	19 f0       	breq	.+6      	; 0x3160 <fat_dir_entry_read_callback+0x9a>
    315a:	95 85       	ldd	r25, Z+13	; 0x0d
    315c:	89 17       	cp	r24, r25
    315e:	b1 f0       	breq	.+44     	; 0x318c <fat_dir_entry_read_callback+0xc6>
            memset(dir_entry, 0, sizeof(*dir_entry));
    3160:	8b e2       	ldi	r24, 0x2B	; 43
    3162:	f8 01       	movw	r30, r16
    3164:	11 92       	st	Z+, r1
    3166:	8a 95       	dec	r24
    3168:	e9 f7       	brne	.-6      	; 0x3164 <fat_dir_entry_read_callback+0x9e>
            arg->checksum = buffer[13];
    316a:	d7 01       	movw	r26, r14
    316c:	1d 96       	adiw	r26, 0x0d	; 13
    316e:	8c 91       	ld	r24, X
    3170:	f6 01       	movw	r30, r12
    3172:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    3174:	d8 01       	movw	r26, r16
    3176:	97 96       	adiw	r26, 0x27	; 39
    3178:	8c 92       	st	X, r8
    317a:	97 97       	sbiw	r26, 0x27	; 39
    317c:	98 96       	adiw	r26, 0x28	; 40
    317e:	9c 92       	st	X, r9
    3180:	98 97       	sbiw	r26, 0x28	; 40
    3182:	99 96       	adiw	r26, 0x29	; 41
    3184:	ac 92       	st	X, r10
    3186:	99 97       	sbiw	r26, 0x29	; 41
    3188:	9a 96       	adiw	r26, 0x2a	; 42
    318a:	bc 92       	st	X, r11
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    318c:	f7 01       	movw	r30, r14
    318e:	20 81       	ld	r18, Z
    3190:	2f 73       	andi	r18, 0x3F	; 63
    3192:	21 50       	subi	r18, 0x01	; 1
    3194:	33 0b       	sbc	r19, r19
    3196:	4d e0       	ldi	r20, 0x0D	; 13
    3198:	42 9f       	mul	r20, r18
    319a:	c0 01       	movw	r24, r0
    319c:	43 9f       	mul	r20, r19
    319e:	90 0d       	add	r25, r0
    31a0:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    31a2:	ed e5       	ldi	r30, 0x5D	; 93
    31a4:	f2 e0       	ldi	r31, 0x02	; 2
    31a6:	de 01       	movw	r26, r28
    31a8:	11 96       	adiw	r26, 0x01	; 1
    31aa:	01 90       	ld	r0, Z+
    31ac:	0d 92       	st	X+, r0
    31ae:	4a 95       	dec	r20
    31b0:	e1 f7       	brne	.-8      	; 0x31aa <fat_dir_entry_read_callback+0xe4>
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    31b2:	fe 01       	movw	r30, r28
    31b4:	31 96       	adiw	r30, 0x01	; 1
    31b6:	2d e0       	ldi	r18, 0x0D	; 13
    31b8:	28 0f       	add	r18, r24
    31ba:	8f 31       	cpi	r24, 0x1F	; 31
    31bc:	91 05       	cpc	r25, r1
    31be:	08 f0       	brcs	.+2      	; 0x31c2 <fat_dir_entry_read_callback+0xfc>
    31c0:	b0 cf       	rjmp	.-160    	; 0x3122 <fat_dir_entry_read_callback+0x5c>
            long_name[char_offset + i] = buffer[char_mapping[i]];
    31c2:	a1 91       	ld	r26, Z+
    31c4:	ae 0d       	add	r26, r14
    31c6:	bf 2d       	mov	r27, r15
    31c8:	b1 1d       	adc	r27, r1
    31ca:	3c 91       	ld	r19, X
    31cc:	d8 01       	movw	r26, r16
    31ce:	a8 0f       	add	r26, r24
    31d0:	b9 1f       	adc	r27, r25
    31d2:	3c 93       	st	X, r19
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    31d4:	01 96       	adiw	r24, 0x01	; 1
    31d6:	28 13       	cpse	r18, r24
    31d8:	f0 cf       	rjmp	.-32     	; 0x31ba <fat_dir_entry_read_callback+0xf4>
    31da:	a3 cf       	rjmp	.-186    	; 0x3122 <fat_dir_entry_read_callback+0x5c>
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    31dc:	d8 01       	movw	r26, r16
    31de:	8c 91       	ld	r24, X
    31e0:	88 23       	and	r24, r24
    31e2:	41 f0       	breq	.+16     	; 0x31f4 <fat_dir_entry_read_callback+0x12e>
    31e4:	c7 01       	movw	r24, r14
    31e6:	0e 94 2b 18 	call	0x3056	; 0x3056 <fat_calc_83_checksum>
    31ea:	f6 01       	movw	r30, r12
    31ec:	94 81       	ldd	r25, Z+4	; 0x04
    31ee:	98 17       	cp	r25, r24
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <fat_dir_entry_read_callback+0x12e>
    31f2:	5c c0       	rjmp	.+184    	; 0x32ac <fat_dir_entry_read_callback+0x1e6>
            memset(dir_entry, 0, sizeof(*dir_entry));
    31f4:	8b e2       	ldi	r24, 0x2B	; 43
    31f6:	d8 01       	movw	r26, r16
    31f8:	1d 92       	st	X+, r1
    31fa:	8a 95       	dec	r24
    31fc:	e9 f7       	brne	.-6      	; 0x31f8 <fat_dir_entry_read_callback+0x132>
            dir_entry->entry_offset = offset;
    31fe:	f8 01       	movw	r30, r16
    3200:	87 a2       	std	Z+39, r8	; 0x27
    3202:	90 a6       	std	Z+40, r9	; 0x28
    3204:	a1 a6       	std	Z+41, r10	; 0x29
    3206:	b2 a6       	std	Z+42, r11	; 0x2a
            for(i = 0; i < 8; ++i)
    3208:	97 01       	movw	r18, r14
    320a:	b8 01       	movw	r22, r16
    320c:	e0 e0       	ldi	r30, 0x00	; 0
                if(buffer[i] == ' ')
    320e:	d9 01       	movw	r26, r18
    3210:	8d 91       	ld	r24, X+
    3212:	9d 01       	movw	r18, r26
    3214:	80 32       	cpi	r24, 0x20	; 32
    3216:	b9 f0       	breq	.+46     	; 0x3246 <fat_dir_entry_read_callback+0x180>
                long_name[i] = buffer[i];
    3218:	db 01       	movw	r26, r22
    321a:	8c 93       	st	X, r24
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    321c:	d7 01       	movw	r26, r14
    321e:	1c 96       	adiw	r26, 0x0c	; 12
    3220:	9c 91       	ld	r25, X
    3222:	93 ff       	sbrs	r25, 3
    3224:	0b c0       	rjmp	.+22     	; 0x323c <fat_dir_entry_read_callback+0x176>
    3226:	a9 01       	movw	r20, r18
    3228:	41 50       	subi	r20, 0x01	; 1
    322a:	51 09       	sbc	r21, r1
    322c:	da 01       	movw	r26, r20
    322e:	9c 91       	ld	r25, X
    3230:	91 54       	subi	r25, 0x41	; 65
    3232:	9a 31       	cpi	r25, 0x1A	; 26
    3234:	18 f4       	brcc	.+6      	; 0x323c <fat_dir_entry_read_callback+0x176>
                    long_name[i] += 'a' - 'A';
    3236:	80 5e       	subi	r24, 0xE0	; 224
    3238:	db 01       	movw	r26, r22
    323a:	8c 93       	st	X, r24
            for(i = 0; i < 8; ++i)
    323c:	ef 5f       	subi	r30, 0xFF	; 255
    323e:	6f 5f       	subi	r22, 0xFF	; 255
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	e8 30       	cpi	r30, 0x08	; 8
    3244:	21 f7       	brne	.-56     	; 0x320e <fat_dir_entry_read_callback+0x148>
            if(long_name[0] == 0x05)
    3246:	d8 01       	movw	r26, r16
    3248:	8c 91       	ld	r24, X
    324a:	85 30       	cpi	r24, 0x05	; 5
    324c:	11 f4       	brne	.+4      	; 0x3252 <fat_dir_entry_read_callback+0x18c>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    324e:	85 ee       	ldi	r24, 0xE5	; 229
    3250:	8c 93       	st	X, r24
            if(buffer[8] != ' ')
    3252:	d7 01       	movw	r26, r14
    3254:	18 96       	adiw	r26, 0x08	; 8
    3256:	8c 91       	ld	r24, X
    3258:	80 32       	cpi	r24, 0x20	; 32
    325a:	21 f1       	breq	.+72     	; 0x32a4 <fat_dir_entry_read_callback+0x1de>
                long_name[i++] = '.';
    325c:	d8 01       	movw	r26, r16
    325e:	ae 0f       	add	r26, r30
    3260:	b1 1d       	adc	r27, r1
    3262:	8e e2       	ldi	r24, 0x2E	; 46
    3264:	8c 93       	st	X, r24
                for(; j < 11; ++j)
    3266:	b7 01       	movw	r22, r14
    3268:	68 5f       	subi	r22, 0xF8	; 248
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	94 e0       	ldi	r25, 0x04	; 4
    326e:	9e 0f       	add	r25, r30
                long_name[i++] = '.';
    3270:	ef 5f       	subi	r30, 0xFF	; 255
                    if(buffer[j] == ' ')
    3272:	db 01       	movw	r26, r22
    3274:	8d 91       	ld	r24, X+
    3276:	bd 01       	movw	r22, r26
    3278:	98 01       	movw	r18, r16
    327a:	2e 0f       	add	r18, r30
    327c:	31 1d       	adc	r19, r1
    327e:	80 32       	cpi	r24, 0x20	; 32
    3280:	89 f0       	breq	.+34     	; 0x32a4 <fat_dir_entry_read_callback+0x1de>
                    long_name[i] = buffer[j];
    3282:	d9 01       	movw	r26, r18
    3284:	8c 93       	st	X, r24
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    3286:	d7 01       	movw	r26, r14
    3288:	1c 96       	adiw	r26, 0x0c	; 12
    328a:	4c 91       	ld	r20, X
    328c:	44 ff       	sbrs	r20, 4
    328e:	07 c0       	rjmp	.+14     	; 0x329e <fat_dir_entry_read_callback+0x1d8>
    3290:	4f eb       	ldi	r20, 0xBF	; 191
    3292:	48 0f       	add	r20, r24
    3294:	4a 31       	cpi	r20, 0x1A	; 26
    3296:	18 f4       	brcc	.+6      	; 0x329e <fat_dir_entry_read_callback+0x1d8>
                        long_name[i] += 'a' - 'A';
    3298:	80 5e       	subi	r24, 0xE0	; 224
    329a:	d9 01       	movw	r26, r18
    329c:	8c 93       	st	X, r24
                    ++i;
    329e:	ef 5f       	subi	r30, 0xFF	; 255
                for(; j < 11; ++j)
    32a0:	e9 13       	cpse	r30, r25
    32a2:	e7 cf       	rjmp	.-50     	; 0x3272 <fat_dir_entry_read_callback+0x1ac>
            long_name[i] = '\0';
    32a4:	e0 0f       	add	r30, r16
    32a6:	f1 2f       	mov	r31, r17
    32a8:	f1 1d       	adc	r31, r1
    32aa:	10 82       	st	Z, r1
        dir_entry->attributes = buffer[11];
    32ac:	f7 01       	movw	r30, r14
    32ae:	83 85       	ldd	r24, Z+11	; 0x0b
    32b0:	d8 01       	movw	r26, r16
    32b2:	90 96       	adiw	r26, 0x20	; 32
    32b4:	8c 93       	st	X, r24
        dir_entry->cluster = read16(&buffer[26]);
    32b6:	c7 01       	movw	r24, r14
    32b8:	4a 96       	adiw	r24, 0x1a	; 26
    32ba:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    32be:	f8 01       	movw	r30, r16
    32c0:	92 a3       	std	Z+34, r25	; 0x22
    32c2:	81 a3       	std	Z+33, r24	; 0x21
        dir_entry->file_size = read32(&buffer[28]);
    32c4:	c7 01       	movw	r24, r14
    32c6:	4c 96       	adiw	r24, 0x1c	; 28
    32c8:	0e 94 0a 18 	call	0x3014	; 0x3014 <read32>
    32cc:	d8 01       	movw	r26, r16
    32ce:	93 96       	adiw	r26, 0x23	; 35
    32d0:	6d 93       	st	X+, r22
    32d2:	7d 93       	st	X+, r23
    32d4:	8d 93       	st	X+, r24
    32d6:	9c 93       	st	X, r25
    32d8:	96 97       	sbiw	r26, 0x26	; 38
        arg->finished = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	f6 01       	movw	r30, r12
    32de:	85 83       	std	Z+5, r24	; 0x05
        return 0;
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	20 cf       	rjmp	.-448    	; 0x3124 <fat_dir_entry_read_callback+0x5e>

000032e4 <fat_get_next_cluster>:
{
    32e4:	0f 93       	push	r16
    32e6:	1f 93       	push	r17
    32e8:	cf 93       	push	r28
    32ea:	df 93       	push	r29
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <fat_get_next_cluster+0xa>
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <fat_get_next_cluster+0xc>
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <fat_get_next_cluster+0xe>
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    32f6:	fc 01       	movw	r30, r24
    32f8:	cb 01       	movw	r24, r22
    if(!fs || cluster_num < 2)
    32fa:	30 97       	sbiw	r30, 0x00	; 0
    32fc:	89 f1       	breq	.+98     	; 0x3360 <fat_get_next_cluster+0x7c>
    32fe:	62 30       	cpi	r22, 0x02	; 2
    3300:	71 05       	cpc	r23, r1
    3302:	70 f1       	brcs	.+92     	; 0x3360 <fat_get_next_cluster+0x7c>
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	a0 e0       	ldi	r26, 0x00	; 0
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	aa 1f       	adc	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	46 81       	ldd	r20, Z+6	; 0x06
    3312:	57 81       	ldd	r21, Z+7	; 0x07
    3314:	60 85       	ldd	r22, Z+8	; 0x08
    3316:	71 85       	ldd	r23, Z+9	; 0x09
    3318:	8c 01       	movw	r16, r24
    331a:	9d 01       	movw	r18, r26
    331c:	04 0f       	add	r16, r20
    331e:	15 1f       	adc	r17, r21
    3320:	26 1f       	adc	r18, r22
    3322:	37 1f       	adc	r19, r23
    3324:	0b 83       	std	Y+3, r16	; 0x03
    3326:	1c 83       	std	Y+4, r17	; 0x04
    3328:	2d 83       	std	Y+5, r18	; 0x05
    332a:	3e 83       	std	Y+6, r19	; 0x06
    332c:	01 90       	ld	r0, Z+
    332e:	f0 81       	ld	r31, Z
    3330:	e0 2d       	mov	r30, r0
    3332:	01 90       	ld	r0, Z+
    3334:	f0 81       	ld	r31, Z
    3336:	e0 2d       	mov	r30, r0
    3338:	22 e0       	ldi	r18, 0x02	; 2
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	ae 01       	movw	r20, r28
    333e:	4f 5f       	subi	r20, 0xFF	; 255
    3340:	5f 4f       	sbci	r21, 0xFF	; 255
    3342:	6b 81       	ldd	r22, Y+3	; 0x03
    3344:	7c 81       	ldd	r23, Y+4	; 0x04
    3346:	8d 81       	ldd	r24, Y+5	; 0x05
    3348:	9e 81       	ldd	r25, Y+6	; 0x06
    334a:	09 95       	icall
    334c:	88 23       	and	r24, r24
    334e:	41 f0       	breq	.+16     	; 0x3360 <fat_get_next_cluster+0x7c>
        cluster_num = ltoh16(fat_entry);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	9a 81       	ldd	r25, Y+2	; 0x02
        if(cluster_num == FAT16_CLUSTER_FREE ||
    3354:	9c 01       	movw	r18, r24
    3356:	21 50       	subi	r18, 0x01	; 1
    3358:	31 09       	sbc	r19, r1
    335a:	2f 3e       	cpi	r18, 0xEF	; 239
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	10 f0       	brcs	.+4      	; 0x3364 <fat_get_next_cluster+0x80>
        return 0;
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	80 e0       	ldi	r24, 0x00	; 0
}
    3364:	26 96       	adiw	r28, 0x06	; 6
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	df 91       	pop	r29
    3372:	cf 91       	pop	r28
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <fat_free_clusters>:
{
    337a:	af 92       	push	r10
    337c:	bf 92       	push	r11
    337e:	cf 92       	push	r12
    3380:	df 92       	push	r13
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	00 d0       	rcall	.+0      	; 0x3390 <fat_free_clusters+0x16>
    3390:	00 d0       	rcall	.+0      	; 0x3392 <fat_free_clusters+0x18>
    3392:	00 d0       	rcall	.+0      	; 0x3394 <fat_free_clusters+0x1a>
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	8c 01       	movw	r16, r24
    339a:	5b 01       	movw	r10, r22
    if(!fs || cluster_num < 2)
    339c:	00 97       	sbiw	r24, 0x00	; 0
    339e:	09 f4       	brne	.+2      	; 0x33a2 <fat_free_clusters+0x28>
    33a0:	66 c0       	rjmp	.+204    	; 0x346e <fat_free_clusters+0xf4>
    33a2:	62 30       	cpi	r22, 0x02	; 2
    33a4:	71 05       	cpc	r23, r1
    33a6:	08 f4       	brcc	.+2      	; 0x33aa <fat_free_clusters+0x30>
    33a8:	62 c0       	rjmp	.+196    	; 0x346e <fat_free_clusters+0xf4>
    offset_t fat_offset = fs->header.fat_offset;
    33aa:	dc 01       	movw	r26, r24
    33ac:	16 96       	adiw	r26, 0x06	; 6
    33ae:	cd 90       	ld	r12, X+
    33b0:	dd 90       	ld	r13, X+
    33b2:	ed 90       	ld	r14, X+
    33b4:	fc 90       	ld	r15, X
    33b6:	19 97       	sbiw	r26, 0x09	; 9
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    33b8:	c5 01       	movw	r24, r10
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	a0 e0       	ldi	r26, 0x00	; 0
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	aa 1f       	adc	r26, r26
    33c4:	bb 1f       	adc	r27, r27
    33c6:	9c 01       	movw	r18, r24
    33c8:	ad 01       	movw	r20, r26
    33ca:	2c 0d       	add	r18, r12
    33cc:	3d 1d       	adc	r19, r13
    33ce:	4e 1d       	adc	r20, r14
    33d0:	5f 1d       	adc	r21, r15
    33d2:	2b 83       	std	Y+3, r18	; 0x03
    33d4:	3c 83       	std	Y+4, r19	; 0x04
    33d6:	4d 83       	std	Y+5, r20	; 0x05
    33d8:	5e 83       	std	Y+6, r21	; 0x06
    33da:	d8 01       	movw	r26, r16
    33dc:	ed 91       	ld	r30, X+
    33de:	fc 91       	ld	r31, X
    33e0:	01 90       	ld	r0, Z+
    33e2:	f0 81       	ld	r31, Z
    33e4:	e0 2d       	mov	r30, r0
    33e6:	22 e0       	ldi	r18, 0x02	; 2
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	ae 01       	movw	r20, r28
    33ec:	4f 5f       	subi	r20, 0xFF	; 255
    33ee:	5f 4f       	sbci	r21, 0xFF	; 255
    33f0:	6b 81       	ldd	r22, Y+3	; 0x03
    33f2:	7c 81       	ldd	r23, Y+4	; 0x04
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	9e 81       	ldd	r25, Y+6	; 0x06
    33f8:	09 95       	icall
    33fa:	88 23       	and	r24, r24
    33fc:	39 f1       	breq	.+78     	; 0x344c <fat_free_clusters+0xd2>
            uint16_t cluster_num_next = ltoh16(fat_entry);
    33fe:	a9 80       	ldd	r10, Y+1	; 0x01
    3400:	ba 80       	ldd	r11, Y+2	; 0x02
            if(cluster_num_next == FAT16_CLUSTER_FREE)
    3402:	a1 14       	cp	r10, r1
    3404:	b1 04       	cpc	r11, r1
    3406:	09 f1       	breq	.+66     	; 0x344a <fat_free_clusters+0xd0>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    3408:	c5 01       	movw	r24, r10
    340a:	40 96       	adiw	r24, 0x10	; 16
    340c:	08 97       	sbiw	r24, 0x08	; 8
    340e:	78 f1       	brcs	.+94     	; 0x346e <fat_free_clusters+0xf4>
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    3410:	b8 ef       	ldi	r27, 0xF8	; 248
    3412:	ab 16       	cp	r10, r27
    3414:	bf ef       	ldi	r27, 0xFF	; 255
    3416:	bb 06       	cpc	r11, r27
    3418:	10 f0       	brcs	.+4      	; 0x341e <fat_free_clusters+0xa4>
                cluster_num_next = 0;
    341a:	b1 2c       	mov	r11, r1
    341c:	a1 2c       	mov	r10, r1
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    341e:	1a 82       	std	Y+2, r1	; 0x02
    3420:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    3422:	d8 01       	movw	r26, r16
    3424:	ed 91       	ld	r30, X+
    3426:	fc 91       	ld	r31, X
    3428:	04 80       	ldd	r0, Z+4	; 0x04
    342a:	f5 81       	ldd	r31, Z+5	; 0x05
    342c:	e0 2d       	mov	r30, r0
    342e:	22 e0       	ldi	r18, 0x02	; 2
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	ae 01       	movw	r20, r28
    3434:	4f 5f       	subi	r20, 0xFF	; 255
    3436:	5f 4f       	sbci	r21, 0xFF	; 255
    3438:	6b 81       	ldd	r22, Y+3	; 0x03
    343a:	7c 81       	ldd	r23, Y+4	; 0x04
    343c:	8d 81       	ldd	r24, Y+5	; 0x05
    343e:	9e 81       	ldd	r25, Y+6	; 0x06
    3440:	09 95       	icall
        while(cluster_num)
    3442:	a1 14       	cp	r10, r1
    3444:	b1 04       	cpc	r11, r1
    3446:	09 f0       	breq	.+2      	; 0x344a <fat_free_clusters+0xd0>
    3448:	b7 cf       	rjmp	.-146    	; 0x33b8 <fat_free_clusters+0x3e>
                return 1;
    344a:	81 e0       	ldi	r24, 0x01	; 1
}
    344c:	26 96       	adiw	r28, 0x06	; 6
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	de bf       	out	0x3e, r29	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	cd bf       	out	0x3d, r28	; 61
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	ff 90       	pop	r15
    3462:	ef 90       	pop	r14
    3464:	df 90       	pop	r13
    3466:	cf 90       	pop	r12
    3468:	bf 90       	pop	r11
    346a:	af 90       	pop	r10
    346c:	08 95       	ret
        return 0;
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	ed cf       	rjmp	.-38     	; 0x344c <fat_free_clusters+0xd2>

00003472 <fat_append_clusters>:
{
    3472:	2f 92       	push	r2
    3474:	3f 92       	push	r3
    3476:	4f 92       	push	r4
    3478:	5f 92       	push	r5
    347a:	6f 92       	push	r6
    347c:	7f 92       	push	r7
    347e:	8f 92       	push	r8
    3480:	9f 92       	push	r9
    3482:	af 92       	push	r10
    3484:	bf 92       	push	r11
    3486:	cf 92       	push	r12
    3488:	df 92       	push	r13
    348a:	ef 92       	push	r14
    348c:	ff 92       	push	r15
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	2c 97       	sbiw	r28, 0x0c	; 12
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	8c 01       	movw	r16, r24
    34a8:	1b 01       	movw	r2, r22
    34aa:	4a 01       	movw	r8, r20
    if(!fs)
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	e1 f4       	brne	.+56     	; 0x34e8 <fat_append_clusters+0x76>
    return 0;
    34b0:	d1 2c       	mov	r13, r1
    34b2:	c1 2c       	mov	r12, r1
}
    34b4:	c6 01       	movw	r24, r12
    34b6:	2c 96       	adiw	r28, 0x0c	; 12
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	af 90       	pop	r10
    34d6:	9f 90       	pop	r9
    34d8:	8f 90       	pop	r8
    34da:	7f 90       	pop	r7
    34dc:	6f 90       	pop	r6
    34de:	5f 90       	pop	r5
    34e0:	4f 90       	pop	r4
    34e2:	3f 90       	pop	r3
    34e4:	2f 90       	pop	r2
    34e6:	08 95       	ret
    device_read_t device_read = fs->partition->device_read;
    34e8:	dc 01       	movw	r26, r24
    34ea:	ed 91       	ld	r30, X+
    34ec:	fc 91       	ld	r31, X
    34ee:	11 97       	sbiw	r26, 0x01	; 1
    34f0:	20 81       	ld	r18, Z
    34f2:	31 81       	ldd	r19, Z+1	; 0x01
    34f4:	3a 87       	std	Y+10, r19	; 0x0a
    34f6:	29 87       	std	Y+9, r18	; 0x09
    device_write_t device_write = fs->partition->device_write;
    34f8:	44 81       	ldd	r20, Z+4	; 0x04
    34fa:	55 81       	ldd	r21, Z+5	; 0x05
    34fc:	58 87       	std	Y+8, r21	; 0x08
    34fe:	4f 83       	std	Y+7, r20	; 0x07
    offset_t fat_offset = fs->header.fat_offset;
    3500:	16 96       	adiw	r26, 0x06	; 6
    3502:	4d 90       	ld	r4, X+
    3504:	5d 90       	ld	r5, X+
    3506:	6d 90       	ld	r6, X+
    3508:	7c 90       	ld	r7, X
    350a:	19 97       	sbiw	r26, 0x09	; 9
    cluster_t cluster_current = fs->cluster_free;
    350c:	5a 96       	adiw	r26, 0x1a	; 26
    350e:	ed 90       	ld	r14, X+
    3510:	fc 90       	ld	r15, X
    3512:	5b 97       	sbiw	r26, 0x1b	; 27
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
    3514:	1a 96       	adiw	r26, 0x0a	; 10
    3516:	ad 90       	ld	r10, X+
    3518:	bd 90       	ld	r11, X+
    351a:	cd 90       	ld	r12, X+
    351c:	dc 90       	ld	r13, X
    351e:	1d 97       	sbiw	r26, 0x0d	; 13
    3520:	d6 94       	lsr	r13
    3522:	c7 94       	ror	r12
    3524:	b7 94       	ror	r11
    3526:	a7 94       	ror	r10
    3528:	bc 86       	std	Y+12, r11	; 0x0c
    352a:	ab 86       	std	Y+11, r10	; 0x0b
    fs->cluster_free = 0;
    352c:	5b 96       	adiw	r26, 0x1b	; 27
    352e:	1c 92       	st	X, r1
    3530:	1e 92       	st	-X, r1
    3532:	5a 97       	sbiw	r26, 0x1a	; 26
    cluster_t cluster_next = 0;
    3534:	d1 2c       	mov	r13, r1
    3536:	c1 2c       	mov	r12, r1
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    3538:	a1 14       	cp	r10, r1
    353a:	b1 04       	cpc	r11, r1
    353c:	19 f4       	brne	.+6      	; 0x3544 <fat_append_clusters+0xd2>
        if(count_left > 0)
    353e:	89 28       	or	r8, r9
    3540:	d1 f1       	breq	.+116    	; 0x35b6 <fat_append_clusters+0x144>
    3542:	75 c0       	rjmp	.+234    	; 0x362e <fat_append_clusters+0x1bc>
        if(cluster_current < 2 || cluster_current >= cluster_count)
    3544:	52 e0       	ldi	r21, 0x02	; 2
    3546:	e5 16       	cp	r14, r21
    3548:	f1 04       	cpc	r15, r1
    354a:	28 f0       	brcs	.+10     	; 0x3556 <fat_append_clusters+0xe4>
    354c:	8b 85       	ldd	r24, Y+11	; 0x0b
    354e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3550:	e8 16       	cp	r14, r24
    3552:	f9 06       	cpc	r15, r25
    3554:	18 f0       	brcs	.+6      	; 0x355c <fat_append_clusters+0xea>
            cluster_current = 2;
    3556:	42 e0       	ldi	r20, 0x02	; 2
    3558:	e4 2e       	mov	r14, r20
    355a:	f1 2c       	mov	r15, r1
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    355c:	c7 01       	movw	r24, r14
    355e:	b0 e0       	ldi	r27, 0x00	; 0
    3560:	a0 e0       	ldi	r26, 0x00	; 0
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	aa 1f       	adc	r26, r26
    3568:	bb 1f       	adc	r27, r27
    356a:	9c 01       	movw	r18, r24
    356c:	ad 01       	movw	r20, r26
    356e:	24 0d       	add	r18, r4
    3570:	35 1d       	adc	r19, r5
    3572:	46 1d       	adc	r20, r6
    3574:	57 1d       	adc	r21, r7
    3576:	2b 83       	std	Y+3, r18	; 0x03
    3578:	3c 83       	std	Y+4, r19	; 0x04
    357a:	4d 83       	std	Y+5, r20	; 0x05
    357c:	5e 83       	std	Y+6, r21	; 0x06
    357e:	22 e0       	ldi	r18, 0x02	; 2
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	ae 01       	movw	r20, r28
    3584:	4f 5f       	subi	r20, 0xFF	; 255
    3586:	5f 4f       	sbci	r21, 0xFF	; 255
    3588:	6b 81       	ldd	r22, Y+3	; 0x03
    358a:	7c 81       	ldd	r23, Y+4	; 0x04
    358c:	8d 81       	ldd	r24, Y+5	; 0x05
    358e:	9e 81       	ldd	r25, Y+6	; 0x06
    3590:	e9 85       	ldd	r30, Y+9	; 0x09
    3592:	fa 85       	ldd	r31, Y+10	; 0x0a
    3594:	09 95       	icall
    3596:	88 23       	and	r24, r24
    3598:	09 f4       	brne	.+2      	; 0x359c <fat_append_clusters+0x12a>
    359a:	8a cf       	rjmp	.-236    	; 0x34b0 <fat_append_clusters+0x3e>
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	89 2b       	or	r24, r25
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <fat_append_clusters+0x134>
    35a4:	50 c0       	rjmp	.+160    	; 0x3646 <fat_append_clusters+0x1d4>
            if(count_left == 0)
    35a6:	81 14       	cp	r8, r1
    35a8:	91 04       	cpc	r9, r1
    35aa:	61 f5       	brne	.+88     	; 0x3604 <fat_append_clusters+0x192>
                fs->cluster_free = cluster_current;
    35ac:	d8 01       	movw	r26, r16
    35ae:	5b 96       	adiw	r26, 0x1b	; 27
    35b0:	fc 92       	st	X, r15
    35b2:	ee 92       	st	-X, r14
    35b4:	5a 97       	sbiw	r26, 0x1a	; 26
        if(cluster_num >= 2)
    35b6:	42 e0       	ldi	r20, 0x02	; 2
    35b8:	24 16       	cp	r2, r20
    35ba:	31 04       	cpc	r3, r1
    35bc:	08 f4       	brcc	.+2      	; 0x35c0 <fat_append_clusters+0x14e>
    35be:	7a cf       	rjmp	.-268    	; 0x34b4 <fat_append_clusters+0x42>
                fat_entry16 = htol16((uint16_t) cluster_next);
    35c0:	da 82       	std	Y+2, r13	; 0x02
    35c2:	c9 82       	std	Y+1, r12	; 0x01
                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    35c4:	c1 01       	movw	r24, r2
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	a0 e0       	ldi	r26, 0x00	; 0
    35ca:	88 0f       	add	r24, r24
    35cc:	99 1f       	adc	r25, r25
    35ce:	aa 1f       	adc	r26, r26
    35d0:	bb 1f       	adc	r27, r27
    35d2:	9c 01       	movw	r18, r24
    35d4:	ad 01       	movw	r20, r26
    35d6:	24 0d       	add	r18, r4
    35d8:	35 1d       	adc	r19, r5
    35da:	46 1d       	adc	r20, r6
    35dc:	57 1d       	adc	r21, r7
    35de:	2b 83       	std	Y+3, r18	; 0x03
    35e0:	3c 83       	std	Y+4, r19	; 0x04
    35e2:	4d 83       	std	Y+5, r20	; 0x05
    35e4:	5e 83       	std	Y+6, r21	; 0x06
    35e6:	22 e0       	ldi	r18, 0x02	; 2
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	ae 01       	movw	r20, r28
    35ec:	4f 5f       	subi	r20, 0xFF	; 255
    35ee:	5f 4f       	sbci	r21, 0xFF	; 255
    35f0:	6b 81       	ldd	r22, Y+3	; 0x03
    35f2:	7c 81       	ldd	r23, Y+4	; 0x04
    35f4:	8d 81       	ldd	r24, Y+5	; 0x05
    35f6:	9e 81       	ldd	r25, Y+6	; 0x06
    35f8:	ef 81       	ldd	r30, Y+7	; 0x07
    35fa:	f8 85       	ldd	r31, Y+8	; 0x08
    35fc:	09 95       	icall
    35fe:	88 23       	and	r24, r24
    3600:	b1 f0       	breq	.+44     	; 0x362e <fat_append_clusters+0x1bc>
    3602:	58 cf       	rjmp	.-336    	; 0x34b4 <fat_append_clusters+0x42>
            if(cluster_next == 0)
    3604:	c1 14       	cp	r12, r1
    3606:	d1 04       	cpc	r13, r1
    3608:	b9 f4       	brne	.+46     	; 0x3638 <fat_append_clusters+0x1c6>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    360a:	ef ef       	ldi	r30, 0xFF	; 255
    360c:	ff ef       	ldi	r31, 0xFF	; 255
    360e:	fa 83       	std	Y+2, r31	; 0x02
    3610:	e9 83       	std	Y+1, r30	; 0x01
            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    3612:	22 e0       	ldi	r18, 0x02	; 2
    3614:	30 e0       	ldi	r19, 0x00	; 0
    3616:	ae 01       	movw	r20, r28
    3618:	4f 5f       	subi	r20, 0xFF	; 255
    361a:	5f 4f       	sbci	r21, 0xFF	; 255
    361c:	6b 81       	ldd	r22, Y+3	; 0x03
    361e:	7c 81       	ldd	r23, Y+4	; 0x04
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	ef 81       	ldd	r30, Y+7	; 0x07
    3626:	f8 85       	ldd	r31, Y+8	; 0x08
    3628:	09 95       	icall
    362a:	81 11       	cpse	r24, r1
    362c:	08 c0       	rjmp	.+16     	; 0x363e <fat_append_clusters+0x1cc>
    fat_free_clusters(fs, cluster_next);
    362e:	b6 01       	movw	r22, r12
    3630:	c8 01       	movw	r24, r16
    3632:	0e 94 bd 19 	call	0x337a	; 0x337a <fat_free_clusters>
    3636:	3c cf       	rjmp	.-392    	; 0x34b0 <fat_append_clusters+0x3e>
                fat_entry16 = htol16((uint16_t) cluster_next);
    3638:	da 82       	std	Y+2, r13	; 0x02
    363a:	c9 82       	std	Y+1, r12	; 0x01
    363c:	ea cf       	rjmp	.-44     	; 0x3612 <fat_append_clusters+0x1a0>
        --count_left;
    363e:	f1 e0       	ldi	r31, 0x01	; 1
    3640:	8f 1a       	sub	r8, r31
    3642:	91 08       	sbc	r9, r1
    3644:	67 01       	movw	r12, r14
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    3646:	21 e0       	ldi	r18, 0x01	; 1
    3648:	a2 1a       	sub	r10, r18
    364a:	b1 08       	sbc	r11, r1
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	e3 1a       	sub	r14, r19
    3650:	f3 0a       	sbc	r15, r19
    3652:	72 cf       	rjmp	.-284    	; 0x3538 <fat_append_clusters+0xc6>

00003654 <fat_cluster_offset>:
{
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	00 d0       	rcall	.+0      	; 0x365a <fat_cluster_offset+0x6>
    365a:	00 d0       	rcall	.+0      	; 0x365c <fat_cluster_offset+0x8>
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	fc 01       	movw	r30, r24
    3662:	9b 01       	movw	r18, r22
    if(!fs || cluster_num < 2)
    3664:	89 2b       	or	r24, r25
    3666:	41 f1       	breq	.+80     	; 0x36b8 <fat_cluster_offset+0x64>
    3668:	62 30       	cpi	r22, 0x02	; 2
    366a:	71 05       	cpc	r23, r1
    366c:	28 f1       	brcs	.+74     	; 0x36b8 <fat_cluster_offset+0x64>
    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    366e:	22 50       	subi	r18, 0x02	; 2
    3670:	31 09       	sbc	r19, r1
    3672:	a0 89       	ldd	r26, Z+16	; 0x10
    3674:	b1 89       	ldd	r27, Z+17	; 0x11
    3676:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    367a:	69 83       	std	Y+1, r22	; 0x01
    367c:	7a 83       	std	Y+2, r23	; 0x02
    367e:	8b 83       	std	Y+3, r24	; 0x03
    3680:	9c 83       	std	Y+4, r25	; 0x04
    3682:	82 89       	ldd	r24, Z+18	; 0x12
    3684:	93 89       	ldd	r25, Z+19	; 0x13
    3686:	a4 89       	ldd	r26, Z+20	; 0x14
    3688:	b5 89       	ldd	r27, Z+21	; 0x15
    368a:	29 81       	ldd	r18, Y+1	; 0x01
    368c:	3a 81       	ldd	r19, Y+2	; 0x02
    368e:	4b 81       	ldd	r20, Y+3	; 0x03
    3690:	5c 81       	ldd	r21, Y+4	; 0x04
    3692:	28 0f       	add	r18, r24
    3694:	39 1f       	adc	r19, r25
    3696:	4a 1f       	adc	r20, r26
    3698:	5b 1f       	adc	r21, r27
    369a:	29 83       	std	Y+1, r18	; 0x01
    369c:	3a 83       	std	Y+2, r19	; 0x02
    369e:	4b 83       	std	Y+3, r20	; 0x03
    36a0:	5c 83       	std	Y+4, r21	; 0x04
}
    36a2:	69 81       	ldd	r22, Y+1	; 0x01
    36a4:	7a 81       	ldd	r23, Y+2	; 0x02
    36a6:	8b 81       	ldd	r24, Y+3	; 0x03
    36a8:	9c 81       	ldd	r25, Y+4	; 0x04
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	08 95       	ret
        return 0;
    36b8:	19 82       	std	Y+1, r1	; 0x01
    36ba:	1a 82       	std	Y+2, r1	; 0x02
    36bc:	1b 82       	std	Y+3, r1	; 0x03
    36be:	1c 82       	std	Y+4, r1	; 0x04
    36c0:	f0 cf       	rjmp	.-32     	; 0x36a2 <fat_cluster_offset+0x4e>

000036c2 <fat_clear_cluster>:
{
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	60 97       	sbiw	r28, 0x10	; 16
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	8c 01       	movw	r16, r24
    if(cluster_num < 2)
    36e0:	62 30       	cpi	r22, 0x02	; 2
    36e2:	71 05       	cpc	r23, r1
    36e4:	28 f1       	brcs	.+74     	; 0x3730 <fat_clear_cluster+0x6e>
    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
    36e6:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fat_cluster_offset>
    memset(zero, 0, sizeof(zero));
    36ea:	ae 01       	movw	r20, r28
    36ec:	4f 5f       	subi	r20, 0xFF	; 255
    36ee:	5f 4f       	sbci	r21, 0xFF	; 255
    36f0:	20 e1       	ldi	r18, 0x10	; 16
    36f2:	da 01       	movw	r26, r20
    36f4:	1d 92       	st	X+, r1
    36f6:	2a 95       	dec	r18
    36f8:	e9 f7       	brne	.-6      	; 0x36f4 <fat_clear_cluster+0x32>
    return fs->partition->device_write_interval(cluster_offset,
    36fa:	f8 01       	movw	r30, r16
    36fc:	20 89       	ldd	r18, Z+16	; 0x10
    36fe:	31 89       	ldd	r19, Z+17	; 0x11
    3700:	01 90       	ld	r0, Z+
    3702:	f0 81       	ld	r31, Z
    3704:	e0 2d       	mov	r30, r0
    3706:	06 80       	ldd	r0, Z+6	; 0x06
    3708:	f7 81       	ldd	r31, Z+7	; 0x07
    370a:	e0 2d       	mov	r30, r0
    370c:	f1 2c       	mov	r15, r1
    370e:	e1 2c       	mov	r14, r1
    3710:	08 e2       	ldi	r16, 0x28	; 40
    3712:	18 e1       	ldi	r17, 0x18	; 24
    3714:	09 95       	icall
}
    3716:	60 96       	adiw	r28, 0x10	; 16
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	df 91       	pop	r29
    3724:	cf 91       	pop	r28
    3726:	1f 91       	pop	r17
    3728:	0f 91       	pop	r16
    372a:	ff 90       	pop	r15
    372c:	ef 90       	pop	r14
    372e:	08 95       	ret
        return 0;
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	f1 cf       	rjmp	.-30     	; 0x3716 <fat_clear_cluster+0x54>

00003734 <fat_find_offset_for_dir_entry.isra.0.part.0>:
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
    3734:	4f 92       	push	r4
    3736:	5f 92       	push	r5
    3738:	6f 92       	push	r6
    373a:	7f 92       	push	r7
    373c:	8f 92       	push	r8
    373e:	9f 92       	push	r9
    3740:	af 92       	push	r10
    3742:	bf 92       	push	r11
    3744:	cf 92       	push	r12
    3746:	df 92       	push	r13
    3748:	ef 92       	push	r14
    374a:	ff 92       	push	r15
    374c:	0f 93       	push	r16
    374e:	1f 93       	push	r17
    3750:	cf 93       	push	r28
    3752:	df 93       	push	r29
    3754:	00 d0       	rcall	.+0      	; 0x3756 <fat_find_offset_for_dir_entry.isra.0.part.0+0x22>
    3756:	00 d0       	rcall	.+0      	; 0x3758 <fat_find_offset_for_dir_entry.isra.0.part.0+0x24>
    3758:	0f 92       	push	r0
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	8c 01       	movw	r16, r24
    3760:	9b 01       	movw	r18, r22
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    3762:	fa 01       	movw	r30, r20
    3764:	01 90       	ld	r0, Z+
    3766:	00 20       	and	r0, r0
    3768:	e9 f7       	brne	.-6      	; 0x3764 <fat_find_offset_for_dir_entry.isra.0.part.0+0x30>
    376a:	cf 01       	movw	r24, r30
    376c:	84 1b       	sub	r24, r20
    376e:	95 0b       	sbc	r25, r21
    3770:	0b 96       	adiw	r24, 0x0b	; 11
    3772:	6d e0       	ldi	r22, 0x0D	; 13
    3774:	70 e0       	ldi	r23, 0x00	; 0
    3776:	0e 94 99 33 	call	0x6732	; 0x6732 <__udivmodhi4>
    377a:	88 24       	eor	r8, r8
    377c:	83 94       	inc	r8
    377e:	86 0e       	add	r8, r22
    cluster_t cluster_num = parent->dir_entry.cluster;
    3780:	d9 01       	movw	r26, r18
    3782:	ad 90       	ld	r10, X+
    3784:	bc 90       	ld	r11, X
    if(cluster_num == 0)
    3786:	a1 14       	cp	r10, r1
    3788:	b1 04       	cpc	r11, r1
    378a:	09 f0       	breq	.+2      	; 0x378e <fat_find_offset_for_dir_entry.isra.0.part.0+0x5a>
    378c:	64 c0       	rjmp	.+200    	; 0x3856 <fat_find_offset_for_dir_entry.isra.0.part.0+0x122>
            offset = fs->header.root_dir_offset;
    378e:	f8 01       	movw	r30, r16
    3790:	46 88       	ldd	r4, Z+22	; 0x16
    3792:	57 88       	ldd	r5, Z+23	; 0x17
    3794:	60 8c       	ldd	r6, Z+24	; 0x18
    3796:	71 8c       	ldd	r7, Z+25	; 0x19
            offset_to = fs->header.cluster_zero_offset;
    3798:	22 89       	ldd	r18, Z+18	; 0x12
    379a:	33 89       	ldd	r19, Z+19	; 0x13
    379c:	44 89       	ldd	r20, Z+20	; 0x14
    379e:	55 89       	ldd	r21, Z+21	; 0x15
    37a0:	2a 83       	std	Y+2, r18	; 0x02
    37a2:	3b 83       	std	Y+3, r19	; 0x03
    37a4:	4c 83       	std	Y+4, r20	; 0x04
    37a6:	5d 83       	std	Y+5, r21	; 0x05
    offset_t dir_entry_offset = 0;
    37a8:	73 01       	movw	r14, r6
    37aa:	62 01       	movw	r12, r4
    37ac:	91 2c       	mov	r9, r1
        if(offset == offset_to)
    37ae:	2a 81       	ldd	r18, Y+2	; 0x02
    37b0:	3b 81       	ldd	r19, Y+3	; 0x03
    37b2:	4c 81       	ldd	r20, Y+4	; 0x04
    37b4:	5d 81       	ldd	r21, Y+5	; 0x05
    37b6:	c2 16       	cp	r12, r18
    37b8:	d3 06       	cpc	r13, r19
    37ba:	e4 06       	cpc	r14, r20
    37bc:	f5 06       	cpc	r15, r21
    37be:	09 f0       	breq	.+2      	; 0x37c2 <fat_find_offset_for_dir_entry.isra.0.part.0+0x8e>
    37c0:	6a c0       	rjmp	.+212    	; 0x3896 <fat_find_offset_for_dir_entry.isra.0.part.0+0x162>
            if(cluster_num == 0)
    37c2:	a1 14       	cp	r10, r1
    37c4:	b1 04       	cpc	r11, r1
    37c6:	09 f4       	brne	.+2      	; 0x37ca <fat_find_offset_for_dir_entry.isra.0.part.0+0x96>
    37c8:	8d c0       	rjmp	.+282    	; 0x38e4 <fat_find_offset_for_dir_entry.isra.0.part.0+0x1b0>
            if(offset)
    37ca:	cd 28       	or	r12, r13
    37cc:	ce 28       	or	r12, r14
    37ce:	cf 28       	or	r12, r15
    37d0:	09 f4       	brne	.+2      	; 0x37d4 <fat_find_offset_for_dir_entry.isra.0.part.0+0xa0>
    37d2:	4a c0       	rjmp	.+148    	; 0x3868 <fat_find_offset_for_dir_entry.isra.0.part.0+0x134>
                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    37d4:	b5 01       	movw	r22, r10
    37d6:	c8 01       	movw	r24, r16
    37d8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
                if(!cluster_next)
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	09 f0       	breq	.+2      	; 0x37e2 <fat_find_offset_for_dir_entry.isra.0.part.0+0xae>
    37e0:	42 c0       	rjmp	.+132    	; 0x3866 <fat_find_offset_for_dir_entry.isra.0.part.0+0x132>
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    37e2:	41 e0       	ldi	r20, 0x01	; 1
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	b5 01       	movw	r22, r10
    37e8:	c8 01       	movw	r24, r16
    37ea:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
    37ee:	ac 01       	movw	r20, r24
                    if(!cluster_next)
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <fat_find_offset_for_dir_entry.isra.0.part.0+0xc2>
    37f4:	77 c0       	rjmp	.+238    	; 0x38e4 <fat_find_offset_for_dir_entry.isra.0.part.0+0x1b0>
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
    37f6:	9c 01       	movw	r18, r24
    37f8:	22 50       	subi	r18, 0x02	; 2
    37fa:	31 09       	sbc	r19, r1
    37fc:	f8 01       	movw	r30, r16
    37fe:	a0 89       	ldd	r26, Z+16	; 0x10
    3800:	b1 89       	ldd	r27, Z+17	; 0x11
    3802:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    3806:	6a 83       	std	Y+2, r22	; 0x02
    3808:	7b 83       	std	Y+3, r23	; 0x03
    380a:	8c 83       	std	Y+4, r24	; 0x04
    380c:	9d 83       	std	Y+5, r25	; 0x05
                    dir_entry_offset = fs->header.cluster_zero_offset +
    380e:	42 88       	ldd	r4, Z+18	; 0x12
    3810:	53 88       	ldd	r5, Z+19	; 0x13
    3812:	64 88       	ldd	r6, Z+20	; 0x14
    3814:	75 88       	ldd	r7, Z+21	; 0x15
    3816:	46 0e       	add	r4, r22
    3818:	57 1e       	adc	r5, r23
    381a:	68 1e       	adc	r6, r24
    381c:	79 1e       	adc	r7, r25
                    fat_clear_cluster(fs, cluster_next);
    381e:	ba 01       	movw	r22, r20
    3820:	c8 01       	movw	r24, r16
    3822:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <fat_clear_cluster>
}
    3826:	c3 01       	movw	r24, r6
    3828:	b2 01       	movw	r22, r4
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	ff 90       	pop	r15
    383e:	ef 90       	pop	r14
    3840:	df 90       	pop	r13
    3842:	cf 90       	pop	r12
    3844:	bf 90       	pop	r11
    3846:	af 90       	pop	r10
    3848:	9f 90       	pop	r9
    384a:	8f 90       	pop	r8
    384c:	7f 90       	pop	r7
    384e:	6f 90       	pop	r6
    3850:	5f 90       	pop	r5
    3852:	4f 90       	pop	r4
    3854:	08 95       	ret
    offset_t offset_to = 0;
    3856:	1a 82       	std	Y+2, r1	; 0x02
    3858:	1b 82       	std	Y+3, r1	; 0x03
    385a:	1c 82       	std	Y+4, r1	; 0x04
    385c:	1d 82       	std	Y+5, r1	; 0x05
    offset_t dir_entry_offset = 0;
    385e:	41 2c       	mov	r4, r1
    3860:	51 2c       	mov	r5, r1
    3862:	32 01       	movw	r6, r4
    3864:	a1 cf       	rjmp	.-190    	; 0x37a8 <fat_find_offset_for_dir_entry.isra.0.part.0+0x74>
    3866:	5c 01       	movw	r10, r24
            offset = fat_cluster_offset(fs, cluster_num);
    3868:	b5 01       	movw	r22, r10
    386a:	c8 01       	movw	r24, r16
    386c:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fat_cluster_offset>
    3870:	6b 01       	movw	r12, r22
    3872:	7c 01       	movw	r14, r24
            offset_to = offset + fs->header.cluster_size;
    3874:	d8 01       	movw	r26, r16
    3876:	50 96       	adiw	r26, 0x10	; 16
    3878:	8d 91       	ld	r24, X+
    387a:	9c 91       	ld	r25, X
    387c:	a7 01       	movw	r20, r14
    387e:	96 01       	movw	r18, r12
    3880:	28 0f       	add	r18, r24
    3882:	39 1f       	adc	r19, r25
    3884:	41 1d       	adc	r20, r1
    3886:	51 1d       	adc	r21, r1
    3888:	2a 83       	std	Y+2, r18	; 0x02
    388a:	3b 83       	std	Y+3, r19	; 0x03
    388c:	4c 83       	std	Y+4, r20	; 0x04
    388e:	5d 83       	std	Y+5, r21	; 0x05
            dir_entry_offset = offset;
    3890:	26 01       	movw	r4, r12
    3892:	37 01       	movw	r6, r14
            free_dir_entries_found = 0;
    3894:	91 2c       	mov	r9, r1
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    3896:	d8 01       	movw	r26, r16
    3898:	ed 91       	ld	r30, X+
    389a:	fc 91       	ld	r31, X
    389c:	01 90       	ld	r0, Z+
    389e:	f0 81       	ld	r31, Z
    38a0:	e0 2d       	mov	r30, r0
    38a2:	21 e0       	ldi	r18, 0x01	; 1
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	ae 01       	movw	r20, r28
    38a8:	4f 5f       	subi	r20, 0xFF	; 255
    38aa:	5f 4f       	sbci	r21, 0xFF	; 255
    38ac:	c7 01       	movw	r24, r14
    38ae:	b6 01       	movw	r22, r12
    38b0:	09 95       	icall
    38b2:	88 23       	and	r24, r24
    38b4:	b9 f0       	breq	.+46     	; 0x38e4 <fat_find_offset_for_dir_entry.isra.0.part.0+0x1b0>
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	85 3e       	cpi	r24, 0xE5	; 229
    38ba:	11 f0       	breq	.+4      	; 0x38c0 <fat_find_offset_for_dir_entry.isra.0.part.0+0x18c>
    38bc:	81 11       	cpse	r24, r1
    38be:	0a c0       	rjmp	.+20     	; 0x38d4 <fat_find_offset_for_dir_entry.isra.0.part.0+0x1a0>
            ++free_dir_entries_found;
    38c0:	93 94       	inc	r9
            if(free_dir_entries_found >= free_dir_entries_needed)
    38c2:	98 14       	cp	r9, r8
    38c4:	08 f0       	brcs	.+2      	; 0x38c8 <fat_find_offset_for_dir_entry.isra.0.part.0+0x194>
    38c6:	af cf       	rjmp	.-162    	; 0x3826 <fat_find_offset_for_dir_entry.isra.0.part.0+0xf2>
            offset += 32;
    38c8:	b0 e2       	ldi	r27, 0x20	; 32
    38ca:	cb 0e       	add	r12, r27
    38cc:	d1 1c       	adc	r13, r1
    38ce:	e1 1c       	adc	r14, r1
    38d0:	f1 1c       	adc	r15, r1
    38d2:	6d cf       	rjmp	.-294    	; 0x37ae <fat_find_offset_for_dir_entry.isra.0.part.0+0x7a>
            offset += 32;
    38d4:	26 01       	movw	r4, r12
    38d6:	37 01       	movw	r6, r14
    38d8:	e0 e2       	ldi	r30, 0x20	; 32
    38da:	4e 0e       	add	r4, r30
    38dc:	51 1c       	adc	r5, r1
    38de:	61 1c       	adc	r6, r1
    38e0:	71 1c       	adc	r7, r1
            free_dir_entries_found = 0;
    38e2:	62 cf       	rjmp	.-316    	; 0x37a8 <fat_find_offset_for_dir_entry.isra.0.part.0+0x74>
                return 0;
    38e4:	41 2c       	mov	r4, r1
    38e6:	51 2c       	mov	r5, r1
    38e8:	32 01       	movw	r6, r4
    38ea:	9d cf       	rjmp	.-198    	; 0x3826 <fat_find_offset_for_dir_entry.isra.0.part.0+0xf2>

000038ec <fat_write_dir_entry>:
{
    38ec:	4f 92       	push	r4
    38ee:	5f 92       	push	r5
    38f0:	6f 92       	push	r6
    38f2:	7f 92       	push	r7
    38f4:	9f 92       	push	r9
    38f6:	af 92       	push	r10
    38f8:	bf 92       	push	r11
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	cd b7       	in	r28, 0x3d	; 61
    390c:	de b7       	in	r29, 0x3e	; 62
    390e:	a4 97       	sbiw	r28, 0x24	; 36
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	fc 01       	movw	r30, r24
    391c:	8b 01       	movw	r16, r22
    if(!fs || !dir_entry)
    391e:	89 2b       	or	r24, r25
    3920:	09 f4       	brne	.+2      	; 0x3924 <fat_write_dir_entry+0x38>
    3922:	34 c1       	rjmp	.+616    	; 0x3b8c <fat_write_dir_entry+0x2a0>
    3924:	61 15       	cp	r22, r1
    3926:	71 05       	cpc	r23, r1
    3928:	09 f4       	brne	.+2      	; 0x392c <fat_write_dir_entry+0x40>
    392a:	30 c1       	rjmp	.+608    	; 0x3b8c <fat_write_dir_entry+0x2a0>
    device_write_t device_write = fs->partition->device_write;
    392c:	01 90       	ld	r0, Z+
    392e:	f0 81       	ld	r31, Z
    3930:	e0 2d       	mov	r30, r0
    3932:	a4 80       	ldd	r10, Z+4	; 0x04
    3934:	b5 80       	ldd	r11, Z+5	; 0x05
    offset_t offset = dir_entry->entry_offset;
    3936:	db 01       	movw	r26, r22
    3938:	97 96       	adiw	r26, 0x27	; 39
    393a:	4d 90       	ld	r4, X+
    393c:	5d 90       	ld	r5, X+
    393e:	6d 90       	ld	r6, X+
    3940:	7c 90       	ld	r7, X
    3942:	9a 97       	sbiw	r26, 0x2a	; 42
    uint8_t name_len = strlen(name);
    3944:	fb 01       	movw	r30, r22
    3946:	01 90       	ld	r0, Z+
    3948:	00 20       	and	r0, r0
    394a:	e9 f7       	brne	.-6      	; 0x3946 <fat_write_dir_entry+0x5a>
    394c:	31 97       	sbiw	r30, 0x01	; 1
    394e:	6f 01       	movw	r12, r30
    3950:	c6 1a       	sub	r12, r22
    3952:	d7 0a       	sbc	r13, r23
    3954:	ec 2c       	mov	r14, r12
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    3956:	c6 01       	movw	r24, r12
    3958:	99 27       	eor	r25, r25
    395a:	0c 96       	adiw	r24, 0x0c	; 12
    395c:	6d e0       	ldi	r22, 0x0D	; 13
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	0e 94 ad 33 	call	0x675a	; 0x675a <__divmodhi4>
    3964:	f6 2e       	mov	r15, r22
    memset(&buffer[0], ' ', 11);
    3966:	4b e0       	ldi	r20, 0x0B	; 11
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	60 e2       	ldi	r22, 0x20	; 32
    396c:	70 e0       	ldi	r23, 0x00	; 0
    396e:	ce 01       	movw	r24, r28
    3970:	01 96       	adiw	r24, 0x01	; 1
    3972:	0e 94 0c 34 	call	0x6818	; 0x6818 <memset>
    char* name_ext = strrchr(name, '.');
    3976:	6e e2       	ldi	r22, 0x2E	; 46
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	c8 01       	movw	r24, r16
    397c:	0e 94 44 34 	call	0x6888	; 0x6888 <strrchr>
    3980:	bc 01       	movw	r22, r24
    if(name_ext && *++name_ext)
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	c9 f0       	breq	.+50     	; 0x39b8 <fat_write_dir_entry+0xcc>
    3986:	fc 01       	movw	r30, r24
    3988:	81 81       	ldd	r24, Z+1	; 0x01
    398a:	88 23       	and	r24, r24
    398c:	a9 f0       	breq	.+42     	; 0x39b8 <fat_write_dir_entry+0xcc>
    398e:	6f 5f       	subi	r22, 0xFF	; 255
    3990:	7f 4f       	sbci	r23, 0xFF	; 255
        uint8_t name_ext_len = strlen(name_ext);
    3992:	fb 01       	movw	r30, r22
    3994:	01 90       	ld	r0, Z+
    3996:	00 20       	and	r0, r0
    3998:	e9 f7       	brne	.-6      	; 0x3994 <fat_write_dir_entry+0xa8>
    399a:	31 97       	sbiw	r30, 0x01	; 1
    399c:	e6 1b       	sub	r30, r22
    399e:	f7 0b       	sbc	r31, r23
        name_len -= name_ext_len + 1;
    39a0:	ca 94       	dec	r12
    39a2:	ec 2c       	mov	r14, r12
    39a4:	ee 1a       	sub	r14, r30
        memcpy(&buffer[8], name_ext, name_ext_len);
    39a6:	e4 30       	cpi	r30, 0x04	; 4
    39a8:	08 f0       	brcs	.+2      	; 0x39ac <fat_write_dir_entry+0xc0>
    39aa:	e3 e0       	ldi	r30, 0x03	; 3
    39ac:	4e 2f       	mov	r20, r30
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	ce 01       	movw	r24, r28
    39b2:	09 96       	adiw	r24, 0x09	; 9
    39b4:	0e 94 03 34 	call	0x6806	; 0x6806 <memcpy>
    if(name_len <= 8)
    39b8:	f8 e0       	ldi	r31, 0x08	; 8
    39ba:	fe 15       	cp	r31, r14
    39bc:	08 f4       	brcc	.+2      	; 0x39c0 <fat_write_dir_entry+0xd4>
    39be:	81 c0       	rjmp	.+258    	; 0x3ac2 <fat_write_dir_entry+0x1d6>
        memcpy(buffer, name, name_len);
    39c0:	4e 2d       	mov	r20, r14
    39c2:	50 e0       	ldi	r21, 0x00	; 0
    39c4:	b8 01       	movw	r22, r16
    39c6:	ce 01       	movw	r24, r28
    39c8:	01 96       	adiw	r24, 0x01	; 1
    39ca:	0e 94 03 34 	call	0x6806	; 0x6806 <memcpy>
        if(name[0] == '.' &&
    39ce:	d8 01       	movw	r26, r16
    39d0:	8c 91       	ld	r24, X
    39d2:	8e 32       	cpi	r24, 0x2E	; 46
    39d4:	51 f4       	brne	.+20     	; 0x39ea <fat_write_dir_entry+0xfe>
           ((name[1] == '.' && name[2] == '\0') ||
    39d6:	11 96       	adiw	r26, 0x01	; 1
    39d8:	8c 91       	ld	r24, X
    39da:	11 97       	sbiw	r26, 0x01	; 1
        if(name[0] == '.' &&
    39dc:	8e 32       	cpi	r24, 0x2E	; 46
    39de:	11 f4       	brne	.+4      	; 0x39e4 <fat_write_dir_entry+0xf8>
           ((name[1] == '.' && name[2] == '\0') ||
    39e0:	12 96       	adiw	r26, 0x02	; 2
    39e2:	8c 91       	ld	r24, X
    39e4:	88 23       	and	r24, r24
    39e6:	09 f4       	brne	.+2      	; 0x39ea <fat_write_dir_entry+0xfe>
    39e8:	87 c0       	rjmp	.+270    	; 0x3af8 <fat_write_dir_entry+0x20c>
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    39ea:	89 81       	ldd	r24, Y+1	; 0x01
    39ec:	85 3e       	cpi	r24, 0xE5	; 229
    39ee:	11 f4       	brne	.+4      	; 0x39f4 <fat_write_dir_entry+0x108>
        buffer[0] = 0x05;
    39f0:	85 e0       	ldi	r24, 0x05	; 5
    39f2:	89 83       	std	Y+1, r24	; 0x01
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    39f4:	fe 01       	movw	r30, r28
    39f6:	3d 96       	adiw	r30, 0x0d	; 13
    39f8:	84 e1       	ldi	r24, 0x14	; 20
    39fa:	df 01       	movw	r26, r30
    39fc:	1d 92       	st	X+, r1
    39fe:	8a 95       	dec	r24
    3a00:	e9 f7       	brne	.-6      	; 0x39fc <fat_write_dir_entry+0x110>
    buffer[0x0b] = dir_entry->attributes;
    3a02:	f8 01       	movw	r30, r16
    3a04:	80 a1       	ldd	r24, Z+32	; 0x20
    3a06:	8c 87       	std	Y+12, r24	; 0x0c
    write16(&buffer[0x1a], dir_entry->cluster);
    3a08:	61 a1       	ldd	r22, Z+33	; 0x21
    3a0a:	72 a1       	ldd	r23, Z+34	; 0x22
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	4b 96       	adiw	r24, 0x1b	; 27
    3a10:	0e 94 1e 18 	call	0x303c	; 0x303c <write16>
    write32(&buffer[0x1c], dir_entry->file_size);
    3a14:	d8 01       	movw	r26, r16
    3a16:	93 96       	adiw	r26, 0x23	; 35
    3a18:	4d 91       	ld	r20, X+
    3a1a:	5d 91       	ld	r21, X+
    3a1c:	6d 91       	ld	r22, X+
    3a1e:	7c 91       	ld	r23, X
    3a20:	96 97       	sbiw	r26, 0x26	; 38
    3a22:	ce 01       	movw	r24, r28
    3a24:	4d 96       	adiw	r24, 0x1d	; 29
    3a26:	0e 94 22 18 	call	0x3044	; 0x3044 <write32>
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    3a2a:	cf 2c       	mov	r12, r15
    3a2c:	d1 2c       	mov	r13, r1
    3a2e:	b0 e2       	ldi	r27, 0x20	; 32
    3a30:	fb 9e       	mul	r15, r27
    3a32:	c0 01       	movw	r24, r0
    3a34:	11 24       	eor	r1, r1
    3a36:	a3 01       	movw	r20, r6
    3a38:	92 01       	movw	r18, r4
    3a3a:	28 0f       	add	r18, r24
    3a3c:	39 1f       	adc	r19, r25
    3a3e:	41 1d       	adc	r20, r1
    3a40:	51 1d       	adc	r21, r1
    3a42:	29 a3       	std	Y+33, r18	; 0x21
    3a44:	3a a3       	std	Y+34, r19	; 0x22
    3a46:	4b a3       	std	Y+35, r20	; 0x23
    3a48:	5c a3       	std	Y+36, r21	; 0x24
    3a4a:	20 e2       	ldi	r18, 0x20	; 32
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	ae 01       	movw	r20, r28
    3a50:	4f 5f       	subi	r20, 0xFF	; 255
    3a52:	5f 4f       	sbci	r21, 0xFF	; 255
    3a54:	69 a1       	ldd	r22, Y+33	; 0x21
    3a56:	7a a1       	ldd	r23, Y+34	; 0x22
    3a58:	8b a1       	ldd	r24, Y+35	; 0x23
    3a5a:	9c a1       	ldd	r25, Y+36	; 0x24
    3a5c:	f5 01       	movw	r30, r10
    3a5e:	09 95       	icall
    3a60:	88 23       	and	r24, r24
    3a62:	c9 f0       	breq	.+50     	; 0x3a96 <fat_write_dir_entry+0x1aa>
    uint8_t checksum = fat_calc_83_checksum(buffer);
    3a64:	ce 01       	movw	r24, r28
    3a66:	01 96       	adiw	r24, 0x01	; 1
    3a68:	0e 94 2b 18 	call	0x3056	; 0x3056 <fat_calc_83_checksum>
    3a6c:	98 2e       	mov	r9, r24
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    3a6e:	f1 e0       	ldi	r31, 0x01	; 1
    3a70:	cf 1a       	sub	r12, r31
    3a72:	d1 08       	sbc	r13, r1
    3a74:	2d e0       	ldi	r18, 0x0D	; 13
    3a76:	2c 9d       	mul	r18, r12
    3a78:	c0 01       	movw	r24, r0
    3a7a:	2d 9d       	mul	r18, r13
    3a7c:	90 0d       	add	r25, r0
    3a7e:	11 24       	eor	r1, r1
    3a80:	08 0f       	add	r16, r24
    3a82:	19 1f       	adc	r17, r25
    3a84:	ef 2c       	mov	r14, r15
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    3a86:	df 2c       	mov	r13, r15
    3a88:	68 94       	set
    3a8a:	d6 f8       	bld	r13, 6
        buffer[0x0b] = 0x0f;
    3a8c:	8f e0       	ldi	r24, 0x0F	; 15
    3a8e:	c8 2e       	mov	r12, r24
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    3a90:	e1 10       	cpse	r14, r1
    3a92:	34 c0       	rjmp	.+104    	; 0x3afc <fat_write_dir_entry+0x210>
    return 1;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
}
    3a96:	a4 96       	adiw	r28, 0x24	; 36
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	df 91       	pop	r29
    3aa4:	cf 91       	pop	r28
    3aa6:	1f 91       	pop	r17
    3aa8:	0f 91       	pop	r16
    3aaa:	ff 90       	pop	r15
    3aac:	ef 90       	pop	r14
    3aae:	df 90       	pop	r13
    3ab0:	cf 90       	pop	r12
    3ab2:	bf 90       	pop	r11
    3ab4:	af 90       	pop	r10
    3ab6:	9f 90       	pop	r9
    3ab8:	7f 90       	pop	r7
    3aba:	6f 90       	pop	r6
    3abc:	5f 90       	pop	r5
    3abe:	4f 90       	pop	r4
    3ac0:	08 95       	ret
        memcpy(buffer, name, 8);
    3ac2:	86 e0       	ldi	r24, 0x06	; 6
    3ac4:	f8 01       	movw	r30, r16
    3ac6:	de 01       	movw	r26, r28
    3ac8:	11 96       	adiw	r26, 0x01	; 1
    3aca:	01 90       	ld	r0, Z+
    3acc:	0d 92       	st	X+, r0
    3ace:	8a 95       	dec	r24
    3ad0:	e1 f7       	brne	.-8      	; 0x3aca <fat_write_dir_entry+0x1de>
        uint8_t num = dir_entry->cluster & 0xff;
    3ad2:	f8 01       	movw	r30, r16
    3ad4:	81 a1       	ldd	r24, Z+33	; 0x21
        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3ad6:	98 2f       	mov	r25, r24
    3ad8:	92 95       	swap	r25
    3ada:	9f 70       	andi	r25, 0x0F	; 15
    3adc:	80 3a       	cpi	r24, 0xA0	; 160
    3ade:	40 f4       	brcc	.+16     	; 0x3af0 <fat_write_dir_entry+0x204>
    3ae0:	90 5d       	subi	r25, 0xD0	; 208
    3ae2:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
    3ae4:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    3ae6:	8a 30       	cpi	r24, 0x0A	; 10
    3ae8:	28 f4       	brcc	.+10     	; 0x3af4 <fat_write_dir_entry+0x208>
    3aea:	80 5d       	subi	r24, 0xD0	; 208
    3aec:	88 87       	std	Y+8, r24	; 0x08
    3aee:	7d cf       	rjmp	.-262    	; 0x39ea <fat_write_dir_entry+0xfe>
        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3af0:	9f 59       	subi	r25, 0x9F	; 159
    3af2:	f7 cf       	rjmp	.-18     	; 0x3ae2 <fat_write_dir_entry+0x1f6>
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    3af4:	8f 59       	subi	r24, 0x9F	; 159
    3af6:	fa cf       	rjmp	.-12     	; 0x3aec <fat_write_dir_entry+0x200>
            lfn_entry_count = 0;
    3af8:	f1 2c       	mov	r15, r1
    3afa:	77 cf       	rjmp	.-274    	; 0x39ea <fat_write_dir_entry+0xfe>
        memset(buffer, 0xff, sizeof(buffer));
    3afc:	40 e2       	ldi	r20, 0x20	; 32
    3afe:	50 e0       	ldi	r21, 0x00	; 0
    3b00:	6f ef       	ldi	r22, 0xFF	; 255
    3b02:	70 e0       	ldi	r23, 0x00	; 0
    3b04:	ce 01       	movw	r24, r28
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	0e 94 0c 34 	call	0x6818	; 0x6818 <memset>
    3b0c:	f8 01       	movw	r30, r16
        uint8_t i = 1;
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
            buffer[i++] = *long_name_curr;
    3b10:	41 e0       	ldi	r20, 0x01	; 1
    3b12:	49 0f       	add	r20, r25
    3b14:	81 91       	ld	r24, Z+
    3b16:	21 e0       	ldi	r18, 0x01	; 1
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	2c 0f       	add	r18, r28
    3b1c:	3d 1f       	adc	r19, r29
    3b1e:	29 0f       	add	r18, r25
    3b20:	31 1d       	adc	r19, r1
    3b22:	d9 01       	movw	r26, r18
    3b24:	8c 93       	st	X, r24
            buffer[i++] = 0;
    3b26:	9e 5f       	subi	r25, 0xFE	; 254
    3b28:	a1 e0       	ldi	r26, 0x01	; 1
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	ac 0f       	add	r26, r28
    3b2e:	bd 1f       	adc	r27, r29
    3b30:	a4 0f       	add	r26, r20
    3b32:	b1 1d       	adc	r27, r1
    3b34:	1c 92       	st	X, r1
            switch(i)
    3b36:	9b 30       	cpi	r25, 0x0B	; 11
    3b38:	19 f1       	breq	.+70     	; 0x3b80 <fat_write_dir_entry+0x294>
    3b3a:	9a 31       	cpi	r25, 0x1A	; 26
    3b3c:	19 f1       	breq	.+70     	; 0x3b84 <fat_write_dir_entry+0x298>
            if(!*long_name_curr++)
    3b3e:	df 01       	movw	r26, r30
    3b40:	11 97       	sbiw	r26, 0x01	; 1
    3b42:	8c 91       	ld	r24, X
    3b44:	88 23       	and	r24, r24
    3b46:	11 f0       	breq	.+4      	; 0x3b4c <fat_write_dir_entry+0x260>
        while(i < 0x1f)
    3b48:	9f 31       	cpi	r25, 0x1F	; 31
    3b4a:	10 f3       	brcs	.-60     	; 0x3b10 <fat_write_dir_entry+0x224>
        if(lfn_entry == lfn_entry_count)
    3b4c:	fe 14       	cp	r15, r14
    3b4e:	e1 f0       	breq	.+56     	; 0x3b88 <fat_write_dir_entry+0x29c>
        buffer[0x00] = lfn_entry;
    3b50:	e9 82       	std	Y+1, r14	; 0x01
        buffer[0x0b] = 0x0f;
    3b52:	cc 86       	std	Y+12, r12	; 0x0c
        buffer[0x0d] = checksum;
    3b54:	9e 86       	std	Y+14, r9	; 0x0e
        buffer[0x0c] = 0;
    3b56:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    3b58:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    3b5a:	1c 8e       	std	Y+28, r1	; 0x1c
        device_write(offset, buffer, sizeof(buffer));
    3b5c:	20 e2       	ldi	r18, 0x20	; 32
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	ae 01       	movw	r20, r28
    3b62:	4f 5f       	subi	r20, 0xFF	; 255
    3b64:	5f 4f       	sbci	r21, 0xFF	; 255
    3b66:	c3 01       	movw	r24, r6
    3b68:	b2 01       	movw	r22, r4
    3b6a:	f5 01       	movw	r30, r10
    3b6c:	09 95       	icall
        offset += sizeof(buffer);
    3b6e:	f0 e2       	ldi	r31, 0x20	; 32
    3b70:	4f 0e       	add	r4, r31
    3b72:	51 1c       	adc	r5, r1
    3b74:	61 1c       	adc	r6, r1
    3b76:	71 1c       	adc	r7, r1
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    3b78:	ea 94       	dec	r14
    3b7a:	0d 50       	subi	r16, 0x0D	; 13
    3b7c:	11 09       	sbc	r17, r1
    3b7e:	88 cf       	rjmp	.-240    	; 0x3a90 <fat_write_dir_entry+0x1a4>
                    i = 0x0e;
    3b80:	9e e0       	ldi	r25, 0x0E	; 14
    3b82:	dd cf       	rjmp	.-70     	; 0x3b3e <fat_write_dir_entry+0x252>
                    i = 0x1c;
    3b84:	9c e1       	ldi	r25, 0x1C	; 28
    3b86:	db cf       	rjmp	.-74     	; 0x3b3e <fat_write_dir_entry+0x252>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    3b88:	d9 82       	std	Y+1, r13	; 0x01
    3b8a:	e3 cf       	rjmp	.-58     	; 0x3b52 <fat_write_dir_entry+0x266>
        return 0;
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	83 cf       	rjmp	.-250    	; 0x3a96 <fat_write_dir_entry+0x1aa>

00003b90 <fat_open>:
{
    3b90:	2f 92       	push	r2
    3b92:	3f 92       	push	r3
    3b94:	4f 92       	push	r4
    3b96:	5f 92       	push	r5
    3b98:	6f 92       	push	r6
    3b9a:	7f 92       	push	r7
    3b9c:	8f 92       	push	r8
    3b9e:	9f 92       	push	r9
    3ba0:	af 92       	push	r10
    3ba2:	bf 92       	push	r11
    3ba4:	cf 92       	push	r12
    3ba6:	df 92       	push	r13
    3ba8:	ef 92       	push	r14
    3baa:	ff 92       	push	r15
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	cd b7       	in	r28, 0x3d	; 61
    3bb6:	de b7       	in	r29, 0x3e	; 62
    3bb8:	ae 97       	sbiw	r28, 0x2e	; 46
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	8c 01       	movw	r16, r24
    if(!partition ||
    3bc6:	00 97       	sbiw	r24, 0x00	; 0
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <fat_open+0x3c>
    3bca:	6b c1       	rjmp	.+726    	; 0x3ea2 <fat_open+0x312>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	14 96       	adiw	r26, 0x04	; 4
    3bd0:	8d 91       	ld	r24, X+
    3bd2:	9c 91       	ld	r25, X
    3bd4:	15 97       	sbiw	r26, 0x05	; 5
    3bd6:	89 2b       	or	r24, r25
    3bd8:	59 f0       	breq	.+22     	; 0x3bf0 <fat_open+0x60>
       !partition->device_write ||
    3bda:	16 96       	adiw	r26, 0x06	; 6
    3bdc:	8d 91       	ld	r24, X+
    3bde:	9c 91       	ld	r25, X
    3be0:	89 2b       	or	r24, r25
    3be2:	31 f0       	breq	.+12     	; 0x3bf0 <fat_open+0x60>
        if(!fs->partition)
    3be4:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <fat_fs_handles>
    3be8:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <fat_fs_handles+0x1>
    3bec:	89 2b       	or	r24, r25
    3bee:	91 f0       	breq	.+36     	; 0x3c14 <fat_open+0x84>
        return 0;
    3bf0:	10 e0       	ldi	r17, 0x00	; 0
    3bf2:	00 e0       	ldi	r16, 0x00	; 0
    3bf4:	56 c1       	rjmp	.+684    	; 0x3ea2 <fat_open+0x312>
        fs->partition = 0;
    3bf6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <fat_fs_handles+0x1>
    3bfa:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <fat_fs_handles>
        return 0;
    3bfe:	f8 cf       	rjmp	.-16     	; 0x3bf0 <fat_open+0x60>
        partition->type = PARTITION_TYPE_FAT32;
    3c00:	8b e0       	ldi	r24, 0x0B	; 11
    3c02:	d8 01       	movw	r26, r16
    3c04:	18 96       	adiw	r26, 0x08	; 8
    3c06:	8c 93       	st	X, r24
    3c08:	ba c0       	rjmp	.+372    	; 0x3d7e <fat_open+0x1ee>
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    3c0a:	82 e0       	ldi	r24, 0x02	; 2
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	a0 e0       	ldi	r26, 0x00	; 0
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	f5 c0       	rjmp	.+490    	; 0x3dfe <fat_open+0x26e>
    memset(fs, 0, sizeof(*fs));
    3c14:	e8 e5       	ldi	r30, 0x58	; 88
    3c16:	f3 e0       	ldi	r31, 0x03	; 3
    3c18:	8a e1       	ldi	r24, 0x1A	; 26
    3c1a:	df 01       	movw	r26, r30
    3c1c:	1d 92       	st	X+, r1
    3c1e:	8a 95       	dec	r24
    3c20:	e9 f7       	brne	.-6      	; 0x3c1c <fat_open+0x8c>
    fs->partition = partition;
    3c22:	10 93 57 03 	sts	0x0357, r17	; 0x800357 <fat_fs_handles+0x1>
    3c26:	00 93 56 03 	sts	0x0356, r16	; 0x800356 <fat_fs_handles>
    offset_t partition_offset = (offset_t) partition->offset * 512;
    3c2a:	f8 01       	movw	r30, r16
    3c2c:	41 84       	ldd	r4, Z+9	; 0x09
    3c2e:	52 84       	ldd	r5, Z+10	; 0x0a
    3c30:	63 84       	ldd	r6, Z+11	; 0x0b
    3c32:	74 84       	ldd	r7, Z+12	; 0x0c
    3c34:	89 e0       	ldi	r24, 0x09	; 9
    3c36:	44 0c       	add	r4, r4
    3c38:	55 1c       	adc	r5, r5
    3c3a:	66 1c       	adc	r6, r6
    3c3c:	77 1c       	adc	r7, r7
    3c3e:	8a 95       	dec	r24
    3c40:	d1 f7       	brne	.-12     	; 0x3c36 <fat_open+0xa6>
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    3c42:	a3 01       	movw	r20, r6
    3c44:	92 01       	movw	r18, r4
    3c46:	25 5f       	subi	r18, 0xF5	; 245
    3c48:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4a:	4f 4f       	sbci	r20, 0xFF	; 255
    3c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c4e:	2e 8f       	std	Y+30, r18	; 0x1e
    3c50:	3f 8f       	std	Y+31, r19	; 0x1f
    3c52:	48 a3       	std	Y+32, r20	; 0x20
    3c54:	59 a3       	std	Y+33, r21	; 0x21
    3c56:	01 90       	ld	r0, Z+
    3c58:	f0 81       	ld	r31, Z
    3c5a:	e0 2d       	mov	r30, r0
    3c5c:	29 e1       	ldi	r18, 0x19	; 25
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	ae 01       	movw	r20, r28
    3c62:	4f 5f       	subi	r20, 0xFF	; 255
    3c64:	5f 4f       	sbci	r21, 0xFF	; 255
    3c66:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3c68:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3c6a:	88 a1       	ldd	r24, Y+32	; 0x20
    3c6c:	99 a1       	ldd	r25, Y+33	; 0x21
    3c6e:	09 95       	icall
    3c70:	88 23       	and	r24, r24
    3c72:	09 f2       	breq	.-126    	; 0x3bf6 <fat_open+0x66>
    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    3c74:	ce 01       	movw	r24, r28
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    3c7c:	7c 01       	movw	r14, r24
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    3c7e:	ce 01       	movw	r24, r28
    3c80:	04 96       	adiw	r24, 0x04	; 4
    3c82:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    3c86:	6c 01       	movw	r12, r24
    uint8_t sectors_per_cluster = buffer[0x02];
    3c88:	bb 81       	ldd	r27, Y+3	; 0x03
    3c8a:	ba a7       	std	Y+42, r27	; 0x2a
    uint8_t fat_copies = buffer[0x05];
    3c8c:	ee 81       	ldd	r30, Y+6	; 0x06
    3c8e:	ea a3       	std	Y+34, r30	; 0x22
    uint16_t max_root_entries = read16(&buffer[0x06]);
    3c90:	ce 01       	movw	r24, r28
    3c92:	07 96       	adiw	r24, 0x07	; 7
    3c94:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    3c98:	8e 8f       	std	Y+30, r24	; 0x1e
    3c9a:	9f 8f       	std	Y+31, r25	; 0x1f
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    3c9c:	ce 01       	movw	r24, r28
    3c9e:	09 96       	adiw	r24, 0x09	; 9
    3ca0:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    3ca4:	1c 01       	movw	r2, r24
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    3ca6:	ce 01       	movw	r24, r28
    3ca8:	0c 96       	adiw	r24, 0x0c	; 12
    3caa:	0e 94 06 18 	call	0x300c	; 0x300c <read16>
    3cae:	8a 8f       	std	Y+26, r24	; 0x1a
    3cb0:	9b 8f       	std	Y+27, r25	; 0x1b
    uint32_t sector_count = read32(&buffer[0x15]);
    3cb2:	ce 01       	movw	r24, r28
    3cb4:	46 96       	adiw	r24, 0x16	; 22
    3cb6:	0e 94 0a 18 	call	0x3014	; 0x3014 <read32>
    3cba:	4b 01       	movw	r8, r22
    3cbc:	5c 01       	movw	r10, r24
    if(sector_count == 0)
    3cbe:	81 14       	cp	r8, r1
    3cc0:	91 04       	cpc	r9, r1
    3cc2:	a1 04       	cpc	r10, r1
    3cc4:	b1 04       	cpc	r11, r1
    3cc6:	39 f4       	brne	.+14     	; 0x3cd6 <fat_open+0x146>
        if(sector_count_16 == 0)
    3cc8:	21 14       	cp	r2, r1
    3cca:	31 04       	cpc	r3, r1
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <fat_open+0x140>
    3cce:	93 cf       	rjmp	.-218    	; 0x3bf6 <fat_open+0x66>
            sector_count = sector_count_16;
    3cd0:	41 01       	movw	r8, r2
    3cd2:	b1 2c       	mov	r11, r1
    3cd4:	a1 2c       	mov	r10, r1
    if(sectors_per_fat == 0)
    3cd6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3cd8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3cda:	23 2b       	or	r18, r19
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <fat_open+0x150>
    3cde:	8b cf       	rjmp	.-234    	; 0x3bf6 <fat_open+0x66>
                                 - (uint32_t) sectors_per_fat * fat_copies
    3ce0:	4a a1       	ldd	r20, Y+34	; 0x22
    3ce2:	24 2f       	mov	r18, r20
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3ce8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3cea:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    3cee:	6a a3       	std	Y+34, r22	; 0x22
    3cf0:	7b a3       	std	Y+35, r23	; 0x23
    3cf2:	8c a3       	std	Y+36, r24	; 0x24
    3cf4:	9d a3       	std	Y+37, r25	; 0x25
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    3cf6:	97 01       	movw	r18, r14
    3cf8:	21 50       	subi	r18, 0x01	; 1
    3cfa:	31 09       	sbc	r19, r1
    3cfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d00:	45 e0       	ldi	r20, 0x05	; 5
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	4a 95       	dec	r20
    3d08:	e1 f7       	brne	.-8      	; 0x3d02 <fat_open+0x172>
    3d0a:	82 0f       	add	r24, r18
    3d0c:	93 1f       	adc	r25, r19
    3d0e:	b7 01       	movw	r22, r14
    3d10:	0e 94 99 33 	call	0x6732	; 0x6732 <__udivmodhi4>
    uint32_t data_sector_count = sector_count
    3d14:	8a a1       	ldd	r24, Y+34	; 0x22
    3d16:	9b a1       	ldd	r25, Y+35	; 0x23
    3d18:	ac a1       	ldd	r26, Y+36	; 0x24
    3d1a:	bd a1       	ldd	r27, Y+37	; 0x25
    3d1c:	8c 0d       	add	r24, r12
    3d1e:	9d 1d       	adc	r25, r13
    3d20:	a1 1d       	adc	r26, r1
    3d22:	b1 1d       	adc	r27, r1
    3d24:	86 0f       	add	r24, r22
    3d26:	97 1f       	adc	r25, r23
    3d28:	a1 1d       	adc	r26, r1
    3d2a:	b1 1d       	adc	r27, r1
    3d2c:	a5 01       	movw	r20, r10
    3d2e:	94 01       	movw	r18, r8
    3d30:	28 1b       	sub	r18, r24
    3d32:	39 0b       	sbc	r19, r25
    3d34:	4a 0b       	sbc	r20, r26
    3d36:	5b 0b       	sbc	r21, r27
    3d38:	2a 8f       	std	Y+26, r18	; 0x1a
    3d3a:	3b 8f       	std	Y+27, r19	; 0x1b
    3d3c:	4c 8f       	std	Y+28, r20	; 0x1c
    3d3e:	5d 8f       	std	Y+29, r21	; 0x1d
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    3d40:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d42:	28 2f       	mov	r18, r24
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	50 e0       	ldi	r21, 0x00	; 0
    3d48:	40 e0       	ldi	r20, 0x00	; 0
    3d4a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3d4c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3d4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d52:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
    3d56:	2a 8f       	std	Y+26, r18	; 0x1a
    3d58:	3b 8f       	std	Y+27, r19	; 0x1b
    3d5a:	4c 8f       	std	Y+28, r20	; 0x1c
    3d5c:	5d 8f       	std	Y+29, r21	; 0x1d
    if(data_cluster_count < 4085)
    3d5e:	25 3f       	cpi	r18, 0xF5	; 245
    3d60:	9f e0       	ldi	r25, 0x0F	; 15
    3d62:	39 07       	cpc	r19, r25
    3d64:	41 05       	cpc	r20, r1
    3d66:	51 05       	cpc	r21, r1
    3d68:	08 f4       	brcc	.+2      	; 0x3d6c <fat_open+0x1dc>
    3d6a:	45 cf       	rjmp	.-374    	; 0x3bf6 <fat_open+0x66>
    else if(data_cluster_count < 65525)
    3d6c:	25 3f       	cpi	r18, 0xF5	; 245
    3d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d70:	41 05       	cpc	r20, r1
    3d72:	51 05       	cpc	r21, r1
    3d74:	08 f0       	brcs	.+2      	; 0x3d78 <fat_open+0x1e8>
    3d76:	44 cf       	rjmp	.-376    	; 0x3c00 <fat_open+0x70>
        partition->type = PARTITION_TYPE_FAT16;
    3d78:	86 e0       	ldi	r24, 0x06	; 6
    3d7a:	f8 01       	movw	r30, r16
    3d7c:	80 87       	std	Z+8, r24	; 0x08
    memset(header, 0, sizeof(*header));
    3d7e:	e0 e6       	ldi	r30, 0x60	; 96
    3d80:	f3 e0       	ldi	r31, 0x03	; 3
    3d82:	80 e1       	ldi	r24, 0x10	; 16
    3d84:	df 01       	movw	r26, r30
    3d86:	1d 92       	st	X+, r1
    3d88:	8a 95       	dec	r24
    3d8a:	e9 f7       	brne	.-6      	; 0x3d86 <fat_open+0x1f6>
    header->size = (offset_t) sector_count * bytes_per_sector;
    3d8c:	97 01       	movw	r18, r14
    3d8e:	50 e0       	ldi	r21, 0x00	; 0
    3d90:	40 e0       	ldi	r20, 0x00	; 0
    3d92:	2b a7       	std	Y+43, r18	; 0x2b
    3d94:	3c a7       	std	Y+44, r19	; 0x2c
    3d96:	4d a7       	std	Y+45, r20	; 0x2d
    3d98:	5e a7       	std	Y+46, r21	; 0x2e
    3d9a:	d7 01       	movw	r26, r14
    3d9c:	a5 01       	movw	r20, r10
    3d9e:	94 01       	movw	r18, r8
    3da0:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <__muluhisi3>
    3da4:	60 93 58 03 	sts	0x0358, r22	; 0x800358 <fat_fs_handles+0x2>
    3da8:	70 93 59 03 	sts	0x0359, r23	; 0x800359 <fat_fs_handles+0x3>
    3dac:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <fat_fs_handles+0x4>
    3db0:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <fat_fs_handles+0x5>
                         (offset_t) reserved_sectors * bytes_per_sector;
    3db4:	96 01       	movw	r18, r12
    3db6:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    3dba:	6e a3       	std	Y+38, r22	; 0x26
    3dbc:	7f a3       	std	Y+39, r23	; 0x27
    3dbe:	88 a7       	std	Y+40, r24	; 0x28
    3dc0:	99 a7       	std	Y+41, r25	; 0x29
                         partition_offset +
    3dc2:	46 0e       	add	r4, r22
    3dc4:	57 1e       	adc	r5, r23
    3dc6:	68 1e       	adc	r6, r24
    3dc8:	79 1e       	adc	r7, r25
    header->fat_offset = /* jump to partition */
    3dca:	40 92 5c 03 	sts	0x035C, r4	; 0x80035c <fat_fs_handles+0x6>
    3dce:	50 92 5d 03 	sts	0x035D, r5	; 0x80035d <fat_fs_handles+0x7>
    3dd2:	60 92 5e 03 	sts	0x035E, r6	; 0x80035e <fat_fs_handles+0x8>
    3dd6:	70 92 5f 03 	sts	0x035F, r7	; 0x80035f <fat_fs_handles+0x9>
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    3dda:	2a 8d       	ldd	r18, Y+26	; 0x1a
    3ddc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3dde:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3de0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    3de2:	2e 5f       	subi	r18, 0xFE	; 254
    3de4:	3f 4f       	sbci	r19, 0xFF	; 255
    3de6:	4f 4f       	sbci	r20, 0xFF	; 255
    3de8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dea:	d8 01       	movw	r26, r16
    3dec:	18 96       	adiw	r26, 0x08	; 8
    3dee:	8c 91       	ld	r24, X
    3df0:	86 30       	cpi	r24, 0x06	; 6
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <fat_open+0x266>
    3df4:	0a cf       	rjmp	.-492    	; 0x3c0a <fat_open+0x7a>
    3df6:	84 e0       	ldi	r24, 0x04	; 4
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	a0 e0       	ldi	r26, 0x00	; 0
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	8a 8f       	std	Y+26, r24	; 0x1a
    3e00:	9b 8f       	std	Y+27, r25	; 0x1b
    3e02:	ac 8f       	std	Y+28, r26	; 0x1c
    3e04:	bd 8f       	std	Y+29, r27	; 0x1d
    3e06:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e08:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e0e:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
    3e12:	60 93 60 03 	sts	0x0360, r22	; 0x800360 <fat_fs_handles+0xa>
    3e16:	70 93 61 03 	sts	0x0361, r23	; 0x800361 <fat_fs_handles+0xb>
    3e1a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <fat_fs_handles+0xc>
    3e1e:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <fat_fs_handles+0xd>
    header->sector_size = bytes_per_sector;
    3e22:	f0 92 65 03 	sts	0x0365, r15	; 0x800365 <fat_fs_handles+0xf>
    3e26:	e0 92 64 03 	sts	0x0364, r14	; 0x800364 <fat_fs_handles+0xe>
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    3e2a:	aa a5       	ldd	r26, Y+42	; 0x2a
    3e2c:	ae 9d       	mul	r26, r14
    3e2e:	c0 01       	movw	r24, r0
    3e30:	af 9d       	mul	r26, r15
    3e32:	90 0d       	add	r25, r0
    3e34:	11 24       	eor	r1, r1
    3e36:	90 93 67 03 	sts	0x0367, r25	; 0x800367 <fat_fs_handles+0x11>
    3e3a:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <fat_fs_handles+0x10>
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    3e3e:	2a a1       	ldd	r18, Y+34	; 0x22
    3e40:	3b a1       	ldd	r19, Y+35	; 0x23
    3e42:	4c a1       	ldd	r20, Y+36	; 0x24
    3e44:	5d a1       	ldd	r21, Y+37	; 0x25
    3e46:	6b a5       	ldd	r22, Y+43	; 0x2b
    3e48:	7c a5       	ldd	r23, Y+44	; 0x2c
    3e4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e4e:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
                                  header->fat_offset +
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	84 0d       	add	r24, r4
    3e58:	95 1d       	adc	r25, r5
    3e5a:	a6 1d       	adc	r26, r6
    3e5c:	b7 1d       	adc	r27, r7
        header->root_dir_offset = /* jump to fats */
    3e5e:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <fat_fs_handles+0x16>
    3e62:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <fat_fs_handles+0x17>
    3e66:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <fat_fs_handles+0x18>
    3e6a:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <fat_fs_handles+0x19>
                                      (offset_t) max_root_entries * 32;
    3e6e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3e70:	ff 8d       	ldd	r31, Y+31	; 0x1f
    3e72:	2f 01       	movw	r4, r30
    3e74:	71 2c       	mov	r7, r1
    3e76:	61 2c       	mov	r6, r1
    3e78:	25 e0       	ldi	r18, 0x05	; 5
    3e7a:	44 0c       	add	r4, r4
    3e7c:	55 1c       	adc	r5, r5
    3e7e:	66 1c       	adc	r6, r6
    3e80:	77 1c       	adc	r7, r7
    3e82:	2a 95       	dec	r18
    3e84:	d1 f7       	brne	.-12     	; 0x3e7a <fat_open+0x2ea>
                                      header->root_dir_offset +
    3e86:	84 0d       	add	r24, r4
    3e88:	95 1d       	adc	r25, r5
    3e8a:	a6 1d       	adc	r26, r6
    3e8c:	b7 1d       	adc	r27, r7
        header->cluster_zero_offset = /* jump to root directory entries */
    3e8e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <fat_fs_handles+0x12>
    3e92:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <fat_fs_handles+0x13>
    3e96:	a0 93 6a 03 	sts	0x036A, r26	; 0x80036a <fat_fs_handles+0x14>
    3e9a:	b0 93 6b 03 	sts	0x036B, r27	; 0x80036b <fat_fs_handles+0x15>
    struct fat_fs_struct* fs = fat_fs_handles;
    3e9e:	06 e5       	ldi	r16, 0x56	; 86
    3ea0:	13 e0       	ldi	r17, 0x03	; 3
}
    3ea2:	c8 01       	movw	r24, r16
    3ea4:	ae 96       	adiw	r28, 0x2e	; 46
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	cf 90       	pop	r12
    3ec0:	bf 90       	pop	r11
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	7f 90       	pop	r7
    3eca:	6f 90       	pop	r6
    3ecc:	5f 90       	pop	r5
    3ece:	4f 90       	pop	r4
    3ed0:	3f 90       	pop	r3
    3ed2:	2f 90       	pop	r2
    3ed4:	08 95       	ret

00003ed6 <fat_close>:
{
    3ed6:	fc 01       	movw	r30, r24
    if(!fs)
    3ed8:	89 2b       	or	r24, r25
    3eda:	11 f0       	breq	.+4      	; 0x3ee0 <fat_close+0xa>
    fs->partition = 0;
    3edc:	11 82       	std	Z+1, r1	; 0x01
    3ede:	10 82       	st	Z, r1
}
    3ee0:	08 95       	ret

00003ee2 <fat_open_file>:
{
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	eb 01       	movw	r28, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    3ee8:	00 97       	sbiw	r24, 0x00	; 0
    3eea:	69 f0       	breq	.+26     	; 0x3f06 <fat_open_file+0x24>
    3eec:	20 97       	sbiw	r28, 0x00	; 0
    3eee:	49 f0       	breq	.+18     	; 0x3f02 <fat_open_file+0x20>
    3ef0:	28 a1       	ldd	r18, Y+32	; 0x20
    3ef2:	24 fd       	sbrc	r18, 4
    3ef4:	06 c0       	rjmp	.+12     	; 0x3f02 <fat_open_file+0x20>
        if(!fd->fs)
    3ef6:	20 91 23 03 	lds	r18, 0x0323	; 0x800323 <fat_file_handles>
    3efa:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <fat_file_handles+0x1>
    3efe:	23 2b       	or	r18, r19
    3f00:	29 f0       	breq	.+10     	; 0x3f0c <fat_open_file+0x2a>
        return 0;
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	80 e0       	ldi	r24, 0x00	; 0
}
    3f06:	df 91       	pop	r29
    3f08:	cf 91       	pop	r28
    3f0a:	08 95       	ret
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    3f0c:	2b e2       	ldi	r18, 0x2B	; 43
    3f0e:	fb 01       	movw	r30, r22
    3f10:	a5 e2       	ldi	r26, 0x25	; 37
    3f12:	b3 e0       	ldi	r27, 0x03	; 3
    3f14:	01 90       	ld	r0, Z+
    3f16:	0d 92       	st	X+, r0
    3f18:	2a 95       	dec	r18
    3f1a:	e1 f7       	brne	.-8      	; 0x3f14 <fat_open_file+0x32>
    fd->fs = fs;
    3f1c:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <fat_file_handles+0x1>
    3f20:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <fat_file_handles>
    fd->pos = 0;
    3f24:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <fat_file_handles+0x2d>
    3f28:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <fat_file_handles+0x2e>
    3f2c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <fat_file_handles+0x2f>
    3f30:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <fat_file_handles+0x30>
    fd->pos_cluster = dir_entry->cluster;
    3f34:	89 a1       	ldd	r24, Y+33	; 0x21
    3f36:	9a a1       	ldd	r25, Y+34	; 0x22
    3f38:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <fat_file_handles+0x32>
    3f3c:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <fat_file_handles+0x31>
    struct fat_file_struct* fd = fat_file_handles;
    3f40:	83 e2       	ldi	r24, 0x23	; 35
    3f42:	93 e0       	ldi	r25, 0x03	; 3
    return fd;
    3f44:	e0 cf       	rjmp	.-64     	; 0x3f06 <fat_open_file+0x24>

00003f46 <fat_close_file>:
{
    3f46:	fc 01       	movw	r30, r24
    if(fd)
    3f48:	89 2b       	or	r24, r25
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <fat_close_file+0xa>
        fd->fs = 0;
    3f4c:	11 82       	std	Z+1, r1	; 0x01
    3f4e:	10 82       	st	Z, r1
}
    3f50:	08 95       	ret

00003f52 <fat_read_file>:
{
    3f52:	2f 92       	push	r2
    3f54:	3f 92       	push	r3
    3f56:	4f 92       	push	r4
    3f58:	5f 92       	push	r5
    3f5a:	6f 92       	push	r6
    3f5c:	7f 92       	push	r7
    3f5e:	8f 92       	push	r8
    3f60:	9f 92       	push	r9
    3f62:	af 92       	push	r10
    3f64:	bf 92       	push	r11
    3f66:	cf 92       	push	r12
    3f68:	df 92       	push	r13
    3f6a:	ef 92       	push	r14
    3f6c:	ff 92       	push	r15
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	cf 93       	push	r28
    3f74:	df 93       	push	r29
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <fat_read_file+0x26>
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <fat_read_file+0x28>
    3f7a:	00 d0       	rcall	.+0      	; 0x3f7c <fat_read_file+0x2a>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	8c 01       	movw	r16, r24
    3f82:	6b 01       	movw	r12, r22
    3f84:	4d 83       	std	Y+5, r20	; 0x05
    3f86:	5e 83       	std	Y+6, r21	; 0x06
    if(!fd || !buffer || buffer_len < 1)
    3f88:	89 2b       	or	r24, r25
    3f8a:	f9 f4       	brne	.+62     	; 0x3fca <fat_read_file+0x78>
        return -1;
    3f8c:	2f ef       	ldi	r18, 0xFF	; 255
    3f8e:	3f ef       	ldi	r19, 0xFF	; 255
            if(!fd->pos)
    3f90:	3a 83       	std	Y+2, r19	; 0x02
    3f92:	29 83       	std	Y+1, r18	; 0x01
}
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
    3f98:	26 96       	adiw	r28, 0x06	; 6
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	df 91       	pop	r29
    3fa6:	cf 91       	pop	r28
    3fa8:	1f 91       	pop	r17
    3faa:	0f 91       	pop	r16
    3fac:	ff 90       	pop	r15
    3fae:	ef 90       	pop	r14
    3fb0:	df 90       	pop	r13
    3fb2:	cf 90       	pop	r12
    3fb4:	bf 90       	pop	r11
    3fb6:	af 90       	pop	r10
    3fb8:	9f 90       	pop	r9
    3fba:	8f 90       	pop	r8
    3fbc:	7f 90       	pop	r7
    3fbe:	6f 90       	pop	r6
    3fc0:	5f 90       	pop	r5
    3fc2:	4f 90       	pop	r4
    3fc4:	3f 90       	pop	r3
    3fc6:	2f 90       	pop	r2
    3fc8:	08 95       	ret
    if(!fd || !buffer || buffer_len < 1)
    3fca:	67 2b       	or	r22, r23
    3fcc:	f9 f2       	breq	.-66     	; 0x3f8c <fat_read_file+0x3a>
    3fce:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd2:	89 2b       	or	r24, r25
    3fd4:	d9 f2       	breq	.-74     	; 0x3f8c <fat_read_file+0x3a>
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    3fd6:	d8 01       	movw	r26, r16
    3fd8:	9d 96       	adiw	r26, 0x2d	; 45
    3fda:	8d 90       	ld	r8, X+
    3fdc:	9d 90       	ld	r9, X+
    3fde:	ad 90       	ld	r10, X+
    3fe0:	bc 90       	ld	r11, X
    3fe2:	d0 97       	sbiw	r26, 0x30	; 48
    3fe4:	95 96       	adiw	r26, 0x25	; 37
    3fe6:	8d 91       	ld	r24, X+
    3fe8:	9d 91       	ld	r25, X+
    3fea:	0d 90       	ld	r0, X+
    3fec:	bc 91       	ld	r27, X
    3fee:	a0 2d       	mov	r26, r0
    3ff0:	9a 82       	std	Y+2, r9	; 0x02
    3ff2:	89 82       	std	Y+1, r8	; 0x01
    3ff4:	b5 01       	movw	r22, r10
    3ff6:	a4 01       	movw	r20, r8
    3ff8:	ed 81       	ldd	r30, Y+5	; 0x05
    3ffa:	fe 81       	ldd	r31, Y+6	; 0x06
    3ffc:	4e 0f       	add	r20, r30
    3ffe:	5f 1f       	adc	r21, r31
    4000:	61 1d       	adc	r22, r1
    4002:	71 1d       	adc	r23, r1
    4004:	84 17       	cp	r24, r20
    4006:	95 07       	cpc	r25, r21
    4008:	a6 07       	cpc	r26, r22
    400a:	b7 07       	cpc	r27, r23
    400c:	48 f4       	brcc	.+18     	; 0x4020 <fat_read_file+0xce>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    400e:	9c 01       	movw	r18, r24
    4010:	28 19       	sub	r18, r8
    4012:	39 09       	sbc	r19, r9
    4014:	3e 83       	std	Y+6, r19	; 0x06
    4016:	2d 83       	std	Y+5, r18	; 0x05
    if(buffer_len == 0)
    4018:	88 15       	cp	r24, r8
    401a:	99 05       	cpc	r25, r9
    401c:	09 f4       	brne	.+2      	; 0x4020 <fat_read_file+0xce>
    401e:	b5 c0       	rjmp	.+362    	; 0x418a <fat_read_file+0x238>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    4020:	d8 01       	movw	r26, r16
    4022:	ed 91       	ld	r30, X+
    4024:	fc 91       	ld	r31, X
    4026:	11 97       	sbiw	r26, 0x01	; 1
    4028:	20 88       	ldd	r2, Z+16	; 0x10
    402a:	31 88       	ldd	r3, Z+17	; 0x11
    cluster_t cluster_num = fd->pos_cluster;
    402c:	d1 96       	adiw	r26, 0x31	; 49
    402e:	ed 90       	ld	r14, X+
    4030:	fc 90       	ld	r15, X
    4032:	d2 97       	sbiw	r26, 0x32	; 50
    if(!cluster_num)
    4034:	e1 14       	cp	r14, r1
    4036:	f1 04       	cpc	r15, r1
    4038:	f9 f4       	brne	.+62     	; 0x4078 <fat_read_file+0x126>
        cluster_num = fd->dir_entry.cluster;
    403a:	93 96       	adiw	r26, 0x23	; 35
    403c:	ed 90       	ld	r14, X+
    403e:	fc 90       	ld	r15, X
        if(!cluster_num)
    4040:	e1 14       	cp	r14, r1
    4042:	f1 04       	cpc	r15, r1
    4044:	81 f4       	brne	.+32     	; 0x4066 <fat_read_file+0x114>
            if(!fd->pos)
    4046:	e1 e0       	ldi	r30, 0x01	; 1
    4048:	f0 e0       	ldi	r31, 0x00	; 0
    404a:	fa 83       	std	Y+2, r31	; 0x02
    404c:	e9 83       	std	Y+1, r30	; 0x01
    404e:	89 28       	or	r8, r9
    4050:	8a 28       	or	r8, r10
    4052:	8b 28       	or	r8, r11
    4054:	11 f4       	brne	.+4      	; 0x405a <fat_read_file+0x108>
    4056:	1a 82       	std	Y+2, r1	; 0x02
    4058:	19 82       	std	Y+1, r1	; 0x01
    405a:	29 81       	ldd	r18, Y+1	; 0x01
    405c:	3a 81       	ldd	r19, Y+2	; 0x02
    405e:	31 95       	neg	r19
    4060:	21 95       	neg	r18
    4062:	31 09       	sbc	r19, r1
    4064:	95 cf       	rjmp	.-214    	; 0x3f90 <fat_read_file+0x3e>
            while(pos >= cluster_size)
    4066:	21 01       	movw	r4, r2
    4068:	71 2c       	mov	r7, r1
    406a:	61 2c       	mov	r6, r1
        if(fd->pos)
    406c:	81 14       	cp	r8, r1
    406e:	91 04       	cpc	r9, r1
    4070:	a1 04       	cpc	r10, r1
    4072:	b1 04       	cpc	r11, r1
    4074:	09 f0       	breq	.+2      	; 0x4078 <fat_read_file+0x126>
    4076:	47 c0       	rjmp	.+142    	; 0x4106 <fat_read_file+0x1b4>
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    4078:	31 01       	movw	r6, r2
    407a:	b1 e0       	ldi	r27, 0x01	; 1
    407c:	6b 1a       	sub	r6, r27
    407e:	71 08       	sbc	r7, r1
    4080:	e9 81       	ldd	r30, Y+1	; 0x01
    4082:	fa 81       	ldd	r31, Y+2	; 0x02
    4084:	6e 22       	and	r6, r30
    4086:	7f 22       	and	r7, r31
    4088:	8d 80       	ldd	r8, Y+5	; 0x05
    408a:	9e 80       	ldd	r9, Y+6	; 0x06
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    408c:	d8 01       	movw	r26, r16
    408e:	4d 90       	ld	r4, X+
    4090:	5c 90       	ld	r5, X
    4092:	b7 01       	movw	r22, r14
    4094:	c2 01       	movw	r24, r4
    4096:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fat_cluster_offset>
    409a:	46 2f       	mov	r20, r22
    409c:	57 2f       	mov	r21, r23
    409e:	bc 01       	movw	r22, r24
        uint16_t copy_length = cluster_size - first_cluster_offset;
    40a0:	c1 01       	movw	r24, r2
    40a2:	86 19       	sub	r24, r6
    40a4:	97 09       	sbc	r25, r7
        if(copy_length > buffer_left)
    40a6:	54 01       	movw	r10, r8
    40a8:	88 15       	cp	r24, r8
    40aa:	99 05       	cpc	r25, r9
    40ac:	08 f4       	brcc	.+2      	; 0x40b0 <fat_read_file+0x15e>
    40ae:	5c 01       	movw	r10, r24
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    40b0:	db 01       	movw	r26, r22
    40b2:	ca 01       	movw	r24, r20
    40b4:	86 0d       	add	r24, r6
    40b6:	97 1d       	adc	r25, r7
    40b8:	a1 1d       	adc	r26, r1
    40ba:	b1 1d       	adc	r27, r1
    40bc:	89 83       	std	Y+1, r24	; 0x01
    40be:	9a 83       	std	Y+2, r25	; 0x02
    40c0:	ab 83       	std	Y+3, r26	; 0x03
    40c2:	bc 83       	std	Y+4, r27	; 0x04
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    40c4:	d2 01       	movw	r26, r4
    40c6:	ed 91       	ld	r30, X+
    40c8:	fc 91       	ld	r31, X
    40ca:	01 90       	ld	r0, Z+
    40cc:	f0 81       	ld	r31, Z
    40ce:	e0 2d       	mov	r30, r0
    40d0:	95 01       	movw	r18, r10
    40d2:	a6 01       	movw	r20, r12
    40d4:	69 81       	ldd	r22, Y+1	; 0x01
    40d6:	7a 81       	ldd	r23, Y+2	; 0x02
    40d8:	8b 81       	ldd	r24, Y+3	; 0x03
    40da:	9c 81       	ldd	r25, Y+4	; 0x04
    40dc:	09 95       	icall
    40de:	81 11       	cpse	r24, r1
    40e0:	1d c0       	rjmp	.+58     	; 0x411c <fat_read_file+0x1ca>
            return buffer_len - buffer_left;
    40e2:	ed 81       	ldd	r30, Y+5	; 0x05
    40e4:	fe 81       	ldd	r31, Y+6	; 0x06
                return buffer_len - buffer_left;
    40e6:	e8 19       	sub	r30, r8
    40e8:	f9 09       	sbc	r31, r9
    return buffer_len;
    40ea:	fa 83       	std	Y+2, r31	; 0x02
    40ec:	e9 83       	std	Y+1, r30	; 0x01
    40ee:	52 cf       	rjmp	.-348    	; 0x3f94 <fat_read_file+0x42>
                pos -= cluster_size;
    40f0:	84 18       	sub	r8, r4
    40f2:	95 08       	sbc	r9, r5
    40f4:	a6 08       	sbc	r10, r6
    40f6:	b7 08       	sbc	r11, r7
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    40f8:	b7 01       	movw	r22, r14
    40fa:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
    40fe:	7c 01       	movw	r14, r24
                if(!cluster_num)
    4100:	89 2b       	or	r24, r25
    4102:	09 f4       	brne	.+2      	; 0x4106 <fat_read_file+0x1b4>
    4104:	43 cf       	rjmp	.-378    	; 0x3f8c <fat_read_file+0x3a>
            while(pos >= cluster_size)
    4106:	d8 01       	movw	r26, r16
    4108:	8d 91       	ld	r24, X+
    410a:	9c 91       	ld	r25, X
    410c:	84 14       	cp	r8, r4
    410e:	95 04       	cpc	r9, r5
    4110:	a6 04       	cpc	r10, r6
    4112:	b7 04       	cpc	r11, r7
    4114:	68 f7       	brcc	.-38     	; 0x40f0 <fat_read_file+0x19e>
    4116:	b0 cf       	rjmp	.-160    	; 0x4078 <fat_read_file+0x126>
    4118:	42 01       	movw	r8, r4
    411a:	b8 cf       	rjmp	.-144    	; 0x408c <fat_read_file+0x13a>
        buffer += copy_length;
    411c:	ca 0c       	add	r12, r10
    411e:	db 1c       	adc	r13, r11
        buffer_left -= copy_length;
    4120:	24 01       	movw	r4, r8
    4122:	4a 18       	sub	r4, r10
    4124:	5b 08       	sbc	r5, r11
        fd->pos += copy_length;
    4126:	f8 01       	movw	r30, r16
    4128:	85 a5       	ldd	r24, Z+45	; 0x2d
    412a:	96 a5       	ldd	r25, Z+46	; 0x2e
    412c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    412e:	b0 a9       	ldd	r27, Z+48	; 0x30
    4130:	8a 0d       	add	r24, r10
    4132:	9b 1d       	adc	r25, r11
    4134:	a1 1d       	adc	r26, r1
    4136:	b1 1d       	adc	r27, r1
    4138:	85 a7       	std	Z+45, r24	; 0x2d
    413a:	96 a7       	std	Z+46, r25	; 0x2e
    413c:	a7 a7       	std	Z+47, r26	; 0x2f
    413e:	b0 ab       	std	Z+48, r27	; 0x30
        if(first_cluster_offset + copy_length >= cluster_size)
    4140:	c5 01       	movw	r24, r10
    4142:	86 0d       	add	r24, r6
    4144:	97 1d       	adc	r25, r7
    4146:	82 15       	cp	r24, r2
    4148:	93 05       	cpc	r25, r3
    414a:	a0 f0       	brcs	.+40     	; 0x4174 <fat_read_file+0x222>
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    414c:	b7 01       	movw	r22, r14
    414e:	80 81       	ld	r24, Z
    4150:	91 81       	ldd	r25, Z+1	; 0x01
    4152:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
    4156:	7c 01       	movw	r14, r24
    4158:	89 2b       	or	r24, r25
    415a:	51 f4       	brne	.+20     	; 0x4170 <fat_read_file+0x21e>
                fd->pos_cluster = 0;
    415c:	d8 01       	movw	r26, r16
    415e:	d2 96       	adiw	r26, 0x32	; 50
    4160:	1c 92       	st	X, r1
    4162:	1e 92       	st	-X, r1
    4164:	d1 97       	sbiw	r26, 0x31	; 49
                return buffer_len - buffer_left;
    4166:	ed 81       	ldd	r30, Y+5	; 0x05
    4168:	fe 81       	ldd	r31, Y+6	; 0x06
    416a:	ea 0d       	add	r30, r10
    416c:	fb 1d       	adc	r31, r11
    416e:	bb cf       	rjmp	.-138    	; 0x40e6 <fat_read_file+0x194>
                first_cluster_offset = 0;
    4170:	71 2c       	mov	r7, r1
    4172:	61 2c       	mov	r6, r1
        fd->pos_cluster = cluster_num;
    4174:	d8 01       	movw	r26, r16
    4176:	d2 96       	adiw	r26, 0x32	; 50
    4178:	fc 92       	st	X, r15
    417a:	ee 92       	st	-X, r14
    417c:	d1 97       	sbiw	r26, 0x31	; 49
    } while(buffer_left > 0); /* check if we are done */
    417e:	41 14       	cp	r4, r1
    4180:	51 04       	cpc	r5, r1
    4182:	51 f6       	brne	.-108    	; 0x4118 <fat_read_file+0x1c6>
    return buffer_len;
    4184:	ed 81       	ldd	r30, Y+5	; 0x05
    4186:	fe 81       	ldd	r31, Y+6	; 0x06
    4188:	b0 cf       	rjmp	.-160    	; 0x40ea <fat_read_file+0x198>
        return 0;
    418a:	1a 82       	std	Y+2, r1	; 0x02
    418c:	19 82       	std	Y+1, r1	; 0x01
    418e:	02 cf       	rjmp	.-508    	; 0x3f94 <fat_read_file+0x42>

00004190 <fat_write_file>:
{
    4190:	2f 92       	push	r2
    4192:	3f 92       	push	r3
    4194:	4f 92       	push	r4
    4196:	5f 92       	push	r5
    4198:	6f 92       	push	r6
    419a:	7f 92       	push	r7
    419c:	8f 92       	push	r8
    419e:	9f 92       	push	r9
    41a0:	af 92       	push	r10
    41a2:	bf 92       	push	r11
    41a4:	cf 92       	push	r12
    41a6:	df 92       	push	r13
    41a8:	ef 92       	push	r14
    41aa:	ff 92       	push	r15
    41ac:	0f 93       	push	r16
    41ae:	1f 93       	push	r17
    41b0:	cf 93       	push	r28
    41b2:	df 93       	push	r29
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
    41b8:	28 97       	sbiw	r28, 0x08	; 8
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	8f 83       	std	Y+7, r24	; 0x07
    41c6:	98 87       	std	Y+8, r25	; 0x08
    41c8:	6b 01       	movw	r12, r22
    41ca:	49 83       	std	Y+1, r20	; 0x01
    41cc:	5a 83       	std	Y+2, r21	; 0x02
    if(!fd || !buffer || buffer_len < 1)
    41ce:	8f 81       	ldd	r24, Y+7	; 0x07
    41d0:	98 85       	ldd	r25, Y+8	; 0x08
    41d2:	89 2b       	or	r24, r25
    41d4:	d9 f4       	brne	.+54     	; 0x420c <fat_write_file+0x7c>
        return -1;
    41d6:	8f ef       	ldi	r24, 0xFF	; 255
    41d8:	9f ef       	ldi	r25, 0xFF	; 255
}
    41da:	28 96       	adiw	r28, 0x08	; 8
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	f8 94       	cli
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	cd bf       	out	0x3d, r28	; 61
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	1f 91       	pop	r17
    41ec:	0f 91       	pop	r16
    41ee:	ff 90       	pop	r15
    41f0:	ef 90       	pop	r14
    41f2:	df 90       	pop	r13
    41f4:	cf 90       	pop	r12
    41f6:	bf 90       	pop	r11
    41f8:	af 90       	pop	r10
    41fa:	9f 90       	pop	r9
    41fc:	8f 90       	pop	r8
    41fe:	7f 90       	pop	r7
    4200:	6f 90       	pop	r6
    4202:	5f 90       	pop	r5
    4204:	4f 90       	pop	r4
    4206:	3f 90       	pop	r3
    4208:	2f 90       	pop	r2
    420a:	08 95       	ret
    if(!fd || !buffer || buffer_len < 1)
    420c:	67 2b       	or	r22, r23
    420e:	19 f3       	breq	.-58     	; 0x41d6 <fat_write_file+0x46>
    4210:	a9 81       	ldd	r26, Y+1	; 0x01
    4212:	ba 81       	ldd	r27, Y+2	; 0x02
    4214:	ab 2b       	or	r26, r27
    4216:	f9 f2       	breq	.-66     	; 0x41d6 <fat_write_file+0x46>
    if(fd->pos > fd->dir_entry.file_size)
    4218:	ef 81       	ldd	r30, Y+7	; 0x07
    421a:	f8 85       	ldd	r31, Y+8	; 0x08
    421c:	45 a5       	ldd	r20, Z+45	; 0x2d
    421e:	56 a5       	ldd	r21, Z+46	; 0x2e
    4220:	67 a5       	ldd	r22, Z+47	; 0x2f
    4222:	70 a9       	ldd	r23, Z+48	; 0x30
    4224:	85 a1       	ldd	r24, Z+37	; 0x25
    4226:	96 a1       	ldd	r25, Z+38	; 0x26
    4228:	a7 a1       	ldd	r26, Z+39	; 0x27
    422a:	b0 a5       	ldd	r27, Z+40	; 0x28
    422c:	84 17       	cp	r24, r20
    422e:	95 07       	cpc	r25, r21
    4230:	a6 07       	cpc	r26, r22
    4232:	b7 07       	cpc	r27, r23
    4234:	80 f2       	brcs	.-96     	; 0x41d6 <fat_write_file+0x46>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    4236:	80 81       	ld	r24, Z
    4238:	91 81       	ldd	r25, Z+1	; 0x01
    423a:	dc 01       	movw	r26, r24
    423c:	50 96       	adiw	r26, 0x10	; 16
    423e:	2d 90       	ld	r2, X+
    4240:	3c 90       	ld	r3, X
    cluster_t cluster_num = fd->pos_cluster;
    4242:	01 a9       	ldd	r16, Z+49	; 0x31
    4244:	12 a9       	ldd	r17, Z+50	; 0x32
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    4246:	71 01       	movw	r14, r2
    4248:	b1 e0       	ldi	r27, 0x01	; 1
    424a:	eb 1a       	sub	r14, r27
    424c:	f1 08       	sbc	r15, r1
    424e:	e4 22       	and	r14, r20
    4250:	f5 22       	and	r15, r21
    if(!cluster_num)
    4252:	01 15       	cp	r16, r1
    4254:	11 05       	cpc	r17, r1
    4256:	59 f5       	brne	.+86     	; 0x42ae <fat_write_file+0x11e>
        cluster_num = fd->dir_entry.cluster;
    4258:	03 a1       	ldd	r16, Z+35	; 0x23
    425a:	14 a1       	ldd	r17, Z+36	; 0x24
        if(!cluster_num)
    425c:	01 15       	cp	r16, r1
    425e:	11 05       	cpc	r17, r1
    4260:	a9 f4       	brne	.+42     	; 0x428c <fat_write_file+0xfc>
            if(!fd->pos)
    4262:	45 2b       	or	r20, r21
    4264:	46 2b       	or	r20, r22
    4266:	47 2b       	or	r20, r23
    4268:	09 f0       	breq	.+2      	; 0x426c <fat_write_file+0xdc>
    426a:	b5 cf       	rjmp	.-150    	; 0x41d6 <fat_write_file+0x46>
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    426c:	41 e0       	ldi	r20, 0x01	; 1
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
    4278:	8c 01       	movw	r16, r24
    427a:	ef 81       	ldd	r30, Y+7	; 0x07
    427c:	f8 85       	ldd	r31, Y+8	; 0x08
    427e:	94 a3       	std	Z+36, r25	; 0x24
    4280:	83 a3       	std	Z+35, r24	; 0x23
                if(!cluster_num)
    4282:	89 2b       	or	r24, r25
    4284:	19 f4       	brne	.+6      	; 0x428c <fat_write_file+0xfc>
                    return 0;
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	a7 cf       	rjmp	.-178    	; 0x41da <fat_write_file+0x4a>
        if(fd->pos)
    428c:	af 81       	ldd	r26, Y+7	; 0x07
    428e:	b8 85       	ldd	r27, Y+8	; 0x08
    4290:	9d 96       	adiw	r26, 0x2d	; 45
    4292:	8d 90       	ld	r8, X+
    4294:	9d 90       	ld	r9, X+
    4296:	ad 90       	ld	r10, X+
    4298:	bc 90       	ld	r11, X
    429a:	d0 97       	sbiw	r26, 0x30	; 48
            while(pos >= cluster_size)
    429c:	21 01       	movw	r4, r2
    429e:	71 2c       	mov	r7, r1
    42a0:	61 2c       	mov	r6, r1
        if(fd->pos)
    42a2:	81 14       	cp	r8, r1
    42a4:	91 04       	cpc	r9, r1
    42a6:	a1 04       	cpc	r10, r1
    42a8:	b1 04       	cpc	r11, r1
    42aa:	09 f0       	breq	.+2      	; 0x42ae <fat_write_file+0x11e>
    42ac:	ab c0       	rjmp	.+342    	; 0x4404 <fat_write_file+0x274>
    42ae:	a9 80       	ldd	r10, Y+1	; 0x01
    42b0:	ba 80       	ldd	r11, Y+2	; 0x02
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    42b2:	ef 81       	ldd	r30, Y+7	; 0x07
    42b4:	f8 85       	ldd	r31, Y+8	; 0x08
    42b6:	60 80       	ld	r6, Z
    42b8:	71 80       	ldd	r7, Z+1	; 0x01
    42ba:	b8 01       	movw	r22, r16
    42bc:	c3 01       	movw	r24, r6
    42be:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fat_cluster_offset>
    42c2:	46 2f       	mov	r20, r22
    42c4:	57 2f       	mov	r21, r23
    42c6:	bc 01       	movw	r22, r24
        uint16_t write_length = cluster_size - first_cluster_offset;
    42c8:	c1 01       	movw	r24, r2
    42ca:	8e 19       	sub	r24, r14
    42cc:	9f 09       	sbc	r25, r15
        if(write_length > buffer_left)
    42ce:	45 01       	movw	r8, r10
    42d0:	8a 15       	cp	r24, r10
    42d2:	9b 05       	cpc	r25, r11
    42d4:	08 f4       	brcc	.+2      	; 0x42d8 <fat_write_file+0x148>
    42d6:	4c 01       	movw	r8, r24
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    42d8:	db 01       	movw	r26, r22
    42da:	ca 01       	movw	r24, r20
    42dc:	8e 0d       	add	r24, r14
    42de:	9f 1d       	adc	r25, r15
    42e0:	a1 1d       	adc	r26, r1
    42e2:	b1 1d       	adc	r27, r1
    42e4:	8b 83       	std	Y+3, r24	; 0x03
    42e6:	9c 83       	std	Y+4, r25	; 0x04
    42e8:	ad 83       	std	Y+5, r26	; 0x05
    42ea:	be 83       	std	Y+6, r27	; 0x06
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    42ec:	d3 01       	movw	r26, r6
    42ee:	ed 91       	ld	r30, X+
    42f0:	fc 91       	ld	r31, X
    42f2:	04 80       	ldd	r0, Z+4	; 0x04
    42f4:	f5 81       	ldd	r31, Z+5	; 0x05
    42f6:	e0 2d       	mov	r30, r0
    42f8:	94 01       	movw	r18, r8
    42fa:	a6 01       	movw	r20, r12
    42fc:	6b 81       	ldd	r22, Y+3	; 0x03
    42fe:	7c 81       	ldd	r23, Y+4	; 0x04
    4300:	8d 81       	ldd	r24, Y+5	; 0x05
    4302:	9e 81       	ldd	r25, Y+6	; 0x06
    4304:	09 95       	icall
    4306:	88 23       	and	r24, r24
    4308:	a9 f1       	breq	.+106    	; 0x4374 <fat_write_file+0x1e4>
        buffer += write_length;
    430a:	c8 0c       	add	r12, r8
    430c:	d9 1c       	adc	r13, r9
        buffer_left -= write_length;
    430e:	a8 18       	sub	r10, r8
    4310:	b9 08       	sbc	r11, r9
        fd->pos += write_length;
    4312:	ef 81       	ldd	r30, Y+7	; 0x07
    4314:	f8 85       	ldd	r31, Y+8	; 0x08
    4316:	85 a5       	ldd	r24, Z+45	; 0x2d
    4318:	96 a5       	ldd	r25, Z+46	; 0x2e
    431a:	a7 a5       	ldd	r26, Z+47	; 0x2f
    431c:	b0 a9       	ldd	r27, Z+48	; 0x30
    431e:	88 0d       	add	r24, r8
    4320:	99 1d       	adc	r25, r9
    4322:	a1 1d       	adc	r26, r1
    4324:	b1 1d       	adc	r27, r1
    4326:	85 a7       	std	Z+45, r24	; 0x2d
    4328:	96 a7       	std	Z+46, r25	; 0x2e
    432a:	a7 a7       	std	Z+47, r26	; 0x2f
    432c:	b0 ab       	std	Z+48, r27	; 0x30
        if(first_cluster_offset + write_length >= cluster_size)
    432e:	8e 0c       	add	r8, r14
    4330:	9f 1c       	adc	r9, r15
    4332:	82 14       	cp	r8, r2
    4334:	93 04       	cpc	r9, r3
    4336:	08 f4       	brcc	.+2      	; 0x433a <fat_write_file+0x1aa>
    4338:	74 c0       	rjmp	.+232    	; 0x4422 <fat_write_file+0x292>
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    433a:	b8 01       	movw	r22, r16
    433c:	80 81       	ld	r24, Z
    433e:	91 81       	ldd	r25, Z+1	; 0x01
    4340:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
    4344:	7c 01       	movw	r14, r24
            if(!cluster_num_next && buffer_left > 0)
    4346:	00 97       	sbiw	r24, 0x00	; 0
    4348:	09 f0       	breq	.+2      	; 0x434c <fat_write_file+0x1bc>
    434a:	68 c0       	rjmp	.+208    	; 0x441c <fat_write_file+0x28c>
    434c:	a1 14       	cp	r10, r1
    434e:	b1 04       	cpc	r11, r1
    4350:	69 f0       	breq	.+26     	; 0x436c <fat_write_file+0x1dc>
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    4352:	41 e0       	ldi	r20, 0x01	; 1
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	b8 01       	movw	r22, r16
    4358:	af 81       	ldd	r26, Y+7	; 0x07
    435a:	b8 85       	ldd	r27, Y+8	; 0x08
    435c:	8d 91       	ld	r24, X+
    435e:	9c 91       	ld	r25, X
    4360:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
    4364:	8c 01       	movw	r16, r24
            if(!cluster_num_next)
    4366:	89 2b       	or	r24, r25
    4368:	09 f0       	breq	.+2      	; 0x436c <fat_write_file+0x1dc>
    436a:	5b c0       	rjmp	.+182    	; 0x4422 <fat_write_file+0x292>
                fd->pos_cluster = 0;
    436c:	ef 81       	ldd	r30, Y+7	; 0x07
    436e:	f8 85       	ldd	r31, Y+8	; 0x08
    4370:	12 aa       	std	Z+50, r1	; 0x32
    4372:	11 aa       	std	Z+49, r1	; 0x31
    if(fd->pos > fd->dir_entry.file_size)
    4374:	ef 81       	ldd	r30, Y+7	; 0x07
    4376:	f8 85       	ldd	r31, Y+8	; 0x08
    4378:	85 a5       	ldd	r24, Z+45	; 0x2d
    437a:	96 a5       	ldd	r25, Z+46	; 0x2e
    437c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    437e:	b0 a9       	ldd	r27, Z+48	; 0x30
    4380:	c5 a0       	ldd	r12, Z+37	; 0x25
    4382:	d6 a0       	ldd	r13, Z+38	; 0x26
    4384:	e7 a0       	ldd	r14, Z+39	; 0x27
    4386:	f0 a4       	ldd	r15, Z+40	; 0x28
    4388:	c8 16       	cp	r12, r24
    438a:	d9 06       	cpc	r13, r25
    438c:	ea 06       	cpc	r14, r26
    438e:	fb 06       	cpc	r15, r27
    4390:	c0 f4       	brcc	.+48     	; 0x43c2 <fat_write_file+0x232>
        fd->dir_entry.file_size = fd->pos;
    4392:	85 a3       	std	Z+37, r24	; 0x25
    4394:	96 a3       	std	Z+38, r25	; 0x26
    4396:	a7 a3       	std	Z+39, r26	; 0x27
    4398:	b0 a7       	std	Z+40, r27	; 0x28
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    439a:	81 91       	ld	r24, Z+
    439c:	91 91       	ld	r25, Z+
    439e:	bf 01       	movw	r22, r30
    43a0:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    43a4:	81 11       	cpse	r24, r1
    43a6:	0d c0       	rjmp	.+26     	; 0x43c2 <fat_write_file+0x232>
            buffer_left = fd->pos - size_old;
    43a8:	af 81       	ldd	r26, Y+7	; 0x07
    43aa:	b8 85       	ldd	r27, Y+8	; 0x08
    43ac:	9d 96       	adiw	r26, 0x2d	; 45
    43ae:	ad 90       	ld	r10, X+
    43b0:	bc 90       	ld	r11, X
    43b2:	9e 97       	sbiw	r26, 0x2e	; 46
    43b4:	ac 18       	sub	r10, r12
    43b6:	bd 08       	sbc	r11, r13
            fd->pos = size_old;
    43b8:	fd 01       	movw	r30, r26
    43ba:	c5 a6       	std	Z+45, r12	; 0x2d
    43bc:	d6 a6       	std	Z+46, r13	; 0x2e
    43be:	e7 a6       	std	Z+47, r14	; 0x2f
    43c0:	f0 aa       	std	Z+48, r15	; 0x30
    return buffer_len - buffer_left;
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	9a 81       	ldd	r25, Y+2	; 0x02
    43c6:	8a 19       	sub	r24, r10
    43c8:	9b 09       	sbc	r25, r11
    43ca:	07 cf       	rjmp	.-498    	; 0x41da <fat_write_file+0x4a>
                pos -= cluster_size;
    43cc:	84 18       	sub	r8, r4
    43ce:	95 08       	sbc	r9, r5
    43d0:	a6 08       	sbc	r10, r6
    43d2:	b7 08       	sbc	r11, r7
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    43d4:	b8 01       	movw	r22, r16
    43d6:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
                if(!cluster_num_next)
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	e9 f4       	brne	.+58     	; 0x4418 <fat_write_file+0x288>
                    if(pos != 0)
    43de:	81 14       	cp	r8, r1
    43e0:	91 04       	cpc	r9, r1
    43e2:	a1 04       	cpc	r10, r1
    43e4:	b1 04       	cpc	r11, r1
    43e6:	09 f0       	breq	.+2      	; 0x43ea <fat_write_file+0x25a>
    43e8:	f6 ce       	rjmp	.-532    	; 0x41d6 <fat_write_file+0x46>
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    43ea:	41 e0       	ldi	r20, 0x01	; 1
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	b8 01       	movw	r22, r16
    43f0:	ef 81       	ldd	r30, Y+7	; 0x07
    43f2:	f8 85       	ldd	r31, Y+8	; 0x08
    43f4:	80 81       	ld	r24, Z
    43f6:	91 81       	ldd	r25, Z+1	; 0x01
    43f8:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
    43fc:	8c 01       	movw	r16, r24
                    if(!cluster_num_next)
    43fe:	89 2b       	or	r24, r25
    4400:	09 f4       	brne	.+2      	; 0x4404 <fat_write_file+0x274>
    4402:	41 cf       	rjmp	.-382    	; 0x4286 <fat_write_file+0xf6>
            while(pos >= cluster_size)
    4404:	af 81       	ldd	r26, Y+7	; 0x07
    4406:	b8 85       	ldd	r27, Y+8	; 0x08
    4408:	8d 91       	ld	r24, X+
    440a:	9c 91       	ld	r25, X
    440c:	84 14       	cp	r8, r4
    440e:	95 04       	cpc	r9, r5
    4410:	a6 04       	cpc	r10, r6
    4412:	b7 04       	cpc	r11, r7
    4414:	d8 f6       	brcc	.-74     	; 0x43cc <fat_write_file+0x23c>
    4416:	4b cf       	rjmp	.-362    	; 0x42ae <fat_write_file+0x11e>
    4418:	8c 01       	movw	r16, r24
    441a:	f4 cf       	rjmp	.-24     	; 0x4404 <fat_write_file+0x274>
    441c:	8c 01       	movw	r16, r24
            first_cluster_offset = 0;
    441e:	f1 2c       	mov	r15, r1
    4420:	e1 2c       	mov	r14, r1
        fd->pos_cluster = cluster_num;
    4422:	af 81       	ldd	r26, Y+7	; 0x07
    4424:	b8 85       	ldd	r27, Y+8	; 0x08
    4426:	d2 96       	adiw	r26, 0x32	; 50
    4428:	1c 93       	st	X, r17
    442a:	0e 93       	st	-X, r16
    442c:	d1 97       	sbiw	r26, 0x31	; 49
    } while(buffer_left > 0); /* check if we are done */
    442e:	a1 14       	cp	r10, r1
    4430:	b1 04       	cpc	r11, r1
    4432:	09 f0       	breq	.+2      	; 0x4436 <fat_write_file+0x2a6>
    4434:	3e cf       	rjmp	.-388    	; 0x42b2 <fat_write_file+0x122>
    4436:	9e cf       	rjmp	.-196    	; 0x4374 <fat_write_file+0x1e4>

00004438 <fat_resize_file>:
{
    4438:	2f 92       	push	r2
    443a:	3f 92       	push	r3
    443c:	4f 92       	push	r4
    443e:	5f 92       	push	r5
    4440:	6f 92       	push	r6
    4442:	7f 92       	push	r7
    4444:	8f 92       	push	r8
    4446:	9f 92       	push	r9
    4448:	af 92       	push	r10
    444a:	bf 92       	push	r11
    444c:	cf 92       	push	r12
    444e:	df 92       	push	r13
    4450:	ef 92       	push	r14
    4452:	ff 92       	push	r15
    4454:	0f 93       	push	r16
    4456:	1f 93       	push	r17
    4458:	cf 93       	push	r28
    445a:	df 93       	push	r29
    445c:	00 d0       	rcall	.+0      	; 0x445e <fat_resize_file+0x26>
    445e:	00 d0       	rcall	.+0      	; 0x4460 <fat_resize_file+0x28>
    4460:	00 d0       	rcall	.+0      	; 0x4462 <fat_resize_file+0x2a>
    4462:	cd b7       	in	r28, 0x3d	; 61
    4464:	de b7       	in	r29, 0x3e	; 62
    4466:	1c 01       	movw	r2, r24
    4468:	6a 01       	movw	r12, r20
    446a:	7b 01       	movw	r14, r22
    if(!fd)
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	d1 f4       	brne	.+52     	; 0x44a4 <fat_resize_file+0x6c>
        return 0;
    4470:	80 e0       	ldi	r24, 0x00	; 0
}
    4472:	26 96       	adiw	r28, 0x06	; 6
    4474:	0f b6       	in	r0, 0x3f	; 63
    4476:	f8 94       	cli
    4478:	de bf       	out	0x3e, r29	; 62
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	cd bf       	out	0x3d, r28	; 61
    447e:	df 91       	pop	r29
    4480:	cf 91       	pop	r28
    4482:	1f 91       	pop	r17
    4484:	0f 91       	pop	r16
    4486:	ff 90       	pop	r15
    4488:	ef 90       	pop	r14
    448a:	df 90       	pop	r13
    448c:	cf 90       	pop	r12
    448e:	bf 90       	pop	r11
    4490:	af 90       	pop	r10
    4492:	9f 90       	pop	r9
    4494:	8f 90       	pop	r8
    4496:	7f 90       	pop	r7
    4498:	6f 90       	pop	r6
    449a:	5f 90       	pop	r5
    449c:	4f 90       	pop	r4
    449e:	3f 90       	pop	r3
    44a0:	2f 90       	pop	r2
    44a2:	08 95       	ret
    cluster_t cluster_num = fd->dir_entry.cluster;
    44a4:	dc 01       	movw	r26, r24
    44a6:	93 96       	adiw	r26, 0x23	; 35
    44a8:	0d 91       	ld	r16, X+
    44aa:	1c 91       	ld	r17, X
        if(cluster_num == 0 && size_new == 0)
    44ac:	01 15       	cp	r16, r1
    44ae:	11 05       	cpc	r17, r1
    44b0:	31 f4       	brne	.+12     	; 0x44be <fat_resize_file+0x86>
    44b2:	c1 14       	cp	r12, r1
    44b4:	d1 04       	cpc	r13, r1
    44b6:	e1 04       	cpc	r14, r1
    44b8:	f1 04       	cpc	r15, r1
    44ba:	09 f4       	brne	.+2      	; 0x44be <fat_resize_file+0x86>
    44bc:	60 c0       	rjmp	.+192    	; 0x457e <fat_resize_file+0x146>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    44be:	d1 01       	movw	r26, r2
    44c0:	ed 91       	ld	r30, X+
    44c2:	fc 91       	ld	r31, X
    44c4:	80 88       	ldd	r8, Z+16	; 0x10
    44c6:	91 88       	ldd	r9, Z+17	; 0x11
    44c8:	26 01       	movw	r4, r12
    44ca:	37 01       	movw	r6, r14
        while(size_new > cluster_size)
    44cc:	b1 2c       	mov	r11, r1
    44ce:	a1 2c       	mov	r10, r1
    44d0:	f1 01       	movw	r30, r2
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	84 14       	cp	r8, r4
    44d8:	95 04       	cpc	r9, r5
    44da:	a6 04       	cpc	r10, r6
    44dc:	b7 04       	cpc	r11, r7
    44de:	08 f4       	brcc	.+2      	; 0x44e2 <fat_resize_file+0xaa>
    44e0:	60 c0       	rjmp	.+192    	; 0x45a2 <fat_resize_file+0x16a>
        if(size_new > cluster_size || cluster_num == 0)
    44e2:	01 15       	cp	r16, r1
    44e4:	11 05       	cpc	r17, r1
    44e6:	39 f5       	brne	.+78     	; 0x4536 <fat_resize_file+0xfe>
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
    44e8:	d5 01       	movw	r26, r10
    44ea:	c4 01       	movw	r24, r8
    44ec:	84 0d       	add	r24, r4
    44ee:	95 1d       	adc	r25, r5
    44f0:	a6 1d       	adc	r26, r6
    44f2:	b7 1d       	adc	r27, r7
    44f4:	9c 01       	movw	r18, r24
    44f6:	ad 01       	movw	r20, r26
    44f8:	21 50       	subi	r18, 0x01	; 1
    44fa:	31 09       	sbc	r19, r1
    44fc:	41 09       	sbc	r20, r1
    44fe:	51 09       	sbc	r21, r1
    4500:	2b 83       	std	Y+3, r18	; 0x03
    4502:	3c 83       	std	Y+4, r19	; 0x04
    4504:	4d 83       	std	Y+5, r20	; 0x05
    4506:	5e 83       	std	Y+6, r21	; 0x06
    4508:	ca 01       	movw	r24, r20
    450a:	b9 01       	movw	r22, r18
    450c:	a5 01       	movw	r20, r10
    450e:	94 01       	movw	r18, r8
    4510:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    4514:	a9 01       	movw	r20, r18
    4516:	b8 01       	movw	r22, r16
    4518:	d1 01       	movw	r26, r2
    451a:	8d 91       	ld	r24, X+
    451c:	9c 91       	ld	r25, X
    451e:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
            if(!cluster_new_chain)
    4522:	00 97       	sbiw	r24, 0x00	; 0
    4524:	09 f4       	brne	.+2      	; 0x4528 <fat_resize_file+0xf0>
    4526:	a4 cf       	rjmp	.-184    	; 0x4470 <fat_resize_file+0x38>
            if(!cluster_num)
    4528:	01 15       	cp	r16, r1
    452a:	11 05       	cpc	r17, r1
    452c:	21 f4       	brne	.+8      	; 0x4536 <fat_resize_file+0xfe>
                fd->dir_entry.cluster = cluster_num;
    452e:	f1 01       	movw	r30, r2
    4530:	94 a3       	std	Z+36, r25	; 0x24
    4532:	83 a3       	std	Z+35, r24	; 0x23
    4534:	8c 01       	movw	r16, r24
        fd->dir_entry.file_size = size;
    4536:	d1 01       	movw	r26, r2
    4538:	95 96       	adiw	r26, 0x25	; 37
    453a:	cd 92       	st	X+, r12
    453c:	dd 92       	st	X+, r13
    453e:	ed 92       	st	X+, r14
    4540:	fc 92       	st	X, r15
    4542:	98 97       	sbiw	r26, 0x28	; 40
        if(size == 0)
    4544:	c1 14       	cp	r12, r1
    4546:	d1 04       	cpc	r13, r1
    4548:	e1 04       	cpc	r14, r1
    454a:	f1 04       	cpc	r15, r1
    454c:	21 f4       	brne	.+8      	; 0x4556 <fat_resize_file+0x11e>
            fd->dir_entry.cluster = 0;
    454e:	94 96       	adiw	r26, 0x24	; 36
    4550:	1c 92       	st	X, r1
    4552:	1e 92       	st	-X, r1
    4554:	93 97       	sbiw	r26, 0x23	; 35
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    4556:	f1 01       	movw	r30, r2
    4558:	81 91       	ld	r24, Z+
    455a:	91 91       	ld	r25, Z+
    455c:	bf 01       	movw	r22, r30
    455e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4562:	88 23       	and	r24, r24
    4564:	09 f4       	brne	.+2      	; 0x4568 <fat_resize_file+0x130>
    4566:	84 cf       	rjmp	.-248    	; 0x4470 <fat_resize_file+0x38>
        if(size == 0)
    4568:	c1 14       	cp	r12, r1
    456a:	d1 04       	cpc	r13, r1
    456c:	e1 04       	cpc	r14, r1
    456e:	f1 04       	cpc	r15, r1
    4570:	21 f5       	brne	.+72     	; 0x45ba <fat_resize_file+0x182>
            fat_free_clusters(fd->fs, cluster_num);
    4572:	b8 01       	movw	r22, r16
    4574:	f1 01       	movw	r30, r2
    4576:	80 81       	ld	r24, Z
    4578:	91 81       	ldd	r25, Z+1	; 0x01
        return fat_free_clusters(fs, cluster_num_next);
    457a:	0e 94 bd 19 	call	0x337a	; 0x337a <fat_free_clusters>
    if(size < fd->pos)
    457e:	f1 01       	movw	r30, r2
    4580:	85 a5       	ldd	r24, Z+45	; 0x2d
    4582:	96 a5       	ldd	r25, Z+46	; 0x2e
    4584:	a7 a5       	ldd	r26, Z+47	; 0x2f
    4586:	b0 a9       	ldd	r27, Z+48	; 0x30
    4588:	c8 16       	cp	r12, r24
    458a:	d9 06       	cpc	r13, r25
    458c:	ea 06       	cpc	r14, r26
    458e:	fb 06       	cpc	r15, r27
    4590:	30 f4       	brcc	.+12     	; 0x459e <fat_resize_file+0x166>
        fd->pos = size;
    4592:	c5 a6       	std	Z+45, r12	; 0x2d
    4594:	d6 a6       	std	Z+46, r13	; 0x2e
    4596:	e7 a6       	std	Z+47, r14	; 0x2f
    4598:	f0 aa       	std	Z+48, r15	; 0x30
        fd->pos_cluster = 0;
    459a:	12 aa       	std	Z+50, r1	; 0x32
    459c:	11 aa       	std	Z+49, r1	; 0x31
    return 1;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	68 cf       	rjmp	.-304    	; 0x4472 <fat_resize_file+0x3a>
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    45a2:	b8 01       	movw	r22, r16
    45a4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
            if(cluster_num_next)
    45a8:	00 97       	sbiw	r24, 0x00	; 0
    45aa:	09 f4       	brne	.+2      	; 0x45ae <fat_resize_file+0x176>
    45ac:	9d cf       	rjmp	.-198    	; 0x44e8 <fat_resize_file+0xb0>
                size_new -= cluster_size;
    45ae:	48 18       	sub	r4, r8
    45b0:	59 08       	sbc	r5, r9
    45b2:	6a 08       	sbc	r6, r10
    45b4:	7b 08       	sbc	r7, r11
    45b6:	8c 01       	movw	r16, r24
    45b8:	8b cf       	rjmp	.-234    	; 0x44d0 <fat_resize_file+0x98>
        else if(size_new <= cluster_size)
    45ba:	84 14       	cp	r8, r4
    45bc:	95 04       	cpc	r9, r5
    45be:	a6 04       	cpc	r10, r6
    45c0:	b7 04       	cpc	r11, r7
    45c2:	e8 f2       	brcs	.-70     	; 0x457e <fat_resize_file+0x146>
            fat_terminate_clusters(fd->fs, cluster_num);
    45c4:	d1 01       	movw	r26, r2
    45c6:	ad 90       	ld	r10, X+
    45c8:	bc 90       	ld	r11, X
    if(!fs || cluster_num < 2)
    45ca:	a1 14       	cp	r10, r1
    45cc:	b1 04       	cpc	r11, r1
    45ce:	b9 f2       	breq	.-82     	; 0x457e <fat_resize_file+0x146>
    45d0:	02 30       	cpi	r16, 0x02	; 2
    45d2:	11 05       	cpc	r17, r1
    45d4:	a0 f2       	brcs	.-88     	; 0x457e <fat_resize_file+0x146>
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    45d6:	b8 01       	movw	r22, r16
    45d8:	c5 01       	movw	r24, r10
    45da:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
    45de:	4c 01       	movw	r8, r24
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    45e0:	8f ef       	ldi	r24, 0xFF	; 255
    45e2:	9f ef       	ldi	r25, 0xFF	; 255
    45e4:	9a 83       	std	Y+2, r25	; 0x02
    45e6:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	00 0f       	add	r16, r16
    45ee:	11 1f       	adc	r17, r17
    45f0:	22 1f       	adc	r18, r18
    45f2:	33 1f       	adc	r19, r19
    45f4:	f5 01       	movw	r30, r10
    45f6:	86 81       	ldd	r24, Z+6	; 0x06
    45f8:	97 81       	ldd	r25, Z+7	; 0x07
    45fa:	a0 85       	ldd	r26, Z+8	; 0x08
    45fc:	b1 85       	ldd	r27, Z+9	; 0x09
    45fe:	b9 01       	movw	r22, r18
    4600:	a8 01       	movw	r20, r16
    4602:	48 0f       	add	r20, r24
    4604:	59 1f       	adc	r21, r25
    4606:	6a 1f       	adc	r22, r26
    4608:	7b 1f       	adc	r23, r27
    460a:	4b 83       	std	Y+3, r20	; 0x03
    460c:	5c 83       	std	Y+4, r21	; 0x04
    460e:	6d 83       	std	Y+5, r22	; 0x05
    4610:	7e 83       	std	Y+6, r23	; 0x06
    4612:	01 90       	ld	r0, Z+
    4614:	f0 81       	ld	r31, Z
    4616:	e0 2d       	mov	r30, r0
    4618:	04 80       	ldd	r0, Z+4	; 0x04
    461a:	f5 81       	ldd	r31, Z+5	; 0x05
    461c:	e0 2d       	mov	r30, r0
    461e:	22 e0       	ldi	r18, 0x02	; 2
    4620:	30 e0       	ldi	r19, 0x00	; 0
    4622:	ae 01       	movw	r20, r28
    4624:	4f 5f       	subi	r20, 0xFF	; 255
    4626:	5f 4f       	sbci	r21, 0xFF	; 255
    4628:	6b 81       	ldd	r22, Y+3	; 0x03
    462a:	7c 81       	ldd	r23, Y+4	; 0x04
    462c:	8d 81       	ldd	r24, Y+5	; 0x05
    462e:	9e 81       	ldd	r25, Y+6	; 0x06
    4630:	09 95       	icall
    4632:	88 23       	and	r24, r24
    4634:	09 f4       	brne	.+2      	; 0x4638 <fat_resize_file+0x200>
    4636:	a3 cf       	rjmp	.-186    	; 0x457e <fat_resize_file+0x146>
    if(cluster_num_next)
    4638:	81 14       	cp	r8, r1
    463a:	91 04       	cpc	r9, r1
    463c:	09 f4       	brne	.+2      	; 0x4640 <fat_resize_file+0x208>
    463e:	9f cf       	rjmp	.-194    	; 0x457e <fat_resize_file+0x146>
        return fat_free_clusters(fs, cluster_num_next);
    4640:	b4 01       	movw	r22, r8
    4642:	c5 01       	movw	r24, r10
    4644:	9a cf       	rjmp	.-204    	; 0x457a <fat_resize_file+0x142>

00004646 <fat_seek_file>:
{
    4646:	cf 92       	push	r12
    4648:	df 92       	push	r13
    464a:	ef 92       	push	r14
    464c:	ff 92       	push	r15
    464e:	0f 93       	push	r16
    4650:	1f 93       	push	r17
    4652:	cf 93       	push	r28
    4654:	df 93       	push	r29
    4656:	ec 01       	movw	r28, r24
    4658:	8b 01       	movw	r16, r22
    if(!fd || !offset)
    465a:	89 2b       	or	r24, r25
    465c:	11 f4       	brne	.+4      	; 0x4662 <fat_seek_file+0x1c>
    switch(whence)
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	23 c0       	rjmp	.+70     	; 0x46a8 <fat_seek_file+0x62>
    if(!fd || !offset)
    4662:	61 15       	cp	r22, r1
    4664:	71 05       	cpc	r23, r1
    4666:	d9 f3       	breq	.-10     	; 0x465e <fat_seek_file+0x18>
    switch(whence)
    4668:	41 30       	cpi	r20, 0x01	; 1
    466a:	39 f1       	breq	.+78     	; 0x46ba <fat_seek_file+0x74>
    466c:	42 30       	cpi	r20, 0x02	; 2
    466e:	99 f1       	breq	.+102    	; 0x46d6 <fat_seek_file+0x90>
    4670:	41 11       	cpse	r20, r1
    4672:	f5 cf       	rjmp	.-22     	; 0x465e <fat_seek_file+0x18>
            new_pos = *offset;
    4674:	fb 01       	movw	r30, r22
    4676:	c0 80       	ld	r12, Z
    4678:	d1 80       	ldd	r13, Z+1	; 0x01
    467a:	e2 80       	ldd	r14, Z+2	; 0x02
    467c:	f3 80       	ldd	r15, Z+3	; 0x03
    if(new_pos > fd->dir_entry.file_size
    467e:	8d a1       	ldd	r24, Y+37	; 0x25
    4680:	9e a1       	ldd	r25, Y+38	; 0x26
    4682:	af a1       	ldd	r26, Y+39	; 0x27
    4684:	b8 a5       	ldd	r27, Y+40	; 0x28
    4686:	8c 15       	cp	r24, r12
    4688:	9d 05       	cpc	r25, r13
    468a:	ae 05       	cpc	r26, r14
    468c:	bf 05       	cpc	r27, r15
    468e:	40 f1       	brcs	.+80     	; 0x46e0 <fat_seek_file+0x9a>
    fd->pos = new_pos;
    4690:	cd a6       	std	Y+45, r12	; 0x2d
    4692:	de a6       	std	Y+46, r13	; 0x2e
    4694:	ef a6       	std	Y+47, r14	; 0x2f
    4696:	f8 aa       	std	Y+48, r15	; 0x30
    fd->pos_cluster = 0;
    4698:	1a aa       	std	Y+50, r1	; 0x32
    469a:	19 aa       	std	Y+49, r1	; 0x31
    *offset = (int32_t) new_pos;
    469c:	f8 01       	movw	r30, r16
    469e:	c0 82       	st	Z, r12
    46a0:	d1 82       	std	Z+1, r13	; 0x01
    46a2:	e2 82       	std	Z+2, r14	; 0x02
    46a4:	f3 82       	std	Z+3, r15	; 0x03
    return 1;
    46a6:	81 e0       	ldi	r24, 0x01	; 1
}
    46a8:	df 91       	pop	r29
    46aa:	cf 91       	pop	r28
    46ac:	1f 91       	pop	r17
    46ae:	0f 91       	pop	r16
    46b0:	ff 90       	pop	r15
    46b2:	ef 90       	pop	r14
    46b4:	df 90       	pop	r13
    46b6:	cf 90       	pop	r12
    46b8:	08 95       	ret
    uint32_t new_pos = fd->pos;
    46ba:	cd a4       	ldd	r12, Y+45	; 0x2d
    46bc:	de a4       	ldd	r13, Y+46	; 0x2e
    46be:	ef a4       	ldd	r14, Y+47	; 0x2f
    46c0:	f8 a8       	ldd	r15, Y+48	; 0x30
            new_pos = fd->dir_entry.file_size + *offset;
    46c2:	f8 01       	movw	r30, r16
    46c4:	80 81       	ld	r24, Z
    46c6:	91 81       	ldd	r25, Z+1	; 0x01
    46c8:	a2 81       	ldd	r26, Z+2	; 0x02
    46ca:	b3 81       	ldd	r27, Z+3	; 0x03
    46cc:	c8 0e       	add	r12, r24
    46ce:	d9 1e       	adc	r13, r25
    46d0:	ea 1e       	adc	r14, r26
    46d2:	fb 1e       	adc	r15, r27
            break;
    46d4:	d4 cf       	rjmp	.-88     	; 0x467e <fat_seek_file+0x38>
            new_pos = fd->dir_entry.file_size + *offset;
    46d6:	cd a0       	ldd	r12, Y+37	; 0x25
    46d8:	de a0       	ldd	r13, Y+38	; 0x26
    46da:	ef a0       	ldd	r14, Y+39	; 0x27
    46dc:	f8 a4       	ldd	r15, Y+40	; 0x28
    46de:	f1 cf       	rjmp	.-30     	; 0x46c2 <fat_seek_file+0x7c>
       && !fat_resize_file(fd, new_pos)
    46e0:	b7 01       	movw	r22, r14
    46e2:	a6 01       	movw	r20, r12
    46e4:	ce 01       	movw	r24, r28
    46e6:	0e 94 1c 22 	call	0x4438	; 0x4438 <fat_resize_file>
    46ea:	81 11       	cpse	r24, r1
    46ec:	d1 cf       	rjmp	.-94     	; 0x4690 <fat_seek_file+0x4a>
    46ee:	b7 cf       	rjmp	.-146    	; 0x465e <fat_seek_file+0x18>

000046f0 <fat_open_dir>:
{
    46f0:	cf 93       	push	r28
    46f2:	df 93       	push	r29
    46f4:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    46f6:	00 97       	sbiw	r24, 0x00	; 0
    46f8:	61 f1       	breq	.+88     	; 0x4752 <fat_open_dir+0x62>
    46fa:	61 15       	cp	r22, r1
    46fc:	71 05       	cpc	r23, r1
    46fe:	91 f0       	breq	.+36     	; 0x4724 <fat_open_dir+0x34>
    4700:	fb 01       	movw	r30, r22
    4702:	40 a1       	ldd	r20, Z+32	; 0x20
    4704:	44 ff       	sbrs	r20, 4
    4706:	0e c0       	rjmp	.+28     	; 0x4724 <fat_open_dir+0x34>
        if(!dd->fs)
    4708:	40 91 c1 02 	lds	r20, 0x02C1	; 0x8002c1 <fat_dir_handles>
    470c:	50 91 c2 02 	lds	r21, 0x02C2	; 0x8002c2 <fat_dir_handles+0x1>
    4710:	45 2b       	or	r20, r21
    4712:	59 f0       	breq	.+22     	; 0x472a <fat_open_dir+0x3a>
    4714:	40 91 f2 02 	lds	r20, 0x02F2	; 0x8002f2 <fat_dir_handles+0x31>
    4718:	50 91 f3 02 	lds	r21, 0x02F3	; 0x8002f3 <fat_dir_handles+0x32>
        ++dd;
    471c:	c2 ef       	ldi	r28, 0xF2	; 242
    471e:	d2 e0       	ldi	r29, 0x02	; 2
        if(!dd->fs)
    4720:	45 2b       	or	r20, r21
    4722:	29 f0       	breq	.+10     	; 0x472e <fat_open_dir+0x3e>
        return 0;
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	14 c0       	rjmp	.+40     	; 0x4752 <fat_open_dir+0x62>
    struct fat_dir_struct* dd = fat_dir_handles;
    472a:	c1 ec       	ldi	r28, 0xC1	; 193
    472c:	d2 e0       	ldi	r29, 0x02	; 2
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    472e:	de 01       	movw	r26, r28
    4730:	12 96       	adiw	r26, 0x02	; 2
    4732:	4b e2       	ldi	r20, 0x2B	; 43
    4734:	f9 01       	movw	r30, r18
    4736:	01 90       	ld	r0, Z+
    4738:	0d 92       	st	X+, r0
    473a:	4a 95       	dec	r20
    473c:	e1 f7       	brne	.-8      	; 0x4736 <fat_open_dir+0x46>
    dd->fs = fs;
    473e:	99 83       	std	Y+1, r25	; 0x01
    4740:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
    4742:	f9 01       	movw	r30, r18
    4744:	81 a1       	ldd	r24, Z+33	; 0x21
    4746:	92 a1       	ldd	r25, Z+34	; 0x22
    4748:	9e a7       	std	Y+46, r25	; 0x2e
    474a:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
    474c:	18 aa       	std	Y+48, r1	; 0x30
    474e:	1f a6       	std	Y+47, r1	; 0x2f
    return dd;
    4750:	ce 01       	movw	r24, r28
}
    4752:	df 91       	pop	r29
    4754:	cf 91       	pop	r28
    4756:	08 95       	ret

00004758 <fat_close_dir>:
{
    4758:	fc 01       	movw	r30, r24
    if(dd)
    475a:	89 2b       	or	r24, r25
    475c:	11 f0       	breq	.+4      	; 0x4762 <fat_close_dir+0xa>
        dd->fs = 0;
    475e:	11 82       	std	Z+1, r1	; 0x01
    4760:	10 82       	st	Z, r1
}
    4762:	08 95       	ret

00004764 <fat_reset_dir>:
{
    4764:	fc 01       	movw	r30, r24
    if(!dd)
    4766:	89 2b       	or	r24, r25
    4768:	41 f0       	breq	.+16     	; 0x477a <fat_reset_dir+0x16>
    dd->entry_cluster = dd->dir_entry.cluster;
    476a:	83 a1       	ldd	r24, Z+35	; 0x23
    476c:	94 a1       	ldd	r25, Z+36	; 0x24
    476e:	96 a7       	std	Z+46, r25	; 0x2e
    4770:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
    4772:	10 aa       	std	Z+48, r1	; 0x30
    4774:	17 a6       	std	Z+47, r1	; 0x2f
    return 1;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	08 95       	ret
        return 0;
    477a:	80 e0       	ldi	r24, 0x00	; 0
}
    477c:	08 95       	ret

0000477e <fat_read_dir>:
{
    477e:	2f 92       	push	r2
    4780:	3f 92       	push	r3
    4782:	4f 92       	push	r4
    4784:	5f 92       	push	r5
    4786:	6f 92       	push	r6
    4788:	7f 92       	push	r7
    478a:	8f 92       	push	r8
    478c:	9f 92       	push	r9
    478e:	af 92       	push	r10
    4790:	bf 92       	push	r11
    4792:	cf 92       	push	r12
    4794:	df 92       	push	r13
    4796:	ef 92       	push	r14
    4798:	ff 92       	push	r15
    479a:	0f 93       	push	r16
    479c:	1f 93       	push	r17
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	aa 97       	sbiw	r28, 0x2a	; 42
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	5c 01       	movw	r10, r24
    47b4:	fb 01       	movw	r30, r22
    if(!dd || !dir_entry)
    47b6:	00 97       	sbiw	r24, 0x00	; 0
    47b8:	a1 f0       	breq	.+40     	; 0x47e2 <fat_read_dir+0x64>
    47ba:	ef 2b       	or	r30, r31
    47bc:	91 f0       	breq	.+36     	; 0x47e2 <fat_read_dir+0x64>
    struct fat_fs_struct* fs = dd->fs;
    47be:	dc 01       	movw	r26, r24
    47c0:	4d 90       	ld	r4, X+
    47c2:	5c 90       	ld	r5, X
    uint16_t cluster_size = header->cluster_size;
    47c4:	d2 01       	movw	r26, r4
    47c6:	50 96       	adiw	r26, 0x10	; 16
    47c8:	2d 90       	ld	r2, X+
    47ca:	3c 90       	ld	r3, X
    uint16_t cluster_offset = dd->entry_offset;
    47cc:	dc 01       	movw	r26, r24
    47ce:	9f 96       	adiw	r26, 0x2f	; 47
    47d0:	8d 91       	ld	r24, X+
    47d2:	9c 91       	ld	r25, X
    47d4:	d0 97       	sbiw	r26, 0x30	; 48
    if(cluster_offset >= cluster_size)
    47d6:	82 15       	cp	r24, r2
    47d8:	93 05       	cpc	r25, r3
    47da:	28 f0       	brcs	.+10     	; 0x47e6 <fat_read_dir+0x68>
        fat_reset_dir(dd);
    47dc:	c5 01       	movw	r24, r10
    47de:	0e 94 b2 23 	call	0x4764	; 0x4764 <fat_reset_dir>
        return 0;
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	76 c0       	rjmp	.+236    	; 0x48d2 <fat_read_dir+0x154>
    cluster_t cluster_num = dd->entry_cluster;
    47e6:	9d 96       	adiw	r26, 0x2d	; 45
    47e8:	8d 90       	ld	r8, X+
    47ea:	9c 90       	ld	r9, X
    memset(&arg, 0, sizeof(arg));
    47ec:	ae 01       	movw	r20, r28
    47ee:	4d 5d       	subi	r20, 0xDD	; 221
    47f0:	5f 4f       	sbci	r21, 0xFF	; 255
    47f2:	24 e0       	ldi	r18, 0x04	; 4
    47f4:	da 01       	movw	r26, r20
    47f6:	1d 92       	st	X+, r1
    47f8:	2a 95       	dec	r18
    47fa:	e9 f7       	brne	.-6      	; 0x47f6 <fat_read_dir+0x78>
    memset(dir_entry, 0, sizeof(*dir_entry));
    47fc:	2b e2       	ldi	r18, 0x2B	; 43
    47fe:	db 01       	movw	r26, r22
    4800:	1d 92       	st	X+, r1
    4802:	2a 95       	dec	r18
    4804:	e9 f7       	brne	.-6      	; 0x4800 <fat_read_dir+0x82>
    arg.dir_entry = dir_entry;
    4806:	7a a3       	std	Y+34, r23	; 0x22
    4808:	69 a3       	std	Y+33, r22	; 0x21
    if(cluster_num == 0)
    480a:	81 14       	cp	r8, r1
    480c:	91 04       	cpc	r9, r1
    480e:	39 f4       	brne	.+14     	; 0x481e <fat_read_dir+0xa0>
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    4810:	f2 01       	movw	r30, r4
    4812:	22 88       	ldd	r2, Z+18	; 0x12
    4814:	33 88       	ldd	r3, Z+19	; 0x13
    4816:	26 89       	ldd	r18, Z+22	; 0x16
    4818:	37 89       	ldd	r19, Z+23	; 0x17
    481a:	22 1a       	sub	r2, r18
    481c:	33 0a       	sbc	r3, r19
{
    481e:	3c 01       	movw	r6, r24
    while(!arg.finished)
    4820:	8e a1       	ldd	r24, Y+38	; 0x26
    4822:	81 11       	cpse	r24, r1
    4824:	4c c0       	rjmp	.+152    	; 0x48be <fat_read_dir+0x140>
        uint16_t cluster_left = cluster_size - cluster_offset;
    4826:	81 01       	movw	r16, r2
    4828:	06 19       	sub	r16, r6
    482a:	17 09       	sbc	r17, r7
        offset_t pos = cluster_offset;
    482c:	63 01       	movw	r12, r6
    482e:	f1 2c       	mov	r15, r1
    4830:	e1 2c       	mov	r14, r1
        if(cluster_num == 0)
    4832:	81 14       	cp	r8, r1
    4834:	91 04       	cpc	r9, r1
    4836:	09 f0       	breq	.+2      	; 0x483a <fat_read_dir+0xbc>
    4838:	65 c0       	rjmp	.+202    	; 0x4904 <fat_read_dir+0x186>
            pos += header->root_dir_offset;
    483a:	f2 01       	movw	r30, r4
    483c:	86 89       	ldd	r24, Z+22	; 0x16
    483e:	97 89       	ldd	r25, Z+23	; 0x17
    4840:	a0 8d       	ldd	r26, Z+24	; 0x18
    4842:	b1 8d       	ldd	r27, Z+25	; 0x19
    4844:	a7 01       	movw	r20, r14
    4846:	93 01       	movw	r18, r6
    4848:	28 0f       	add	r18, r24
    484a:	39 1f       	adc	r19, r25
    484c:	4a 1f       	adc	r20, r26
    484e:	5b 1f       	adc	r21, r27
    4850:	2f a3       	std	Y+39, r18	; 0x27
    4852:	38 a7       	std	Y+40, r19	; 0x28
    4854:	49 a7       	std	Y+41, r20	; 0x29
    4856:	5a a7       	std	Y+42, r21	; 0x2a
        arg.bytes_read = 0;
    4858:	1c a2       	std	Y+36, r1	; 0x24
    485a:	1b a2       	std	Y+35, r1	; 0x23
        if(!fs->partition->device_read_interval(pos,
    485c:	d2 01       	movw	r26, r4
    485e:	ed 91       	ld	r30, X+
    4860:	fc 91       	ld	r31, X
    4862:	02 80       	ldd	r0, Z+2	; 0x02
    4864:	f3 81       	ldd	r31, Z+3	; 0x03
    4866:	e0 2d       	mov	r30, r0
    4868:	9e 01       	movw	r18, r28
    486a:	2f 5d       	subi	r18, 0xDF	; 223
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	69 01       	movw	r12, r18
    4870:	83 e6       	ldi	r24, 0x63	; 99
    4872:	e8 2e       	mov	r14, r24
    4874:	88 e1       	ldi	r24, 0x18	; 24
    4876:	f8 2e       	mov	r15, r24
    4878:	20 e2       	ldi	r18, 0x20	; 32
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	ae 01       	movw	r20, r28
    487e:	4f 5f       	subi	r20, 0xFF	; 255
    4880:	5f 4f       	sbci	r21, 0xFF	; 255
    4882:	6f a1       	ldd	r22, Y+39	; 0x27
    4884:	78 a5       	ldd	r23, Y+40	; 0x28
    4886:	89 a5       	ldd	r24, Y+41	; 0x29
    4888:	9a a5       	ldd	r25, Y+42	; 0x2a
    488a:	09 95       	icall
    488c:	88 23       	and	r24, r24
    488e:	09 f1       	breq	.+66     	; 0x48d2 <fat_read_dir+0x154>
        cluster_offset += arg.bytes_read;
    4890:	8b a1       	ldd	r24, Y+35	; 0x23
    4892:	9c a1       	ldd	r25, Y+36	; 0x24
    4894:	68 0e       	add	r6, r24
    4896:	79 1e       	adc	r7, r25
        if(cluster_offset >= cluster_size)
    4898:	62 14       	cp	r6, r2
    489a:	73 04       	cpc	r7, r3
    489c:	08 f4       	brcc	.+2      	; 0x48a0 <fat_read_dir+0x122>
    489e:	c0 cf       	rjmp	.-128    	; 0x4820 <fat_read_dir+0xa2>
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    48a0:	b4 01       	movw	r22, r8
    48a2:	c2 01       	movw	r24, r4
    48a4:	0e 94 72 19 	call	0x32e4	; 0x32e4 <fat_get_next_cluster>
    48a8:	4c 01       	movw	r8, r24
                cluster_offset = 0;
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	80 e0       	ldi	r24, 0x00	; 0
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    48ae:	81 14       	cp	r8, r1
    48b0:	91 04       	cpc	r9, r1
    48b2:	09 f0       	breq	.+2      	; 0x48b6 <fat_read_dir+0x138>
    48b4:	b4 cf       	rjmp	.-152    	; 0x481e <fat_read_dir+0xa0>
            if(!arg.finished)
    48b6:	8e a1       	ldd	r24, Y+38	; 0x26
    48b8:	88 23       	and	r24, r24
    48ba:	09 f4       	brne	.+2      	; 0x48be <fat_read_dir+0x140>
    48bc:	8f cf       	rjmp	.-226    	; 0x47dc <fat_read_dir+0x5e>
    dd->entry_cluster = cluster_num;
    48be:	d5 01       	movw	r26, r10
    48c0:	9e 96       	adiw	r26, 0x2e	; 46
    48c2:	9c 92       	st	X, r9
    48c4:	8e 92       	st	-X, r8
    48c6:	9d 97       	sbiw	r26, 0x2d	; 45
    dd->entry_offset = cluster_offset;
    48c8:	d0 96       	adiw	r26, 0x30	; 48
    48ca:	7c 92       	st	X, r7
    48cc:	6e 92       	st	-X, r6
    48ce:	9f 97       	sbiw	r26, 0x2f	; 47
    return arg.finished;
    48d0:	8e a1       	ldd	r24, Y+38	; 0x26
}
    48d2:	aa 96       	adiw	r28, 0x2a	; 42
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	f8 94       	cli
    48d8:	de bf       	out	0x3e, r29	; 62
    48da:	0f be       	out	0x3f, r0	; 63
    48dc:	cd bf       	out	0x3d, r28	; 61
    48de:	df 91       	pop	r29
    48e0:	cf 91       	pop	r28
    48e2:	1f 91       	pop	r17
    48e4:	0f 91       	pop	r16
    48e6:	ff 90       	pop	r15
    48e8:	ef 90       	pop	r14
    48ea:	df 90       	pop	r13
    48ec:	cf 90       	pop	r12
    48ee:	bf 90       	pop	r11
    48f0:	af 90       	pop	r10
    48f2:	9f 90       	pop	r9
    48f4:	8f 90       	pop	r8
    48f6:	7f 90       	pop	r7
    48f8:	6f 90       	pop	r6
    48fa:	5f 90       	pop	r5
    48fc:	4f 90       	pop	r4
    48fe:	3f 90       	pop	r3
    4900:	2f 90       	pop	r2
    4902:	08 95       	ret
            pos += fat_cluster_offset(fs, cluster_num);
    4904:	b4 01       	movw	r22, r8
    4906:	c2 01       	movw	r24, r4
    4908:	0e 94 2a 1b 	call	0x3654	; 0x3654 <fat_cluster_offset>
    490c:	dc 01       	movw	r26, r24
    490e:	cb 01       	movw	r24, r22
    4910:	8c 0d       	add	r24, r12
    4912:	9d 1d       	adc	r25, r13
    4914:	ae 1d       	adc	r26, r14
    4916:	bf 1d       	adc	r27, r15
    4918:	8f a3       	std	Y+39, r24	; 0x27
    491a:	98 a7       	std	Y+40, r25	; 0x28
    491c:	a9 a7       	std	Y+41, r26	; 0x29
    491e:	ba a7       	std	Y+42, r27	; 0x2a
    4920:	9b cf       	rjmp	.-202    	; 0x4858 <fat_read_dir+0xda>

00004922 <fat_get_dir_entry_of_path>:
{
    4922:	8f 92       	push	r8
    4924:	9f 92       	push	r9
    4926:	af 92       	push	r10
    4928:	bf 92       	push	r11
    492a:	cf 92       	push	r12
    492c:	df 92       	push	r13
    492e:	ef 92       	push	r14
    4930:	ff 92       	push	r15
    4932:	0f 93       	push	r16
    4934:	1f 93       	push	r17
    4936:	cf 93       	push	r28
    4938:	df 93       	push	r29
    493a:	5c 01       	movw	r10, r24
    493c:	4b 01       	movw	r8, r22
    493e:	8a 01       	movw	r16, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    4940:	89 2b       	or	r24, r25
    4942:	09 f4       	brne	.+2      	; 0x4946 <fat_get_dir_entry_of_path+0x24>
    4944:	76 c0       	rjmp	.+236    	; 0x4a32 <fat_get_dir_entry_of_path+0x110>
    4946:	61 15       	cp	r22, r1
    4948:	71 05       	cpc	r23, r1
    494a:	09 f4       	brne	.+2      	; 0x494e <fat_get_dir_entry_of_path+0x2c>
    494c:	72 c0       	rjmp	.+228    	; 0x4a32 <fat_get_dir_entry_of_path+0x110>
    494e:	fb 01       	movw	r30, r22
    4950:	80 81       	ld	r24, Z
    4952:	88 23       	and	r24, r24
    4954:	09 f4       	brne	.+2      	; 0x4958 <fat_get_dir_entry_of_path+0x36>
    4956:	6d c0       	rjmp	.+218    	; 0x4a32 <fat_get_dir_entry_of_path+0x110>
    4958:	45 2b       	or	r20, r21
    495a:	09 f4       	brne	.+2      	; 0x495e <fat_get_dir_entry_of_path+0x3c>
    495c:	6a c0       	rjmp	.+212    	; 0x4a32 <fat_get_dir_entry_of_path+0x110>
    if(path[0] == '/')
    495e:	8f 32       	cpi	r24, 0x2F	; 47
    4960:	19 f4       	brne	.+6      	; 0x4968 <fat_get_dir_entry_of_path+0x46>
        ++path;
    4962:	ff ef       	ldi	r31, 0xFF	; 255
    4964:	8f 1a       	sub	r8, r31
    4966:	9f 0a       	sbc	r9, r31
    memset(dir_entry, 0, sizeof(*dir_entry));
    4968:	8b e2       	ldi	r24, 0x2B	; 43
    496a:	f8 01       	movw	r30, r16
    496c:	11 92       	st	Z+, r1
    496e:	8a 95       	dec	r24
    4970:	e9 f7       	brne	.-6      	; 0x496c <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    4972:	80 e1       	ldi	r24, 0x10	; 16
    4974:	f8 01       	movw	r30, r16
    4976:	80 a3       	std	Z+32, r24	; 0x20
        if(path[0] == '\0')
    4978:	f4 01       	movw	r30, r8
    497a:	80 81       	ld	r24, Z
    497c:	81 11       	cpse	r24, r1
    497e:	0e c0       	rjmp	.+28     	; 0x499c <fat_get_dir_entry_of_path+0x7a>
            return 1;
    4980:	81 e0       	ldi	r24, 0x01	; 1
}
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	1f 91       	pop	r17
    4988:	0f 91       	pop	r16
    498a:	ff 90       	pop	r15
    498c:	ef 90       	pop	r14
    498e:	df 90       	pop	r13
    4990:	cf 90       	pop	r12
    4992:	bf 90       	pop	r11
    4994:	af 90       	pop	r10
    4996:	9f 90       	pop	r9
    4998:	8f 90       	pop	r8
    499a:	08 95       	ret
        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    499c:	b8 01       	movw	r22, r16
    499e:	c5 01       	movw	r24, r10
    49a0:	0e 94 78 23 	call	0x46f0	; 0x46f0 <fat_open_dir>
    49a4:	7c 01       	movw	r14, r24
        if(!dd)
    49a6:	89 2b       	or	r24, r25
    49a8:	09 f4       	brne	.+2      	; 0x49ac <fat_get_dir_entry_of_path+0x8a>
    49aa:	43 c0       	rjmp	.+134    	; 0x4a32 <fat_get_dir_entry_of_path+0x110>
        const char* sub_path = strchr(path, '/');
    49ac:	6f e2       	ldi	r22, 0x2F	; 47
    49ae:	70 e0       	ldi	r23, 0x00	; 0
    49b0:	c4 01       	movw	r24, r8
    49b2:	0e 94 13 34 	call	0x6826	; 0x6826 <strchr>
    49b6:	ec 01       	movw	r28, r24
        if(sub_path)
    49b8:	00 97       	sbiw	r24, 0x00	; 0
    49ba:	81 f0       	breq	.+32     	; 0x49dc <fat_get_dir_entry_of_path+0xba>
            length_to_sep = sub_path - path;
    49bc:	c8 2e       	mov	r12, r24
    49be:	c8 18       	sub	r12, r8
            ++sub_path;
    49c0:	21 96       	adiw	r28, 0x01	; 1
            if((strlen(dir_entry->long_name) != length_to_sep ||
    49c2:	d1 2c       	mov	r13, r1
        while(fat_read_dir(dd, dir_entry))
    49c4:	b8 01       	movw	r22, r16
    49c6:	c7 01       	movw	r24, r14
    49c8:	0e 94 bf 23 	call	0x477e	; 0x477e <fat_read_dir>
    49cc:	81 11       	cpse	r24, r1
    49ce:	12 c0       	rjmp	.+36     	; 0x49f4 <fat_get_dir_entry_of_path+0xd2>
    49d0:	e4 01       	movw	r28, r8
        fat_close_dir(dd);
    49d2:	c7 01       	movw	r24, r14
    49d4:	0e 94 ac 23 	call	0x4758	; 0x4758 <fat_close_dir>
    {
    49d8:	4e 01       	movw	r8, r28
    49da:	ce cf       	rjmp	.-100    	; 0x4978 <fat_get_dir_entry_of_path+0x56>
            length_to_sep = strlen(path);
    49dc:	e4 01       	movw	r28, r8
    49de:	09 90       	ld	r0, Y+
    49e0:	00 20       	and	r0, r0
    49e2:	e9 f7       	brne	.-6      	; 0x49de <fat_get_dir_entry_of_path+0xbc>
    49e4:	21 97       	sbiw	r28, 0x01	; 1
    49e6:	c8 19       	sub	r28, r8
    49e8:	d9 09       	sbc	r29, r9
    49ea:	cc 2e       	mov	r12, r28
            sub_path = path + length_to_sep;
    49ec:	c8 0d       	add	r28, r8
    49ee:	d9 2d       	mov	r29, r9
    49f0:	d1 1d       	adc	r29, r1
    49f2:	e7 cf       	rjmp	.-50     	; 0x49c2 <fat_get_dir_entry_of_path+0xa0>
            if((strlen(dir_entry->long_name) != length_to_sep ||
    49f4:	f8 01       	movw	r30, r16
    49f6:	01 90       	ld	r0, Z+
    49f8:	00 20       	and	r0, r0
    49fa:	e9 f7       	brne	.-6      	; 0x49f6 <fat_get_dir_entry_of_path+0xd4>
    49fc:	31 97       	sbiw	r30, 0x01	; 1
    49fe:	e0 1b       	sub	r30, r16
    4a00:	f1 0b       	sbc	r31, r17
    4a02:	ec 15       	cp	r30, r12
    4a04:	fd 05       	cpc	r31, r13
    4a06:	f1 f6       	brne	.-68     	; 0x49c4 <fat_get_dir_entry_of_path+0xa2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    4a08:	a6 01       	movw	r20, r12
    4a0a:	b8 01       	movw	r22, r16
    4a0c:	c4 01       	movw	r24, r8
    4a0e:	0e 94 27 34 	call	0x684e	; 0x684e <strncmp>
            if((strlen(dir_entry->long_name) != length_to_sep ||
    4a12:	89 2b       	or	r24, r25
    4a14:	b9 f6       	brne	.-82     	; 0x49c4 <fat_get_dir_entry_of_path+0xa2>
            fat_close_dir(dd);
    4a16:	c7 01       	movw	r24, r14
    4a18:	0e 94 ac 23 	call	0x4758	; 0x4758 <fat_close_dir>
            if(path[length_to_sep] == '\0')
    4a1c:	c8 0c       	add	r12, r8
    4a1e:	d9 1c       	adc	r13, r9
    4a20:	f6 01       	movw	r30, r12
    4a22:	80 81       	ld	r24, Z
    4a24:	88 23       	and	r24, r24
    4a26:	09 f4       	brne	.+2      	; 0x4a2a <fat_get_dir_entry_of_path+0x108>
    4a28:	ab cf       	rjmp	.-170    	; 0x4980 <fat_get_dir_entry_of_path+0x5e>
            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	80 a1       	ldd	r24, Z+32	; 0x20
    4a2e:	84 fd       	sbrc	r24, 4
    4a30:	02 c0       	rjmp	.+4      	; 0x4a36 <fat_get_dir_entry_of_path+0x114>
        return 0;
    4a32:	80 e0       	ldi	r24, 0x00	; 0
    4a34:	a6 cf       	rjmp	.-180    	; 0x4982 <fat_get_dir_entry_of_path+0x60>
            dd = 0;
    4a36:	f1 2c       	mov	r15, r1
    4a38:	e1 2c       	mov	r14, r1
    4a3a:	cb cf       	rjmp	.-106    	; 0x49d2 <fat_get_dir_entry_of_path+0xb0>

00004a3c <fat_create_file>:
{
    4a3c:	cf 92       	push	r12
    4a3e:	df 92       	push	r13
    4a40:	ef 92       	push	r14
    4a42:	ff 92       	push	r15
    4a44:	0f 93       	push	r16
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	8c 01       	movw	r16, r24
    4a4e:	6b 01       	movw	r12, r22
    4a50:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    4a52:	89 2b       	or	r24, r25
    4a54:	11 f4       	brne	.+4      	; 0x4a5a <fat_create_file+0x1e>
    if(!fat_write_dir_entry(fs, dir_entry))
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	19 c0       	rjmp	.+50     	; 0x4a8c <fat_create_file+0x50>
    if(!parent || !file || !file[0] || !dir_entry)
    4a5a:	61 15       	cp	r22, r1
    4a5c:	71 05       	cpc	r23, r1
    4a5e:	d9 f3       	breq	.-10     	; 0x4a56 <fat_create_file+0x1a>
    4a60:	fb 01       	movw	r30, r22
    4a62:	80 81       	ld	r24, Z
    4a64:	88 23       	and	r24, r24
    4a66:	b9 f3       	breq	.-18     	; 0x4a56 <fat_create_file+0x1a>
    4a68:	20 97       	sbiw	r28, 0x00	; 0
    4a6a:	a9 f3       	breq	.-22     	; 0x4a56 <fat_create_file+0x1a>
        if(!fat_read_dir(parent, dir_entry))
    4a6c:	be 01       	movw	r22, r28
    4a6e:	c8 01       	movw	r24, r16
    4a70:	0e 94 bf 23 	call	0x477e	; 0x477e <fat_read_dir>
    4a74:	88 23       	and	r24, r24
    4a76:	99 f0       	breq	.+38     	; 0x4a9e <fat_create_file+0x62>
        if(strcmp(file, dir_entry->long_name) == 0)
    4a78:	be 01       	movw	r22, r28
    4a7a:	c6 01       	movw	r24, r12
    4a7c:	0e 94 1e 34 	call	0x683c	; 0x683c <strcmp>
    4a80:	89 2b       	or	r24, r25
    4a82:	a1 f7       	brne	.-24     	; 0x4a6c <fat_create_file+0x30>
            fat_reset_dir(parent);
    4a84:	c8 01       	movw	r24, r16
    4a86:	0e 94 b2 23 	call	0x4764	; 0x4764 <fat_reset_dir>
            return 2;
    4a8a:	82 e0       	ldi	r24, 0x02	; 2
}
    4a8c:	df 91       	pop	r29
    4a8e:	cf 91       	pop	r28
    4a90:	1f 91       	pop	r17
    4a92:	0f 91       	pop	r16
    4a94:	ff 90       	pop	r15
    4a96:	ef 90       	pop	r14
    4a98:	df 90       	pop	r13
    4a9a:	cf 90       	pop	r12
    4a9c:	08 95       	ret
    struct fat_fs_struct* fs = parent->fs;
    4a9e:	f8 01       	movw	r30, r16
    4aa0:	e0 80       	ld	r14, Z
    4aa2:	f1 80       	ldd	r15, Z+1	; 0x01
    memset(dir_entry, 0, sizeof(*dir_entry));
    4aa4:	8b e2       	ldi	r24, 0x2B	; 43
    4aa6:	fe 01       	movw	r30, r28
    4aa8:	11 92       	st	Z+, r1
    4aaa:	8a 95       	dec	r24
    4aac:	e9 f7       	brne	.-6      	; 0x4aa8 <fat_create_file+0x6c>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    4aae:	4f e1       	ldi	r20, 0x1F	; 31
    4ab0:	50 e0       	ldi	r21, 0x00	; 0
    4ab2:	b6 01       	movw	r22, r12
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	0e 94 35 34 	call	0x686a	; 0x686a <strncpy>
        return 0;
    4aba:	40 e0       	ldi	r20, 0x00	; 0
    4abc:	50 e0       	ldi	r21, 0x00	; 0
    4abe:	ba 01       	movw	r22, r20
    if(!fs || !dir_entry)
    4ac0:	e1 14       	cp	r14, r1
    4ac2:	f1 04       	cpc	r15, r1
    4ac4:	51 f0       	breq	.+20     	; 0x4ada <fat_create_file+0x9e>
    4ac6:	b8 01       	movw	r22, r16
    4ac8:	6d 5d       	subi	r22, 0xDD	; 221
    4aca:	7f 4f       	sbci	r23, 0xFF	; 255
    4acc:	ae 01       	movw	r20, r28
    4ace:	c7 01       	movw	r24, r14
    4ad0:	0e 94 9a 1b 	call	0x3734	; 0x3734 <fat_find_offset_for_dir_entry.isra.0.part.0>
    4ad4:	46 2f       	mov	r20, r22
    4ad6:	57 2f       	mov	r21, r23
    4ad8:	bc 01       	movw	r22, r24
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    4ada:	4f a3       	std	Y+39, r20	; 0x27
    4adc:	58 a7       	std	Y+40, r21	; 0x28
    4ade:	69 a7       	std	Y+41, r22	; 0x29
    4ae0:	7a a7       	std	Y+42, r23	; 0x2a
    4ae2:	45 2b       	or	r20, r21
    4ae4:	46 2b       	or	r20, r22
    4ae6:	47 2b       	or	r20, r23
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <fat_create_file+0xb0>
    4aea:	b5 cf       	rjmp	.-150    	; 0x4a56 <fat_create_file+0x1a>
    if(!fat_write_dir_entry(fs, dir_entry))
    4aec:	be 01       	movw	r22, r28
    4aee:	c7 01       	movw	r24, r14
    4af0:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4af4:	98 2f       	mov	r25, r24
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	91 11       	cpse	r25, r1
    4afa:	c8 cf       	rjmp	.-112    	; 0x4a8c <fat_create_file+0x50>
    4afc:	ac cf       	rjmp	.-168    	; 0x4a56 <fat_create_file+0x1a>

00004afe <fat_delete_file>:
{
    4afe:	df 92       	push	r13
    4b00:	ef 92       	push	r14
    4b02:	ff 92       	push	r15
    4b04:	0f 93       	push	r16
    4b06:	1f 93       	push	r17
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	cd b7       	in	r28, 0x3d	; 61
    4b0e:	de b7       	in	r29, 0x3e	; 62
    4b10:	60 97       	sbiw	r28, 0x10	; 16
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	8c 01       	movw	r16, r24
    4b1e:	7b 01       	movw	r14, r22
    if(!fs || !dir_entry)
    4b20:	89 2b       	or	r24, r25
    4b22:	09 f4       	brne	.+2      	; 0x4b26 <fat_delete_file+0x28>
    4b24:	69 c0       	rjmp	.+210    	; 0x4bf8 <fat_delete_file+0xfa>
    4b26:	61 15       	cp	r22, r1
    4b28:	71 05       	cpc	r23, r1
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <fat_delete_file+0x30>
    4b2c:	65 c0       	rjmp	.+202    	; 0x4bf8 <fat_delete_file+0xfa>
    offset_t dir_entry_offset = dir_entry->entry_offset;
    4b2e:	db 01       	movw	r26, r22
    4b30:	97 96       	adiw	r26, 0x27	; 39
    4b32:	8d 91       	ld	r24, X+
    4b34:	9d 91       	ld	r25, X+
    4b36:	0d 90       	ld	r0, X+
    4b38:	bc 91       	ld	r27, X
    4b3a:	a0 2d       	mov	r26, r0
    4b3c:	8d 87       	std	Y+13, r24	; 0x0d
    4b3e:	9e 87       	std	Y+14, r25	; 0x0e
    4b40:	af 87       	std	Y+15, r26	; 0x0f
    4b42:	b8 8b       	std	Y+16, r27	; 0x10
    if(!dir_entry_offset)
    4b44:	89 2b       	or	r24, r25
    4b46:	8a 2b       	or	r24, r26
    4b48:	8b 2b       	or	r24, r27
    4b4a:	09 f4       	brne	.+2      	; 0x4b4e <fat_delete_file+0x50>
    4b4c:	55 c0       	rjmp	.+170    	; 0x4bf8 <fat_delete_file+0xfa>
        buffer[0] = FAT_DIRENTRY_DELETED;
    4b4e:	85 ee       	ldi	r24, 0xE5	; 229
    4b50:	d8 2e       	mov	r13, r24
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    4b52:	d8 01       	movw	r26, r16
    4b54:	ed 91       	ld	r30, X+
    4b56:	fc 91       	ld	r31, X
    4b58:	01 90       	ld	r0, Z+
    4b5a:	f0 81       	ld	r31, Z
    4b5c:	e0 2d       	mov	r30, r0
    4b5e:	2c e0       	ldi	r18, 0x0C	; 12
    4b60:	30 e0       	ldi	r19, 0x00	; 0
    4b62:	ae 01       	movw	r20, r28
    4b64:	4f 5f       	subi	r20, 0xFF	; 255
    4b66:	5f 4f       	sbci	r21, 0xFF	; 255
    4b68:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b6e:	98 89       	ldd	r25, Y+16	; 0x10
    4b70:	09 95       	icall
    4b72:	88 23       	and	r24, r24
    4b74:	09 f4       	brne	.+2      	; 0x4b78 <fat_delete_file+0x7a>
    4b76:	40 c0       	rjmp	.+128    	; 0x4bf8 <fat_delete_file+0xfa>
        buffer[0] = FAT_DIRENTRY_DELETED;
    4b78:	d9 82       	std	Y+1, r13	; 0x01
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    4b7a:	d8 01       	movw	r26, r16
    4b7c:	ed 91       	ld	r30, X+
    4b7e:	fc 91       	ld	r31, X
    4b80:	04 80       	ldd	r0, Z+4	; 0x04
    4b82:	f5 81       	ldd	r31, Z+5	; 0x05
    4b84:	e0 2d       	mov	r30, r0
    4b86:	2c e0       	ldi	r18, 0x0C	; 12
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	ae 01       	movw	r20, r28
    4b8c:	4f 5f       	subi	r20, 0xFF	; 255
    4b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b90:	6d 85       	ldd	r22, Y+13	; 0x0d
    4b92:	7e 85       	ldd	r23, Y+14	; 0x0e
    4b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b96:	98 89       	ldd	r25, Y+16	; 0x10
    4b98:	09 95       	icall
    4b9a:	88 23       	and	r24, r24
    4b9c:	69 f1       	breq	.+90     	; 0x4bf8 <fat_delete_file+0xfa>
        if(buffer[11] != 0x0f)
    4b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ba0:	8f 30       	cpi	r24, 0x0F	; 15
    4ba2:	61 f4       	brne	.+24     	; 0x4bbc <fat_delete_file+0xbe>
        dir_entry_offset += 32;
    4ba4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba8:	af 85       	ldd	r26, Y+15	; 0x0f
    4baa:	b8 89       	ldd	r27, Y+16	; 0x10
    4bac:	80 96       	adiw	r24, 0x20	; 32
    4bae:	a1 1d       	adc	r26, r1
    4bb0:	b1 1d       	adc	r27, r1
    4bb2:	8d 87       	std	Y+13, r24	; 0x0d
    4bb4:	9e 87       	std	Y+14, r25	; 0x0e
    4bb6:	af 87       	std	Y+15, r26	; 0x0f
    4bb8:	b8 8b       	std	Y+16, r27	; 0x10
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    4bba:	cb cf       	rjmp	.-106    	; 0x4b52 <fat_delete_file+0x54>
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    4bbc:	d7 01       	movw	r26, r14
    4bbe:	91 96       	adiw	r26, 0x21	; 33
    4bc0:	6d 91       	ld	r22, X+
    4bc2:	7c 91       	ld	r23, X
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	61 15       	cp	r22, r1
    4bc8:	71 05       	cpc	r23, r1
    4bca:	41 f0       	breq	.+16     	; 0x4bdc <fat_delete_file+0xde>
    4bcc:	c8 01       	movw	r24, r16
    4bce:	0e 94 bd 19 	call	0x337a	; 0x337a <fat_free_clusters>
    4bd2:	91 e0       	ldi	r25, 0x01	; 1
    4bd4:	81 11       	cpse	r24, r1
    4bd6:	01 c0       	rjmp	.+2      	; 0x4bda <fat_delete_file+0xdc>
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	89 2f       	mov	r24, r25
}
    4bdc:	60 96       	adiw	r28, 0x10	; 16
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	de bf       	out	0x3e, r29	; 62
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	df 91       	pop	r29
    4bea:	cf 91       	pop	r28
    4bec:	1f 91       	pop	r17
    4bee:	0f 91       	pop	r16
    4bf0:	ff 90       	pop	r15
    4bf2:	ef 90       	pop	r14
    4bf4:	df 90       	pop	r13
    4bf6:	08 95       	ret
        return 0;
    4bf8:	80 e0       	ldi	r24, 0x00	; 0
    4bfa:	f0 cf       	rjmp	.-32     	; 0x4bdc <fat_delete_file+0xde>

00004bfc <fat_move_file>:
{
    4bfc:	df 92       	push	r13
    4bfe:	ef 92       	push	r14
    4c00:	ff 92       	push	r15
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
    4c0e:	ab 97       	sbiw	r28, 0x2b	; 43
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	de bf       	out	0x3e, r29	; 62
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	7c 01       	movw	r14, r24
    4c1c:	8b 01       	movw	r16, r22
    4c1e:	ca 01       	movw	r24, r20
    4c20:	b9 01       	movw	r22, r18
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
    4c22:	e1 14       	cp	r14, r1
    4c24:	f1 04       	cpc	r15, r1
    4c26:	81 f4       	brne	.+32     	; 0x4c48 <fat_move_file+0x4c>
        return 0;
    4c28:	d1 2c       	mov	r13, r1
}
    4c2a:	8d 2d       	mov	r24, r13
    4c2c:	ab 96       	adiw	r28, 0x2b	; 43
    4c2e:	0f b6       	in	r0, 0x3f	; 63
    4c30:	f8 94       	cli
    4c32:	de bf       	out	0x3e, r29	; 62
    4c34:	0f be       	out	0x3f, r0	; 63
    4c36:	cd bf       	out	0x3d, r28	; 61
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	ff 90       	pop	r15
    4c42:	ef 90       	pop	r14
    4c44:	df 90       	pop	r13
    4c46:	08 95       	ret
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
    4c48:	01 15       	cp	r16, r1
    4c4a:	11 05       	cpc	r17, r1
    4c4c:	69 f3       	breq	.-38     	; 0x4c28 <fat_move_file+0x2c>
    4c4e:	00 97       	sbiw	r24, 0x00	; 0
    4c50:	59 f3       	breq	.-42     	; 0x4c28 <fat_move_file+0x2c>
    4c52:	21 15       	cp	r18, r1
    4c54:	31 05       	cpc	r19, r1
    4c56:	21 f0       	breq	.+8      	; 0x4c60 <fat_move_file+0x64>
    4c58:	f9 01       	movw	r30, r18
    4c5a:	20 81       	ld	r18, Z
    4c5c:	22 23       	and	r18, r18
    4c5e:	21 f3       	breq	.-56     	; 0x4c28 <fat_move_file+0x2c>
    if(fs != parent_new->fs)
    4c60:	fc 01       	movw	r30, r24
    4c62:	20 81       	ld	r18, Z
    4c64:	31 81       	ldd	r19, Z+1	; 0x01
    4c66:	2e 15       	cp	r18, r14
    4c68:	3f 05       	cpc	r19, r15
    4c6a:	f1 f6       	brne	.-68     	; 0x4c28 <fat_move_file+0x2c>
    if(!file_new)
    4c6c:	61 15       	cp	r22, r1
    4c6e:	71 05       	cpc	r23, r1
    4c70:	09 f4       	brne	.+2      	; 0x4c74 <fat_move_file+0x78>
        file_new = dir_entry->long_name;
    4c72:	b8 01       	movw	r22, r16
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
    4c74:	ae 01       	movw	r20, r28
    4c76:	4f 5f       	subi	r20, 0xFF	; 255
    4c78:	5f 4f       	sbci	r21, 0xFF	; 255
    4c7a:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <fat_create_file>
    4c7e:	88 23       	and	r24, r24
    4c80:	99 f2       	breq	.-90     	; 0x4c28 <fat_move_file+0x2c>
    dir_entry_new.attributes = dir_entry->attributes;
    4c82:	f8 01       	movw	r30, r16
    4c84:	80 a1       	ldd	r24, Z+32	; 0x20
    4c86:	89 a3       	std	Y+33, r24	; 0x21
    dir_entry_new.cluster = dir_entry->cluster;
    4c88:	81 a1       	ldd	r24, Z+33	; 0x21
    4c8a:	92 a1       	ldd	r25, Z+34	; 0x22
    4c8c:	9b a3       	std	Y+35, r25	; 0x23
    4c8e:	8a a3       	std	Y+34, r24	; 0x22
    dir_entry_new.file_size = dir_entry->file_size;
    4c90:	83 a1       	ldd	r24, Z+35	; 0x23
    4c92:	94 a1       	ldd	r25, Z+36	; 0x24
    4c94:	a5 a1       	ldd	r26, Z+37	; 0x25
    4c96:	b6 a1       	ldd	r27, Z+38	; 0x26
    4c98:	8c a3       	std	Y+36, r24	; 0x24
    4c9a:	9d a3       	std	Y+37, r25	; 0x25
    4c9c:	ae a3       	std	Y+38, r26	; 0x26
    4c9e:	bf a3       	std	Y+39, r27	; 0x27
    if(!fat_write_dir_entry(fs, &dir_entry_new))
    4ca0:	be 01       	movw	r22, r28
    4ca2:	6f 5f       	subi	r22, 0xFF	; 255
    4ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca6:	c7 01       	movw	r24, r14
    4ca8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4cac:	d8 2e       	mov	r13, r24
    4cae:	81 11       	cpse	r24, r1
    4cb0:	07 c0       	rjmp	.+14     	; 0x4cc0 <fat_move_file+0xc4>
        fat_delete_file(fs, &dir_entry_new);
    4cb2:	be 01       	movw	r22, r28
    4cb4:	6f 5f       	subi	r22, 0xFF	; 255
    4cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cb8:	c7 01       	movw	r24, r14
    4cba:	0e 94 7f 25 	call	0x4afe	; 0x4afe <fat_delete_file>
        return 0;
    4cbe:	b5 cf       	rjmp	.-150    	; 0x4c2a <fat_move_file+0x2e>
    dir_entry->cluster = 0;
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	12 a2       	std	Z+34, r1	; 0x22
    4cc4:	11 a2       	std	Z+33, r1	; 0x21
    if(!fat_delete_file(fs, dir_entry))
    4cc6:	b8 01       	movw	r22, r16
    4cc8:	c7 01       	movw	r24, r14
    4cca:	0e 94 7f 25 	call	0x4afe	; 0x4afe <fat_delete_file>
    4cce:	88 23       	and	r24, r24
    4cd0:	09 f4       	brne	.+2      	; 0x4cd4 <fat_move_file+0xd8>
    4cd2:	aa cf       	rjmp	.-172    	; 0x4c28 <fat_move_file+0x2c>
    *dir_entry = dir_entry_new;
    4cd4:	8b e2       	ldi	r24, 0x2B	; 43
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	31 96       	adiw	r30, 0x01	; 1
    4cda:	d8 01       	movw	r26, r16
    4cdc:	01 90       	ld	r0, Z+
    4cde:	0d 92       	st	X+, r0
    4ce0:	8a 95       	dec	r24
    4ce2:	e1 f7       	brne	.-8      	; 0x4cdc <fat_move_file+0xe0>
    return 1;
    4ce4:	dd 24       	eor	r13, r13
    4ce6:	d3 94       	inc	r13
    4ce8:	a0 cf       	rjmp	.-192    	; 0x4c2a <fat_move_file+0x2e>

00004cea <fat_create_dir>:
{
    4cea:	8f 92       	push	r8
    4cec:	9f 92       	push	r9
    4cee:	af 92       	push	r10
    4cf0:	bf 92       	push	r11
    4cf2:	cf 92       	push	r12
    4cf4:	df 92       	push	r13
    4cf6:	ef 92       	push	r14
    4cf8:	ff 92       	push	r15
    4cfa:	0f 93       	push	r16
    4cfc:	1f 93       	push	r17
    4cfe:	cf 93       	push	r28
    4d00:	df 93       	push	r29
    4d02:	00 d0       	rcall	.+0      	; 0x4d04 <fat_create_dir+0x1a>
    4d04:	00 d0       	rcall	.+0      	; 0x4d06 <fat_create_dir+0x1c>
    4d06:	00 d0       	rcall	.+0      	; 0x4d08 <fat_create_dir+0x1e>
    4d08:	cd b7       	in	r28, 0x3d	; 61
    4d0a:	de b7       	in	r29, 0x3e	; 62
    4d0c:	5c 01       	movw	r10, r24
    4d0e:	4b 01       	movw	r8, r22
    4d10:	4d 83       	std	Y+5, r20	; 0x05
    4d12:	5e 83       	std	Y+6, r21	; 0x06
    if(!parent || !dir || !dir[0] || !dir_entry)
    4d14:	89 2b       	or	r24, r25
    4d16:	a9 f4       	brne	.+42     	; 0x4d42 <fat_create_dir+0x58>
        return 0;
    4d18:	10 e0       	ldi	r17, 0x00	; 0
}
    4d1a:	81 2f       	mov	r24, r17
    4d1c:	26 96       	adiw	r28, 0x06	; 6
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	df 90       	pop	r13
    4d36:	cf 90       	pop	r12
    4d38:	bf 90       	pop	r11
    4d3a:	af 90       	pop	r10
    4d3c:	9f 90       	pop	r9
    4d3e:	8f 90       	pop	r8
    4d40:	08 95       	ret
    if(!parent || !dir || !dir[0] || !dir_entry)
    4d42:	61 15       	cp	r22, r1
    4d44:	71 05       	cpc	r23, r1
    4d46:	41 f3       	breq	.-48     	; 0x4d18 <fat_create_dir+0x2e>
    4d48:	fb 01       	movw	r30, r22
    4d4a:	80 81       	ld	r24, Z
    4d4c:	88 23       	and	r24, r24
    4d4e:	21 f3       	breq	.-56     	; 0x4d18 <fat_create_dir+0x2e>
    4d50:	2d 81       	ldd	r18, Y+5	; 0x05
    4d52:	3e 81       	ldd	r19, Y+6	; 0x06
    4d54:	23 2b       	or	r18, r19
    4d56:	01 f3       	breq	.-64     	; 0x4d18 <fat_create_dir+0x2e>
    while(fat_read_dir(parent, dir_entry))
    4d58:	6d 81       	ldd	r22, Y+5	; 0x05
    4d5a:	7e 81       	ldd	r23, Y+6	; 0x06
    4d5c:	c5 01       	movw	r24, r10
    4d5e:	0e 94 bf 23 	call	0x477e	; 0x477e <fat_read_dir>
    4d62:	81 11       	cpse	r24, r1
    4d64:	49 c0       	rjmp	.+146    	; 0x4df8 <fat_create_dir+0x10e>
    struct fat_fs_struct* fs = parent->fs;
    4d66:	f5 01       	movw	r30, r10
    4d68:	e0 80       	ld	r14, Z
    4d6a:	f1 80       	ldd	r15, Z+1	; 0x01
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    4d6c:	41 e0       	ldi	r20, 0x01	; 1
    4d6e:	50 e0       	ldi	r21, 0x00	; 0
    4d70:	70 e0       	ldi	r23, 0x00	; 0
    4d72:	60 e0       	ldi	r22, 0x00	; 0
    4d74:	c7 01       	movw	r24, r14
    4d76:	0e 94 39 1a 	call	0x3472	; 0x3472 <fat_append_clusters>
    4d7a:	6c 01       	movw	r12, r24
    if(!dir_cluster)
    4d7c:	00 97       	sbiw	r24, 0x00	; 0
    4d7e:	61 f2       	breq	.-104    	; 0x4d18 <fat_create_dir+0x2e>
    fat_clear_cluster(fs, dir_cluster);
    4d80:	bc 01       	movw	r22, r24
    4d82:	c7 01       	movw	r24, r14
    4d84:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <fat_clear_cluster>
    memset(dir_entry, 0, sizeof(*dir_entry));
    4d88:	8b e2       	ldi	r24, 0x2B	; 43
    4d8a:	ed 81       	ldd	r30, Y+5	; 0x05
    4d8c:	fe 81       	ldd	r31, Y+6	; 0x06
    4d8e:	11 92       	st	Z+, r1
    4d90:	8a 95       	dec	r24
    4d92:	e9 f7       	brne	.-6      	; 0x4d8e <fat_create_dir+0xa4>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    4d94:	80 e1       	ldi	r24, 0x10	; 16
    4d96:	ed 81       	ldd	r30, Y+5	; 0x05
    4d98:	fe 81       	ldd	r31, Y+6	; 0x06
    4d9a:	80 a3       	std	Z+32, r24	; 0x20
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    4d9c:	f7 01       	movw	r30, r14
    4d9e:	a0 89       	ldd	r26, Z+16	; 0x10
    4da0:	b1 89       	ldd	r27, Z+17	; 0x11
    4da2:	96 01       	movw	r18, r12
    4da4:	22 50       	subi	r18, 0x02	; 2
    4da6:	31 09       	sbc	r19, r1
    4da8:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    4dac:	69 83       	std	Y+1, r22	; 0x01
    4dae:	7a 83       	std	Y+2, r23	; 0x02
    4db0:	8b 83       	std	Y+3, r24	; 0x03
    4db2:	9c 83       	std	Y+4, r25	; 0x04
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    4db4:	82 89       	ldd	r24, Z+18	; 0x12
    4db6:	93 89       	ldd	r25, Z+19	; 0x13
    4db8:	a4 89       	ldd	r26, Z+20	; 0x14
    4dba:	b5 89       	ldd	r27, Z+21	; 0x15
    4dbc:	29 81       	ldd	r18, Y+1	; 0x01
    4dbe:	3a 81       	ldd	r19, Y+2	; 0x02
    4dc0:	4b 81       	ldd	r20, Y+3	; 0x03
    4dc2:	5c 81       	ldd	r21, Y+4	; 0x04
    4dc4:	82 0f       	add	r24, r18
    4dc6:	93 1f       	adc	r25, r19
    4dc8:	a4 1f       	adc	r26, r20
    4dca:	b5 1f       	adc	r27, r21
    4dcc:	ed 81       	ldd	r30, Y+5	; 0x05
    4dce:	fe 81       	ldd	r31, Y+6	; 0x06
    4dd0:	87 a3       	std	Z+39, r24	; 0x27
    4dd2:	90 a7       	std	Z+40, r25	; 0x28
    4dd4:	a1 a7       	std	Z+41, r26	; 0x29
    4dd6:	b2 a7       	std	Z+42, r27	; 0x2a
    dir_entry->long_name[0] = '.';
    4dd8:	0e e2       	ldi	r16, 0x2E	; 46
    4dda:	00 83       	st	Z, r16
    dir_entry->cluster = dir_cluster;
    4ddc:	d2 a2       	std	Z+34, r13	; 0x22
    4dde:	c1 a2       	std	Z+33, r12	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    4de0:	bf 01       	movw	r22, r30
    4de2:	c7 01       	movw	r24, r14
    4de4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4de8:	18 2f       	mov	r17, r24
    4dea:	81 11       	cpse	r24, r1
    4dec:	11 c0       	rjmp	.+34     	; 0x4e10 <fat_create_dir+0x126>
        fat_free_clusters(fs, dir_cluster);
    4dee:	b6 01       	movw	r22, r12
    4df0:	c7 01       	movw	r24, r14
    4df2:	0e 94 bd 19 	call	0x337a	; 0x337a <fat_free_clusters>
        return 0;
    4df6:	91 cf       	rjmp	.-222    	; 0x4d1a <fat_create_dir+0x30>
        if(strcmp(dir, dir_entry->long_name) == 0)
    4df8:	6d 81       	ldd	r22, Y+5	; 0x05
    4dfa:	7e 81       	ldd	r23, Y+6	; 0x06
    4dfc:	c4 01       	movw	r24, r8
    4dfe:	0e 94 1e 34 	call	0x683c	; 0x683c <strcmp>
    4e02:	89 2b       	or	r24, r25
    4e04:	09 f0       	breq	.+2      	; 0x4e08 <fat_create_dir+0x11e>
    4e06:	a8 cf       	rjmp	.-176    	; 0x4d58 <fat_create_dir+0x6e>
            fat_reset_dir(parent);
    4e08:	c5 01       	movw	r24, r10
    4e0a:	0e 94 b2 23 	call	0x4764	; 0x4764 <fat_reset_dir>
            return 0;
    4e0e:	84 cf       	rjmp	.-248    	; 0x4d18 <fat_create_dir+0x2e>
    dir_entry->entry_offset += 32;
    4e10:	ed 81       	ldd	r30, Y+5	; 0x05
    4e12:	fe 81       	ldd	r31, Y+6	; 0x06
    4e14:	87 a1       	ldd	r24, Z+39	; 0x27
    4e16:	90 a5       	ldd	r25, Z+40	; 0x28
    4e18:	a1 a5       	ldd	r26, Z+41	; 0x29
    4e1a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4e1c:	80 96       	adiw	r24, 0x20	; 32
    4e1e:	a1 1d       	adc	r26, r1
    4e20:	b1 1d       	adc	r27, r1
    4e22:	87 a3       	std	Z+39, r24	; 0x27
    4e24:	90 a7       	std	Z+40, r25	; 0x28
    4e26:	a1 a7       	std	Z+41, r26	; 0x29
    4e28:	b2 a7       	std	Z+42, r27	; 0x2a
    dir_entry->long_name[1] = '.';
    4e2a:	01 83       	std	Z+1, r16	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    4e2c:	f5 01       	movw	r30, r10
    4e2e:	83 a1       	ldd	r24, Z+35	; 0x23
    4e30:	94 a1       	ldd	r25, Z+36	; 0x24
    4e32:	ed 81       	ldd	r30, Y+5	; 0x05
    4e34:	fe 81       	ldd	r31, Y+6	; 0x06
    4e36:	92 a3       	std	Z+34, r25	; 0x22
    4e38:	81 a3       	std	Z+33, r24	; 0x21
    if(!fat_write_dir_entry(fs, dir_entry))
    4e3a:	bf 01       	movw	r22, r30
    4e3c:	c7 01       	movw	r24, r14
    4e3e:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4e42:	18 2f       	mov	r17, r24
    4e44:	88 23       	and	r24, r24
    4e46:	99 f2       	breq	.-90     	; 0x4dee <fat_create_dir+0x104>
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    4e48:	4f e1       	ldi	r20, 0x1F	; 31
    4e4a:	50 e0       	ldi	r21, 0x00	; 0
    4e4c:	b4 01       	movw	r22, r8
    4e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e50:	9e 81       	ldd	r25, Y+6	; 0x06
    4e52:	0e 94 35 34 	call	0x686a	; 0x686a <strncpy>
    dir_entry->cluster = dir_cluster;
    4e56:	ed 81       	ldd	r30, Y+5	; 0x05
    4e58:	fe 81       	ldd	r31, Y+6	; 0x06
    4e5a:	d2 a2       	std	Z+34, r13	; 0x22
    4e5c:	c1 a2       	std	Z+33, r12	; 0x21
        return 0;
    4e5e:	40 e0       	ldi	r20, 0x00	; 0
    4e60:	50 e0       	ldi	r21, 0x00	; 0
    4e62:	ba 01       	movw	r22, r20
    if(!fs || !dir_entry)
    4e64:	e1 14       	cp	r14, r1
    4e66:	f1 04       	cpc	r15, r1
    4e68:	51 f0       	breq	.+20     	; 0x4e7e <fat_create_dir+0x194>
    4e6a:	b5 01       	movw	r22, r10
    4e6c:	6d 5d       	subi	r22, 0xDD	; 221
    4e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4e70:	af 01       	movw	r20, r30
    4e72:	c7 01       	movw	r24, r14
    4e74:	0e 94 9a 1b 	call	0x3734	; 0x3734 <fat_find_offset_for_dir_entry.isra.0.part.0>
    4e78:	46 2f       	mov	r20, r22
    4e7a:	57 2f       	mov	r21, r23
    4e7c:	bc 01       	movw	r22, r24
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    4e7e:	ed 81       	ldd	r30, Y+5	; 0x05
    4e80:	fe 81       	ldd	r31, Y+6	; 0x06
    4e82:	47 a3       	std	Z+39, r20	; 0x27
    4e84:	50 a7       	std	Z+40, r21	; 0x28
    4e86:	61 a7       	std	Z+41, r22	; 0x29
    4e88:	72 a7       	std	Z+42, r23	; 0x2a
    4e8a:	45 2b       	or	r20, r21
    4e8c:	46 2b       	or	r20, r22
    4e8e:	47 2b       	or	r20, r23
    4e90:	29 f4       	brne	.+10     	; 0x4e9c <fat_create_dir+0x1b2>
        fat_free_clusters(fs, dir_cluster);
    4e92:	b6 01       	movw	r22, r12
    4e94:	c7 01       	movw	r24, r14
    4e96:	0e 94 bd 19 	call	0x337a	; 0x337a <fat_free_clusters>
    4e9a:	3e cf       	rjmp	.-388    	; 0x4d18 <fat_create_dir+0x2e>
    if(!fat_write_dir_entry(fs, dir_entry))
    4e9c:	6d 81       	ldd	r22, Y+5	; 0x05
    4e9e:	7e 81       	ldd	r23, Y+6	; 0x06
    4ea0:	c7 01       	movw	r24, r14
    4ea2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <fat_write_dir_entry>
    4ea6:	18 2f       	mov	r17, r24
    4ea8:	88 23       	and	r24, r24
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <fat_create_dir+0x1c4>
    4eac:	a0 cf       	rjmp	.-192    	; 0x4dee <fat_create_dir+0x104>
    return 1;
    4eae:	11 e0       	ldi	r17, 0x01	; 1
    4eb0:	34 cf       	rjmp	.-408    	; 0x4d1a <fat_create_dir+0x30>

00004eb2 <fat_get_fs_size>:
{
    4eb2:	cf 93       	push	r28
    4eb4:	df 93       	push	r29
    4eb6:	00 d0       	rcall	.+0      	; 0x4eb8 <fat_get_fs_size+0x6>
    4eb8:	00 d0       	rcall	.+0      	; 0x4eba <fat_get_fs_size+0x8>
    4eba:	cd b7       	in	r28, 0x3d	; 61
    4ebc:	de b7       	in	r29, 0x3e	; 62
    4ebe:	fc 01       	movw	r30, r24
    if(!fs)
    4ec0:	89 2b       	or	r24, r25
    4ec2:	f9 f0       	breq	.+62     	; 0x4f02 <fat_get_fs_size+0x50>
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    4ec4:	22 85       	ldd	r18, Z+10	; 0x0a
    4ec6:	33 85       	ldd	r19, Z+11	; 0x0b
    4ec8:	44 85       	ldd	r20, Z+12	; 0x0c
    4eca:	55 85       	ldd	r21, Z+13	; 0x0d
    4ecc:	56 95       	lsr	r21
    4ece:	47 95       	ror	r20
    4ed0:	37 95       	ror	r19
    4ed2:	27 95       	ror	r18
    4ed4:	22 50       	subi	r18, 0x02	; 2
    4ed6:	31 09       	sbc	r19, r1
    4ed8:	41 09       	sbc	r20, r1
    4eda:	51 09       	sbc	r21, r1
    4edc:	a0 89       	ldd	r26, Z+16	; 0x10
    4ede:	b1 89       	ldd	r27, Z+17	; 0x11
    4ee0:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <__muluhisi3>
    4ee4:	69 83       	std	Y+1, r22	; 0x01
    4ee6:	7a 83       	std	Y+2, r23	; 0x02
    4ee8:	8b 83       	std	Y+3, r24	; 0x03
    4eea:	9c 83       	std	Y+4, r25	; 0x04
}
    4eec:	69 81       	ldd	r22, Y+1	; 0x01
    4eee:	7a 81       	ldd	r23, Y+2	; 0x02
    4ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef4:	0f 90       	pop	r0
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	df 91       	pop	r29
    4efe:	cf 91       	pop	r28
    4f00:	08 95       	ret
        return 0;
    4f02:	19 82       	std	Y+1, r1	; 0x01
    4f04:	1a 82       	std	Y+2, r1	; 0x02
    4f06:	1b 82       	std	Y+3, r1	; 0x03
    4f08:	1c 82       	std	Y+4, r1	; 0x04
    4f0a:	f0 cf       	rjmp	.-32     	; 0x4eec <fat_get_fs_size+0x3a>

00004f0c <fat_get_fs_free>:
{
    4f0c:	2f 92       	push	r2
    4f0e:	3f 92       	push	r3
    4f10:	4f 92       	push	r4
    4f12:	5f 92       	push	r5
    4f14:	6f 92       	push	r6
    4f16:	7f 92       	push	r7
    4f18:	8f 92       	push	r8
    4f1a:	9f 92       	push	r9
    4f1c:	af 92       	push	r10
    4f1e:	bf 92       	push	r11
    4f20:	cf 92       	push	r12
    4f22:	df 92       	push	r13
    4f24:	ef 92       	push	r14
    4f26:	ff 92       	push	r15
    4f28:	0f 93       	push	r16
    4f2a:	1f 93       	push	r17
    4f2c:	cf 93       	push	r28
    4f2e:	df 93       	push	r29
    4f30:	cd b7       	in	r28, 0x3d	; 61
    4f32:	de b7       	in	r29, 0x3e	; 62
    4f34:	a8 97       	sbiw	r28, 0x28	; 40
    4f36:	0f b6       	in	r0, 0x3f	; 63
    4f38:	f8 94       	cli
    4f3a:	de bf       	out	0x3e, r29	; 62
    4f3c:	0f be       	out	0x3f, r0	; 63
    4f3e:	cd bf       	out	0x3d, r28	; 61
    4f40:	1c 01       	movw	r2, r24
    if(!fs)
    4f42:	89 2b       	or	r24, r25
    4f44:	09 f5       	brne	.+66     	; 0x4f88 <fat_get_fs_free+0x7c>
        return 0;
    4f46:	1d a2       	std	Y+37, r1	; 0x25
    4f48:	1e a2       	std	Y+38, r1	; 0x26
    4f4a:	1f a2       	std	Y+39, r1	; 0x27
    4f4c:	18 a6       	std	Y+40, r1	; 0x28
}
    4f4e:	6d a1       	ldd	r22, Y+37	; 0x25
    4f50:	7e a1       	ldd	r23, Y+38	; 0x26
    4f52:	8f a1       	ldd	r24, Y+39	; 0x27
    4f54:	98 a5       	ldd	r25, Y+40	; 0x28
    4f56:	a8 96       	adiw	r28, 0x28	; 40
    4f58:	0f b6       	in	r0, 0x3f	; 63
    4f5a:	f8 94       	cli
    4f5c:	de bf       	out	0x3e, r29	; 62
    4f5e:	0f be       	out	0x3f, r0	; 63
    4f60:	cd bf       	out	0x3d, r28	; 61
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	1f 91       	pop	r17
    4f68:	0f 91       	pop	r16
    4f6a:	ff 90       	pop	r15
    4f6c:	ef 90       	pop	r14
    4f6e:	df 90       	pop	r13
    4f70:	cf 90       	pop	r12
    4f72:	bf 90       	pop	r11
    4f74:	af 90       	pop	r10
    4f76:	9f 90       	pop	r9
    4f78:	8f 90       	pop	r8
    4f7a:	7f 90       	pop	r7
    4f7c:	6f 90       	pop	r6
    4f7e:	5f 90       	pop	r5
    4f80:	4f 90       	pop	r4
    4f82:	3f 90       	pop	r3
    4f84:	2f 90       	pop	r2
    4f86:	08 95       	ret
    count_arg.cluster_count = 0;
    4f88:	1a a2       	std	Y+34, r1	; 0x22
    4f8a:	19 a2       	std	Y+33, r1	; 0x21
    count_arg.buffer_size = sizeof(fat);
    4f8c:	80 e2       	ldi	r24, 0x20	; 32
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	9c a3       	std	Y+36, r25	; 0x24
    4f92:	8b a3       	std	Y+35, r24	; 0x23
    offset_t fat_offset = fs->header.fat_offset;
    4f94:	d1 01       	movw	r26, r2
    4f96:	16 96       	adiw	r26, 0x06	; 6
    4f98:	8d 91       	ld	r24, X+
    4f9a:	9d 91       	ld	r25, X+
    4f9c:	0d 90       	ld	r0, X+
    4f9e:	bc 91       	ld	r27, X
    4fa0:	a0 2d       	mov	r26, r0
    4fa2:	8d a3       	std	Y+37, r24	; 0x25
    4fa4:	9e a3       	std	Y+38, r25	; 0x26
    4fa6:	af a3       	std	Y+39, r26	; 0x27
    4fa8:	b8 a7       	std	Y+40, r27	; 0x28
    uint32_t fat_size = fs->header.fat_size;
    4faa:	f1 01       	movw	r30, r2
    4fac:	42 84       	ldd	r4, Z+10	; 0x0a
    4fae:	53 84       	ldd	r5, Z+11	; 0x0b
    4fb0:	64 84       	ldd	r6, Z+12	; 0x0c
    4fb2:	75 84       	ldd	r7, Z+13	; 0x0d
    while(fat_size > 0)
    4fb4:	41 14       	cp	r4, r1
    4fb6:	51 04       	cpc	r5, r1
    4fb8:	61 04       	cpc	r6, r1
    4fba:	71 04       	cpc	r7, r1
    4fbc:	61 f4       	brne	.+24     	; 0x4fd6 <fat_get_fs_free+0xca>
    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    4fbe:	29 a1       	ldd	r18, Y+33	; 0x21
    4fc0:	3a a1       	ldd	r19, Y+34	; 0x22
    4fc2:	f1 01       	movw	r30, r2
    4fc4:	a0 89       	ldd	r26, Z+16	; 0x10
    4fc6:	b1 89       	ldd	r27, Z+17	; 0x11
    4fc8:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    4fcc:	6d a3       	std	Y+37, r22	; 0x25
    4fce:	7e a3       	std	Y+38, r23	; 0x26
    4fd0:	8f a3       	std	Y+39, r24	; 0x27
    4fd2:	98 a7       	std	Y+40, r25	; 0x28
    4fd4:	bc cf       	rjmp	.-136    	; 0x4f4e <fat_get_fs_free+0x42>
        if(fat_size < length)
    4fd6:	53 01       	movw	r10, r6
    4fd8:	42 01       	movw	r8, r4
    4fda:	fe ef       	ldi	r31, 0xFE	; 254
    4fdc:	4f 16       	cp	r4, r31
    4fde:	ff ef       	ldi	r31, 0xFF	; 255
    4fe0:	5f 06       	cpc	r5, r31
    4fe2:	61 04       	cpc	r6, r1
    4fe4:	71 04       	cpc	r7, r1
    4fe6:	30 f0       	brcs	.+12     	; 0x4ff4 <fat_get_fs_free+0xe8>
    4fe8:	9e ef       	ldi	r25, 0xFE	; 254
    4fea:	89 2e       	mov	r8, r25
    4fec:	99 24       	eor	r9, r9
    4fee:	9a 94       	dec	r9
    4ff0:	a1 2c       	mov	r10, r1
    4ff2:	b1 2c       	mov	r11, r1
        if(!fs->partition->device_read_interval(fat_offset,
    4ff4:	d1 01       	movw	r26, r2
    4ff6:	ed 91       	ld	r30, X+
    4ff8:	fc 91       	ld	r31, X
    4ffa:	02 80       	ldd	r0, Z+2	; 0x02
    4ffc:	f3 81       	ldd	r31, Z+3	; 0x03
    4ffe:	e0 2d       	mov	r30, r0
    5000:	ce 01       	movw	r24, r28
    5002:	81 96       	adiw	r24, 0x21	; 33
    5004:	6c 01       	movw	r12, r24
    5006:	89 e3       	ldi	r24, 0x39	; 57
    5008:	e8 2e       	mov	r14, r24
    500a:	88 e1       	ldi	r24, 0x18	; 24
    500c:	f8 2e       	mov	r15, r24
    500e:	84 01       	movw	r16, r8
    5010:	20 e2       	ldi	r18, 0x20	; 32
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	ae 01       	movw	r20, r28
    5016:	4f 5f       	subi	r20, 0xFF	; 255
    5018:	5f 4f       	sbci	r21, 0xFF	; 255
    501a:	6d a1       	ldd	r22, Y+37	; 0x25
    501c:	7e a1       	ldd	r23, Y+38	; 0x26
    501e:	8f a1       	ldd	r24, Y+39	; 0x27
    5020:	98 a5       	ldd	r25, Y+40	; 0x28
    5022:	09 95       	icall
    5024:	88 23       	and	r24, r24
    5026:	09 f4       	brne	.+2      	; 0x502a <fat_get_fs_free+0x11e>
    5028:	8e cf       	rjmp	.-228    	; 0x4f46 <fat_get_fs_free+0x3a>
        fat_offset += length;
    502a:	8d a1       	ldd	r24, Y+37	; 0x25
    502c:	9e a1       	ldd	r25, Y+38	; 0x26
    502e:	af a1       	ldd	r26, Y+39	; 0x27
    5030:	b8 a5       	ldd	r27, Y+40	; 0x28
    5032:	88 0d       	add	r24, r8
    5034:	99 1d       	adc	r25, r9
    5036:	aa 1d       	adc	r26, r10
    5038:	bb 1d       	adc	r27, r11
    503a:	8d a3       	std	Y+37, r24	; 0x25
    503c:	9e a3       	std	Y+38, r25	; 0x26
    503e:	af a3       	std	Y+39, r26	; 0x27
    5040:	b8 a7       	std	Y+40, r27	; 0x28
        fat_size -= length;
    5042:	48 18       	sub	r4, r8
    5044:	59 08       	sbc	r5, r9
    5046:	6a 08       	sbc	r6, r10
    5048:	7b 08       	sbc	r7, r11
    504a:	b4 cf       	rjmp	.-152    	; 0x4fb4 <fat_get_fs_free+0xa8>

0000504c <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    504c:	9f 92       	push	r9
    504e:	af 92       	push	r10
    5050:	bf 92       	push	r11
    5052:	cf 92       	push	r12
    5054:	df 92       	push	r13
    5056:	ef 92       	push	r14
    5058:	ff 92       	push	r15
    505a:	0f 93       	push	r16
    505c:	1f 93       	push	r17
    505e:	cf 93       	push	r28
    5060:	df 93       	push	r29
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    5066:	64 97       	sbiw	r28, 0x14	; 20
    5068:	0f b6       	in	r0, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	de bf       	out	0x3e, r29	; 62
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	cd bf       	out	0x3d, r28	; 61
    5072:	7c 01       	movw	r14, r24
    5074:	6b 01       	movw	r12, r22
    5076:	94 2e       	mov	r9, r20
    5078:	a5 2e       	mov	r10, r21
    507a:	b2 2e       	mov	r11, r18
    507c:	13 2f       	mov	r17, r19
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    507e:	89 2b       	or	r24, r25
    5080:	a1 f4       	brne	.+40     	; 0x50aa <partition_open+0x5e>
        return 0;
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	80 e0       	ldi	r24, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    5086:	64 96       	adiw	r28, 0x14	; 20
    5088:	0f b6       	in	r0, 0x3f	; 63
    508a:	f8 94       	cli
    508c:	de bf       	out	0x3e, r29	; 62
    508e:	0f be       	out	0x3f, r0	; 63
    5090:	cd bf       	out	0x3d, r28	; 61
    5092:	df 91       	pop	r29
    5094:	cf 91       	pop	r28
    5096:	1f 91       	pop	r17
    5098:	0f 91       	pop	r16
    509a:	ff 90       	pop	r15
    509c:	ef 90       	pop	r14
    509e:	df 90       	pop	r13
    50a0:	cf 90       	pop	r12
    50a2:	bf 90       	pop	r11
    50a4:	af 90       	pop	r10
    50a6:	9f 90       	pop	r9
    50a8:	08 95       	ret
    if(!device_read || !device_read_interval || index >= 4)
    50aa:	67 2b       	or	r22, r23
    50ac:	51 f3       	breq	.-44     	; 0x5082 <partition_open+0x36>
    50ae:	04 30       	cpi	r16, 0x04	; 4
    50b0:	44 f7       	brge	.-48     	; 0x5082 <partition_open+0x36>
    if(index >= 0)
    50b2:	07 ff       	sbrs	r16, 7
    50b4:	3b c0       	rjmp	.+118    	; 0x512c <partition_open+0xe0>
        if(new_partition->type == PARTITION_TYPE_FREE)
    50b6:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <partition_handles+0x8>
    50ba:	81 11       	cpse	r24, r1
    50bc:	e2 cf       	rjmp	.-60     	; 0x5082 <partition_open+0x36>
    memset(new_partition, 0, sizeof(*new_partition));
    50be:	ea e7       	ldi	r30, 0x7A	; 122
    50c0:	f3 e0       	ldi	r31, 0x03	; 3
    50c2:	89 e0       	ldi	r24, 0x09	; 9
    50c4:	df 01       	movw	r26, r30
    50c6:	1d 92       	st	X+, r1
    50c8:	8a 95       	dec	r24
    50ca:	e9 f7       	brne	.-6      	; 0x50c6 <partition_open+0x7a>
    new_partition->device_read = device_read;
    50cc:	f0 92 73 03 	sts	0x0373, r15	; 0x800373 <partition_handles+0x1>
    50d0:	e0 92 72 03 	sts	0x0372, r14	; 0x800372 <partition_handles>
    new_partition->device_read_interval = device_read_interval;
    50d4:	d0 92 75 03 	sts	0x0375, r13	; 0x800375 <partition_handles+0x3>
    50d8:	c0 92 74 03 	sts	0x0374, r12	; 0x800374 <partition_handles+0x2>
    new_partition->device_write = device_write;
    50dc:	90 92 76 03 	sts	0x0376, r9	; 0x800376 <partition_handles+0x4>
    50e0:	a0 92 77 03 	sts	0x0377, r10	; 0x800377 <partition_handles+0x5>
    new_partition->device_write_interval = device_write_interval;
    50e4:	b0 92 78 03 	sts	0x0378, r11	; 0x800378 <partition_handles+0x6>
    50e8:	10 93 79 03 	sts	0x0379, r17	; 0x800379 <partition_handles+0x7>
    if(index >= 0)
    50ec:	07 fd       	sbrc	r16, 7
    50ee:	3e c0       	rjmp	.+124    	; 0x516c <partition_open+0x120>
        new_partition->type = buffer[4];
    50f0:	8d 81       	ldd	r24, Y+5	; 0x05
    50f2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <partition_handles+0x8>
        new_partition->offset = read32(&buffer[8]);
    50f6:	ce 01       	movw	r24, r28
    50f8:	09 96       	adiw	r24, 0x09	; 9
    50fa:	0e 94 0a 18 	call	0x3014	; 0x3014 <read32>
    50fe:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <partition_handles+0x9>
    5102:	70 93 7c 03 	sts	0x037C, r23	; 0x80037c <partition_handles+0xa>
    5106:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <partition_handles+0xb>
    510a:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <partition_handles+0xc>
        new_partition->length = read32(&buffer[12]);
    510e:	ce 01       	movw	r24, r28
    5110:	0d 96       	adiw	r24, 0x0d	; 13
    5112:	0e 94 0a 18 	call	0x3014	; 0x3014 <read32>
    5116:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <partition_handles+0xd>
    511a:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <partition_handles+0xe>
    511e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <partition_handles+0xf>
    5122:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <partition_handles+0x10>
    new_partition = partition_handles;
    5126:	82 e7       	ldi	r24, 0x72	; 114
    5128:	93 e0       	ldi	r25, 0x03	; 3
    512a:	ad cf       	rjmp	.-166    	; 0x5086 <partition_open+0x3a>
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    512c:	20 e1       	ldi	r18, 0x10	; 16
    512e:	02 02       	muls	r16, r18
    5130:	c0 01       	movw	r24, r0
    5132:	11 24       	eor	r1, r1
    5134:	82 54       	subi	r24, 0x42	; 66
    5136:	9e 4f       	sbci	r25, 0xFE	; 254
    5138:	9c 01       	movw	r18, r24
    513a:	99 0f       	add	r25, r25
    513c:	44 0b       	sbc	r20, r20
    513e:	55 0b       	sbc	r21, r21
    5140:	29 8b       	std	Y+17, r18	; 0x11
    5142:	3a 8b       	std	Y+18, r19	; 0x12
    5144:	4b 8b       	std	Y+19, r20	; 0x13
    5146:	5c 8b       	std	Y+20, r21	; 0x14
    5148:	20 e1       	ldi	r18, 0x10	; 16
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	ae 01       	movw	r20, r28
    514e:	4f 5f       	subi	r20, 0xFF	; 255
    5150:	5f 4f       	sbci	r21, 0xFF	; 255
    5152:	69 89       	ldd	r22, Y+17	; 0x11
    5154:	7a 89       	ldd	r23, Y+18	; 0x12
    5156:	8b 89       	ldd	r24, Y+19	; 0x13
    5158:	9c 89       	ldd	r25, Y+20	; 0x14
    515a:	f7 01       	movw	r30, r14
    515c:	09 95       	icall
    515e:	88 23       	and	r24, r24
    5160:	09 f4       	brne	.+2      	; 0x5164 <partition_open+0x118>
    5162:	8f cf       	rjmp	.-226    	; 0x5082 <partition_open+0x36>
        if(buffer[4] == 0x00)
    5164:	8d 81       	ldd	r24, Y+5	; 0x05
    5166:	81 11       	cpse	r24, r1
    5168:	a6 cf       	rjmp	.-180    	; 0x50b6 <partition_open+0x6a>
    516a:	8b cf       	rjmp	.-234    	; 0x5082 <partition_open+0x36>
        new_partition->type = 0xff;
    516c:	8f ef       	ldi	r24, 0xFF	; 255
    516e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <partition_handles+0x8>
    5172:	d9 cf       	rjmp	.-78     	; 0x5126 <partition_open+0xda>

00005174 <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    5174:	fc 01       	movw	r30, r24
    if(!partition)
    5176:	89 2b       	or	r24, r25
    5178:	19 f0       	breq	.+6      	; 0x5180 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    517a:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    517c:	81 e0       	ldi	r24, 0x01	; 1
    517e:	08 95       	ret
        return 0;
    5180:	80 e0       	ldi	r24, 0x00	; 0
}
    5182:	08 95       	ret

00005184 <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    5184:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    5186:	0d b4       	in	r0, 0x2d	; 45
    5188:	07 fe       	sbrs	r0, 7
    518a:	fd cf       	rjmp	.-6      	; 0x5186 <sd_raw_send_byte+0x2>
    SPSR &= ~(1 << SPIF);
    518c:	8d b5       	in	r24, 0x2d	; 45
    518e:	8f 77       	andi	r24, 0x7F	; 127
    5190:	8d bd       	out	0x2d, r24	; 45
}
    5192:	08 95       	ret

00005194 <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5194:	8f ef       	ldi	r24, 0xFF	; 255
    5196:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5198:	0d b4       	in	r0, 0x2d	; 45
    519a:	07 fe       	sbrs	r0, 7
    519c:	fd cf       	rjmp	.-6      	; 0x5198 <sd_raw_rec_byte+0x4>
    SPSR &= ~(1 << SPIF);
    519e:	8d b5       	in	r24, 0x2d	; 45
    51a0:	8f 77       	andi	r24, 0x7F	; 127
    51a2:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    51a4:	8e b5       	in	r24, 0x2e	; 46
}
    51a6:	08 95       	ret

000051a8 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    51a8:	ff 92       	push	r15
    51aa:	0f 93       	push	r16
    51ac:	1f 93       	push	r17
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	c8 2f       	mov	r28, r24
    51b4:	d4 2f       	mov	r29, r20
    51b6:	15 2f       	mov	r17, r21
    51b8:	06 2f       	mov	r16, r22
    51ba:	f7 2e       	mov	r15, r23
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    51bc:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    51c0:	8c 2f       	mov	r24, r28
    51c2:	80 64       	ori	r24, 0x40	; 64
    51c4:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    51c8:	8f 2d       	mov	r24, r15
    51ca:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    51ce:	80 2f       	mov	r24, r16
    51d0:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    51d4:	81 2f       	mov	r24, r17
    51d6:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    51da:	8d 2f       	mov	r24, r29
    51dc:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
    switch(command)
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    51e0:	85 e9       	ldi	r24, 0x95	; 149
    switch(command)
    51e2:	cc 23       	and	r28, r28
    51e4:	21 f0       	breq	.+8      	; 0x51ee <sd_raw_send_command+0x46>
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    51e6:	87 e8       	ldi	r24, 0x87	; 135
    switch(command)
    51e8:	c8 30       	cpi	r28, 0x08	; 8
    51ea:	09 f0       	breq	.+2      	; 0x51ee <sd_raw_send_command+0x46>
           break;
        default:
           sd_raw_send_byte(0xff);
    51ec:	8f ef       	ldi	r24, 0xFF	; 255
    51ee:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
{
    51f2:	ca e0       	ldi	r28, 0x0A	; 10
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    51f4:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
        if(response != 0xff)
    51f8:	8f 3f       	cpi	r24, 0xFF	; 255
    51fa:	11 f4       	brne	.+4      	; 0x5200 <sd_raw_send_command+0x58>
    for(uint8_t i = 0; i < 10; ++i)
    51fc:	c1 50       	subi	r28, 0x01	; 1
    51fe:	d1 f7       	brne	.-12     	; 0x51f4 <sd_raw_send_command+0x4c>
            break;
    }

    return response;
}
    5200:	df 91       	pop	r29
    5202:	cf 91       	pop	r28
    5204:	1f 91       	pop	r17
    5206:	0f 91       	pop	r16
    5208:	ff 90       	pop	r15
    520a:	08 95       	ret

0000520c <sd_raw_available>:
}
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	08 95       	ret

00005210 <sd_raw_locked>:
}
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	08 95       	ret

00005214 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    5214:	cf 93       	push	r28
    5216:	df 93       	push	r29
    5218:	00 d0       	rcall	.+0      	; 0x521a <sd_raw_sync+0x6>
    521a:	00 d0       	rcall	.+0      	; 0x521c <sd_raw_sync+0x8>
    521c:	cd b7       	in	r28, 0x3d	; 61
    521e:	de b7       	in	r29, 0x3e	; 62
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    5220:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <raw_block_written>
    5224:	81 11       	cpse	r24, r1
    5226:	1c c0       	rjmp	.+56     	; 0x5260 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    5228:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <raw_block_address>
    522c:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <raw_block_address+0x1>
    5230:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <raw_block_address+0x2>
    5234:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <raw_block_address+0x3>
    5238:	20 e0       	ldi	r18, 0x00	; 0
    523a:	32 e0       	ldi	r19, 0x02	; 2
    523c:	49 e8       	ldi	r20, 0x89	; 137
    523e:	53 e0       	ldi	r21, 0x03	; 3
    5240:	bc 01       	movw	r22, r24
    5242:	cd 01       	movw	r24, r26
    5244:	0e 94 b4 2a 	call	0x5568	; 0x5568 <sd_raw_write>
    5248:	88 23       	and	r24, r24
    524a:	19 f0       	breq	.+6      	; 0x5252 <sd_raw_sync+0x3e>
        return 0;
    raw_block_written = 1;
    524c:	81 e0       	ldi	r24, 0x01	; 1
    524e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <raw_block_written>
#endif
    return 1;
}
    5252:	0f 90       	pop	r0
    5254:	0f 90       	pop	r0
    5256:	0f 90       	pop	r0
    5258:	0f 90       	pop	r0
    525a:	df 91       	pop	r29
    525c:	cf 91       	pop	r28
    525e:	08 95       	ret
        return 1;
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	f7 cf       	rjmp	.-18     	; 0x5252 <sd_raw_sync+0x3e>

00005264 <sd_raw_read>:
{
    5264:	2f 92       	push	r2
    5266:	3f 92       	push	r3
    5268:	4f 92       	push	r4
    526a:	5f 92       	push	r5
    526c:	6f 92       	push	r6
    526e:	7f 92       	push	r7
    5270:	8f 92       	push	r8
    5272:	9f 92       	push	r9
    5274:	af 92       	push	r10
    5276:	bf 92       	push	r11
    5278:	cf 92       	push	r12
    527a:	df 92       	push	r13
    527c:	ef 92       	push	r14
    527e:	ff 92       	push	r15
    5280:	0f 93       	push	r16
    5282:	1f 93       	push	r17
    5284:	cf 93       	push	r28
    5286:	df 93       	push	r29
    5288:	00 d0       	rcall	.+0      	; 0x528a <sd_raw_read+0x26>
    528a:	00 d0       	rcall	.+0      	; 0x528c <sd_raw_read+0x28>
    528c:	cd b7       	in	r28, 0x3d	; 61
    528e:	de b7       	in	r29, 0x3e	; 62
    5290:	6b 01       	movw	r12, r22
    5292:	7c 01       	movw	r14, r24
    5294:	4a 01       	movw	r8, r20
    5296:	19 01       	movw	r2, r18
    while(length > 0)
    5298:	21 14       	cp	r2, r1
    529a:	31 04       	cpc	r3, r1
    529c:	11 f4       	brne	.+4      	; 0x52a2 <sd_raw_read+0x3e>
    return 1;
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	30 c0       	rjmp	.+96     	; 0x5302 <sd_raw_read+0x9e>
        block_offset = offset & 0x01ff;
    52a2:	56 01       	movw	r10, r12
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	b8 22       	and	r11, r24
        block_address = offset - block_offset;
    52a8:	26 01       	movw	r4, r12
    52aa:	37 01       	movw	r6, r14
    52ac:	4a 18       	sub	r4, r10
    52ae:	5b 08       	sbc	r5, r11
    52b0:	61 08       	sbc	r6, r1
    52b2:	71 08       	sbc	r7, r1
        read_length = 512 - block_offset; /* read up to block border */
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	92 e0       	ldi	r25, 0x02	; 2
    52b8:	8a 19       	sub	r24, r10
    52ba:	9b 09       	sbc	r25, r11
        if(read_length > length)
    52bc:	3c 82       	std	Y+4, r3	; 0x04
    52be:	2b 82       	std	Y+3, r2	; 0x03
    52c0:	82 15       	cp	r24, r2
    52c2:	93 05       	cpc	r25, r3
    52c4:	10 f4       	brcc	.+4      	; 0x52ca <sd_raw_read+0x66>
    52c6:	9c 83       	std	Y+4, r25	; 0x04
    52c8:	8b 83       	std	Y+3, r24	; 0x03
        if(block_address != raw_block_address)
    52ca:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <raw_block_address>
    52ce:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <raw_block_address+0x1>
    52d2:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <raw_block_address+0x2>
    52d6:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <raw_block_address+0x3>
    52da:	84 15       	cp	r24, r4
    52dc:	95 05       	cpc	r25, r5
    52de:	a6 05       	cpc	r26, r6
    52e0:	b7 05       	cpc	r27, r7
    52e2:	09 f4       	brne	.+2      	; 0x52e6 <sd_raw_read+0x82>
    52e4:	5c c0       	rjmp	.+184    	; 0x539e <sd_raw_read+0x13a>
            if(!sd_raw_sync())
    52e6:	0e 94 0a 29 	call	0x5214	; 0x5214 <sd_raw_sync>
    52ea:	88 23       	and	r24, r24
    52ec:	51 f0       	breq	.+20     	; 0x5302 <sd_raw_read+0x9e>
            select_card();
    52ee:	5e 98       	cbi	0x0b, 6	; 11
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    52f0:	b3 01       	movw	r22, r6
    52f2:	a2 01       	movw	r20, r4
    52f4:	81 e1       	ldi	r24, 0x11	; 17
    52f6:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
    52fa:	88 23       	and	r24, r24
    52fc:	c9 f0       	breq	.+50     	; 0x5330 <sd_raw_read+0xcc>
                unselect_card();
    52fe:	5e 9a       	sbi	0x0b, 6	; 11
                return 0;
    5300:	80 e0       	ldi	r24, 0x00	; 0
}
    5302:	0f 90       	pop	r0
    5304:	0f 90       	pop	r0
    5306:	0f 90       	pop	r0
    5308:	0f 90       	pop	r0
    530a:	df 91       	pop	r29
    530c:	cf 91       	pop	r28
    530e:	1f 91       	pop	r17
    5310:	0f 91       	pop	r16
    5312:	ff 90       	pop	r15
    5314:	ef 90       	pop	r14
    5316:	df 90       	pop	r13
    5318:	cf 90       	pop	r12
    531a:	bf 90       	pop	r11
    531c:	af 90       	pop	r10
    531e:	9f 90       	pop	r9
    5320:	8f 90       	pop	r8
    5322:	7f 90       	pop	r7
    5324:	6f 90       	pop	r6
    5326:	5f 90       	pop	r5
    5328:	4f 90       	pop	r4
    532a:	3f 90       	pop	r3
    532c:	2f 90       	pop	r2
    532e:	08 95       	ret
            while(sd_raw_rec_byte() != 0xfe);
    5330:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    5334:	8e 3f       	cpi	r24, 0xFE	; 254
    5336:	e1 f7       	brne	.-8      	; 0x5330 <sd_raw_read+0xcc>
            uint8_t* cache = raw_block;
    5338:	09 e8       	ldi	r16, 0x89	; 137
    533a:	13 e0       	ldi	r17, 0x03	; 3
                *cache++ = sd_raw_rec_byte();
    533c:	1a 83       	std	Y+2, r17	; 0x02
    533e:	09 83       	std	Y+1, r16	; 0x01
    5340:	0f 5f       	subi	r16, 0xFF	; 255
    5342:	1f 4f       	sbci	r17, 0xFF	; 255
    5344:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    5348:	e9 81       	ldd	r30, Y+1	; 0x01
    534a:	fa 81       	ldd	r31, Y+2	; 0x02
    534c:	80 83       	st	Z, r24
            for(uint16_t i = 0; i < 512; ++i)
    534e:	f5 e0       	ldi	r31, 0x05	; 5
    5350:	09 38       	cpi	r16, 0x89	; 137
    5352:	1f 07       	cpc	r17, r31
    5354:	99 f7       	brne	.-26     	; 0x533c <sd_raw_read+0xd8>
            raw_block_address = block_address;
    5356:	40 92 85 03 	sts	0x0385, r4	; 0x800385 <raw_block_address>
    535a:	50 92 86 03 	sts	0x0386, r5	; 0x800386 <raw_block_address+0x1>
    535e:	60 92 87 03 	sts	0x0387, r6	; 0x800387 <raw_block_address+0x2>
    5362:	70 92 88 03 	sts	0x0388, r7	; 0x800388 <raw_block_address+0x3>
            memcpy(buffer, raw_block + block_offset, read_length);
    5366:	b5 01       	movw	r22, r10
    5368:	67 57       	subi	r22, 0x77	; 119
    536a:	7c 4f       	sbci	r23, 0xFC	; 252
    536c:	4b 81       	ldd	r20, Y+3	; 0x03
    536e:	5c 81       	ldd	r21, Y+4	; 0x04
    5370:	c4 01       	movw	r24, r8
    5372:	0e 94 03 34 	call	0x6806	; 0x6806 <memcpy>
            buffer += read_length;
    5376:	8b 81       	ldd	r24, Y+3	; 0x03
    5378:	9c 81       	ldd	r25, Y+4	; 0x04
    537a:	88 0e       	add	r8, r24
    537c:	99 1e       	adc	r9, r25
            sd_raw_rec_byte();
    537e:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    5382:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
            unselect_card();
    5386:	5e 9a       	sbi	0x0b, 6	; 11
            sd_raw_rec_byte();
    5388:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
        length -= read_length;
    538c:	8b 81       	ldd	r24, Y+3	; 0x03
    538e:	9c 81       	ldd	r25, Y+4	; 0x04
    5390:	28 1a       	sub	r2, r24
    5392:	39 0a       	sbc	r3, r25
        offset += read_length;
    5394:	c8 0e       	add	r12, r24
    5396:	d9 1e       	adc	r13, r25
    5398:	e1 1c       	adc	r14, r1
    539a:	f1 1c       	adc	r15, r1
    539c:	7d cf       	rjmp	.-262    	; 0x5298 <sd_raw_read+0x34>
            memcpy(buffer, raw_block + block_offset, read_length);
    539e:	b5 01       	movw	r22, r10
    53a0:	67 57       	subi	r22, 0x77	; 119
    53a2:	7c 4f       	sbci	r23, 0xFC	; 252
    53a4:	4b 81       	ldd	r20, Y+3	; 0x03
    53a6:	5c 81       	ldd	r21, Y+4	; 0x04
    53a8:	c4 01       	movw	r24, r8
    53aa:	0e 94 03 34 	call	0x6806	; 0x6806 <memcpy>
            buffer += read_length;
    53ae:	eb 81       	ldd	r30, Y+3	; 0x03
    53b0:	fc 81       	ldd	r31, Y+4	; 0x04
    53b2:	8e 0e       	add	r8, r30
    53b4:	9f 1e       	adc	r9, r31
    53b6:	ea cf       	rjmp	.-44     	; 0x538c <sd_raw_read+0x128>

000053b8 <sd_raw_init>:
{
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    53bc:	cf 93       	push	r28
    configure_pin_mosi();
    53be:	23 9a       	sbi	0x04, 3	; 4
    configure_pin_sck();
    53c0:	25 9a       	sbi	0x04, 5	; 4
    configure_pin_ss();
    53c2:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_miso();
    53c4:	24 98       	cbi	0x04, 4	; 4
    unselect_card();
    53c6:	5e 9a       	sbi	0x0b, 6	; 11
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    53c8:	83 e5       	ldi	r24, 0x53	; 83
    53ca:	8c bd       	out	0x2c, r24	; 44
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    53cc:	8d b5       	in	r24, 0x2d	; 45
    53ce:	8e 7f       	andi	r24, 0xFE	; 254
    53d0:	8d bd       	out	0x2d, r24	; 45
    sd_raw_card_type = 0;
    53d2:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <sd_raw_card_type>
    53d6:	ca e0       	ldi	r28, 0x0A	; 10
        sd_raw_rec_byte();
    53d8:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    for(uint8_t i = 0; i < 10; ++i)
    53dc:	c1 50       	subi	r28, 0x01	; 1
    53de:	e1 f7       	brne	.-8      	; 0x53d8 <sd_raw_init+0x20>
    select_card();
    53e0:	5e 98       	cbi	0x0b, 6	; 11
    53e2:	00 e0       	ldi	r16, 0x00	; 0
    53e4:	12 e0       	ldi	r17, 0x02	; 2
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    53e6:	40 e0       	ldi	r20, 0x00	; 0
    53e8:	50 e0       	ldi	r21, 0x00	; 0
    53ea:	ba 01       	movw	r22, r20
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    53f2:	81 30       	cpi	r24, 0x01	; 1
    53f4:	49 f0       	breq	.+18     	; 0x5408 <sd_raw_init+0x50>
        if(i == 0x1ff)
    53f6:	01 50       	subi	r16, 0x01	; 1
    53f8:	11 09       	sbc	r17, r1
    53fa:	a9 f7       	brne	.-22     	; 0x53e6 <sd_raw_init+0x2e>
            unselect_card();
    53fc:	5e 9a       	sbi	0x0b, 6	; 11
}
    53fe:	8c 2f       	mov	r24, r28
    5400:	cf 91       	pop	r28
    5402:	1f 91       	pop	r17
    5404:	0f 91       	pop	r16
    5406:	08 95       	ret
        sd_raw_send_command(CMD_APP, 0);
    5408:	40 e0       	ldi	r20, 0x00	; 0
    540a:	50 e0       	ldi	r21, 0x00	; 0
    540c:	ba 01       	movw	r22, r20
    540e:	87 e3       	ldi	r24, 0x37	; 55
    5410:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    5414:	40 e0       	ldi	r20, 0x00	; 0
    5416:	50 e0       	ldi	r21, 0x00	; 0
    5418:	ba 01       	movw	r22, r20
    541a:	89 e2       	ldi	r24, 0x29	; 41
    541c:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    5420:	82 fd       	sbrc	r24, 2
    5422:	05 c0       	rjmp	.+10     	; 0x542e <sd_raw_init+0x76>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    5424:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <sd_raw_card_type>
    5428:	81 60       	ori	r24, 0x01	; 1
    542a:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <sd_raw_card_type>
    select_card();
    542e:	00 e0       	ldi	r16, 0x00	; 0
    5430:	10 e8       	ldi	r17, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    5432:	80 91 83 03 	lds	r24, 0x0383	; 0x800383 <sd_raw_card_type>
    5436:	83 70       	andi	r24, 0x03	; 3
            sd_raw_send_command(CMD_APP, 0);
    5438:	40 e0       	ldi	r20, 0x00	; 0
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	ba 01       	movw	r22, r20
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    543e:	79 f0       	breq	.+30     	; 0x545e <sd_raw_init+0xa6>
            sd_raw_send_command(CMD_APP, 0);
    5440:	87 e3       	ldi	r24, 0x37	; 55
    5442:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	50 e0       	ldi	r21, 0x00	; 0
    544a:	ba 01       	movw	r22, r20
    544c:	89 e2       	ldi	r24, 0x29	; 41
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    544e:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
        if((response & (1 << R1_IDLE_STATE)) == 0)
    5452:	80 ff       	sbrs	r24, 0
    5454:	06 c0       	rjmp	.+12     	; 0x5462 <sd_raw_init+0xaa>
        if(i == 0x7fff)
    5456:	01 50       	subi	r16, 0x01	; 1
    5458:	11 09       	sbc	r17, r1
    545a:	59 f7       	brne	.-42     	; 0x5432 <sd_raw_init+0x7a>
    545c:	cf cf       	rjmp	.-98     	; 0x53fc <sd_raw_init+0x44>
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	f6 cf       	rjmp	.-20     	; 0x544e <sd_raw_init+0x96>
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    5462:	40 e0       	ldi	r20, 0x00	; 0
    5464:	52 e0       	ldi	r21, 0x02	; 2
    5466:	60 e0       	ldi	r22, 0x00	; 0
    5468:	70 e0       	ldi	r23, 0x00	; 0
    546a:	80 e1       	ldi	r24, 0x10	; 16
    546c:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
        unselect_card();
    5470:	5e 9a       	sbi	0x0b, 6	; 11
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    5472:	88 23       	and	r24, r24
    5474:	11 f0       	breq	.+4      	; 0x547a <sd_raw_init+0xc2>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    5476:	c0 e0       	ldi	r28, 0x00	; 0
    5478:	c2 cf       	rjmp	.-124    	; 0x53fe <sd_raw_init+0x46>
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    547a:	8c b5       	in	r24, 0x2c	; 44
    547c:	8c 7f       	andi	r24, 0xFC	; 252
    547e:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    5480:	8d b5       	in	r24, 0x2d	; 45
    5482:	81 60       	ori	r24, 0x01	; 1
    5484:	8d bd       	out	0x2d, r24	; 45
    raw_block_address = (offset_t) -1;
    5486:	8f ef       	ldi	r24, 0xFF	; 255
    5488:	9f ef       	ldi	r25, 0xFF	; 255
    548a:	dc 01       	movw	r26, r24
    548c:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <raw_block_address>
    5490:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <raw_block_address+0x1>
    5494:	a0 93 87 03 	sts	0x0387, r26	; 0x800387 <raw_block_address+0x2>
    5498:	b0 93 88 03 	sts	0x0388, r27	; 0x800388 <raw_block_address+0x3>
    raw_block_written = 1;
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <raw_block_written>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	32 e0       	ldi	r19, 0x02	; 2
    54a6:	49 e8       	ldi	r20, 0x89	; 137
    54a8:	53 e0       	ldi	r21, 0x03	; 3
    54aa:	60 e0       	ldi	r22, 0x00	; 0
    54ac:	70 e0       	ldi	r23, 0x00	; 0
    54ae:	cb 01       	movw	r24, r22
    54b0:	0e 94 32 29 	call	0x5264	; 0x5264 <sd_raw_read>
    54b4:	c1 e0       	ldi	r28, 0x01	; 1
    54b6:	81 11       	cpse	r24, r1
    54b8:	a2 cf       	rjmp	.-188    	; 0x53fe <sd_raw_init+0x46>
    54ba:	dd cf       	rjmp	.-70     	; 0x5476 <sd_raw_init+0xbe>

000054bc <sd_raw_read_interval>:
{
    54bc:	2f 92       	push	r2
    54be:	3f 92       	push	r3
    54c0:	4f 92       	push	r4
    54c2:	5f 92       	push	r5
    54c4:	6f 92       	push	r6
    54c6:	7f 92       	push	r7
    54c8:	8f 92       	push	r8
    54ca:	9f 92       	push	r9
    54cc:	af 92       	push	r10
    54ce:	bf 92       	push	r11
    54d0:	cf 92       	push	r12
    54d2:	df 92       	push	r13
    54d4:	ef 92       	push	r14
    54d6:	ff 92       	push	r15
    54d8:	0f 93       	push	r16
    54da:	1f 93       	push	r17
    54dc:	cf 93       	push	r28
    54de:	df 93       	push	r29
    54e0:	2b 01       	movw	r4, r22
    54e2:	3c 01       	movw	r6, r24
    54e4:	5a 01       	movw	r10, r20
    54e6:	e9 01       	movw	r28, r18
    54e8:	48 01       	movw	r8, r16
    54ea:	87 01       	movw	r16, r14
    54ec:	3c 2c       	mov	r3, r12
    54ee:	2d 2c       	mov	r2, r13
    if(!buffer || interval == 0 || length < interval || !callback)
    54f0:	45 2b       	or	r20, r21
    54f2:	31 f1       	breq	.+76     	; 0x5540 <sd_raw_read_interval+0x84>
    54f4:	20 97       	sbiw	r28, 0x00	; 0
    54f6:	21 f1       	breq	.+72     	; 0x5540 <sd_raw_read_interval+0x84>
    54f8:	82 16       	cp	r8, r18
    54fa:	93 06       	cpc	r9, r19
    54fc:	08 f1       	brcs	.+66     	; 0x5540 <sd_raw_read_interval+0x84>
    54fe:	ef 28       	or	r14, r15
    5500:	f9 f0       	breq	.+62     	; 0x5540 <sd_raw_read_interval+0x84>
        offset += interval;
    5502:	69 01       	movw	r12, r18
    5504:	f1 2c       	mov	r15, r1
    5506:	e1 2c       	mov	r14, r1
        if(!sd_raw_read(offset, buffer, interval))
    5508:	9e 01       	movw	r18, r28
    550a:	a5 01       	movw	r20, r10
    550c:	c3 01       	movw	r24, r6
    550e:	b2 01       	movw	r22, r4
    5510:	0e 94 32 29 	call	0x5264	; 0x5264 <sd_raw_read>
    5514:	88 23       	and	r24, r24
    5516:	a1 f0       	breq	.+40     	; 0x5540 <sd_raw_read_interval+0x84>
        if(!callback(buffer, offset, p))
    5518:	23 2d       	mov	r18, r3
    551a:	32 2d       	mov	r19, r2
    551c:	b3 01       	movw	r22, r6
    551e:	a2 01       	movw	r20, r4
    5520:	c5 01       	movw	r24, r10
    5522:	f8 01       	movw	r30, r16
    5524:	09 95       	icall
    5526:	88 23       	and	r24, r24
    5528:	49 f0       	breq	.+18     	; 0x553c <sd_raw_read_interval+0x80>
        offset += interval;
    552a:	4c 0c       	add	r4, r12
    552c:	5d 1c       	adc	r5, r13
    552e:	6e 1c       	adc	r6, r14
    5530:	7f 1c       	adc	r7, r15
        length -= interval;
    5532:	8c 1a       	sub	r8, r28
    5534:	9d 0a       	sbc	r9, r29
    while(length >= interval)
    5536:	8c 16       	cp	r8, r28
    5538:	9d 06       	cpc	r9, r29
    553a:	30 f7       	brcc	.-52     	; 0x5508 <sd_raw_read_interval+0x4c>
    return 1;
    553c:	81 e0       	ldi	r24, 0x01	; 1
    553e:	01 c0       	rjmp	.+2      	; 0x5542 <sd_raw_read_interval+0x86>
        return 0;
    5540:	80 e0       	ldi	r24, 0x00	; 0
}
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ff 90       	pop	r15
    554c:	ef 90       	pop	r14
    554e:	df 90       	pop	r13
    5550:	cf 90       	pop	r12
    5552:	bf 90       	pop	r11
    5554:	af 90       	pop	r10
    5556:	9f 90       	pop	r9
    5558:	8f 90       	pop	r8
    555a:	7f 90       	pop	r7
    555c:	6f 90       	pop	r6
    555e:	5f 90       	pop	r5
    5560:	4f 90       	pop	r4
    5562:	3f 90       	pop	r3
    5564:	2f 90       	pop	r2
    5566:	08 95       	ret

00005568 <sd_raw_write>:
{
    5568:	2f 92       	push	r2
    556a:	3f 92       	push	r3
    556c:	4f 92       	push	r4
    556e:	5f 92       	push	r5
    5570:	6f 92       	push	r6
    5572:	7f 92       	push	r7
    5574:	8f 92       	push	r8
    5576:	9f 92       	push	r9
    5578:	af 92       	push	r10
    557a:	bf 92       	push	r11
    557c:	cf 92       	push	r12
    557e:	df 92       	push	r13
    5580:	ef 92       	push	r14
    5582:	ff 92       	push	r15
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	6b 01       	movw	r12, r22
    558e:	7c 01       	movw	r14, r24
    5590:	4a 01       	movw	r8, r20
    5592:	e9 01       	movw	r28, r18
    while(length > 0)
    5594:	20 97       	sbiw	r28, 0x00	; 0
    5596:	09 f4       	brne	.+2      	; 0x559a <sd_raw_write+0x32>
    5598:	5b c0       	rjmp	.+182    	; 0x5650 <sd_raw_write+0xe8>
        block_offset = offset & 0x01ff;
    559a:	56 01       	movw	r10, r12
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	b8 22       	and	r11, r24
        block_address = offset - block_offset;
    55a0:	26 01       	movw	r4, r12
    55a2:	37 01       	movw	r6, r14
    55a4:	4a 18       	sub	r4, r10
    55a6:	5b 08       	sbc	r5, r11
    55a8:	61 08       	sbc	r6, r1
    55aa:	71 08       	sbc	r7, r1
        write_length = 512 - block_offset; /* write up to block border */
    55ac:	21 2c       	mov	r2, r1
    55ae:	92 e0       	ldi	r25, 0x02	; 2
    55b0:	39 2e       	mov	r3, r25
    55b2:	2a 18       	sub	r2, r10
    55b4:	3b 08       	sbc	r3, r11
        if(write_length > length)
    55b6:	8e 01       	movw	r16, r28
    55b8:	2c 16       	cp	r2, r28
    55ba:	3d 06       	cpc	r3, r29
    55bc:	08 f4       	brcc	.+2      	; 0x55c0 <sd_raw_write+0x58>
    55be:	81 01       	movw	r16, r2
        if(block_address != raw_block_address)
    55c0:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <raw_block_address>
    55c4:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <raw_block_address+0x1>
    55c8:	a0 91 87 03 	lds	r26, 0x0387	; 0x800387 <raw_block_address+0x2>
    55cc:	b0 91 88 03 	lds	r27, 0x0388	; 0x800388 <raw_block_address+0x3>
    55d0:	84 15       	cp	r24, r4
    55d2:	95 05       	cpc	r25, r5
    55d4:	a6 05       	cpc	r26, r6
    55d6:	b7 05       	cpc	r27, r7
    55d8:	a9 f0       	breq	.+42     	; 0x5604 <sd_raw_write+0x9c>
            if(!sd_raw_sync())
    55da:	0e 94 0a 29 	call	0x5214	; 0x5214 <sd_raw_sync>
    55de:	81 11       	cpse	r24, r1
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <sd_raw_write+0x7e>
            return 0;
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	36 c0       	rjmp	.+108    	; 0x5652 <sd_raw_write+0xea>
            if(block_offset || write_length < 512)
    55e6:	a1 14       	cp	r10, r1
    55e8:	b1 04       	cpc	r11, r1
    55ea:	d9 f4       	brne	.+54     	; 0x5622 <sd_raw_write+0xba>
    55ec:	01 15       	cp	r16, r1
    55ee:	82 e0       	ldi	r24, 0x02	; 2
    55f0:	18 07       	cpc	r17, r24
    55f2:	b9 f4       	brne	.+46     	; 0x5622 <sd_raw_write+0xba>
            raw_block_address = block_address;
    55f4:	40 92 85 03 	sts	0x0385, r4	; 0x800385 <raw_block_address>
    55f8:	50 92 86 03 	sts	0x0386, r5	; 0x800386 <raw_block_address+0x1>
    55fc:	60 92 87 03 	sts	0x0387, r6	; 0x800387 <raw_block_address+0x2>
    5600:	70 92 88 03 	sts	0x0388, r7	; 0x800388 <raw_block_address+0x3>
        if(buffer != raw_block)
    5604:	89 e8       	ldi	r24, 0x89	; 137
    5606:	88 16       	cp	r8, r24
    5608:	83 e0       	ldi	r24, 0x03	; 3
    560a:	98 06       	cpc	r9, r24
    560c:	a9 f4       	brne	.+42     	; 0x5638 <sd_raw_write+0xd0>
        select_card();
    560e:	5e 98       	cbi	0x0b, 6	; 11
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    5610:	b3 01       	movw	r22, r6
    5612:	a2 01       	movw	r20, r4
    5614:	88 e1       	ldi	r24, 0x18	; 24
    5616:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
    561a:	88 23       	and	r24, r24
    561c:	69 f1       	breq	.+90     	; 0x5678 <sd_raw_write+0x110>
            unselect_card();
    561e:	5e 9a       	sbi	0x0b, 6	; 11
    5620:	e0 cf       	rjmp	.-64     	; 0x55e2 <sd_raw_write+0x7a>
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    5622:	20 e0       	ldi	r18, 0x00	; 0
    5624:	32 e0       	ldi	r19, 0x02	; 2
    5626:	49 e8       	ldi	r20, 0x89	; 137
    5628:	53 e0       	ldi	r21, 0x03	; 3
    562a:	c3 01       	movw	r24, r6
    562c:	b2 01       	movw	r22, r4
    562e:	0e 94 32 29 	call	0x5264	; 0x5264 <sd_raw_read>
    5632:	81 11       	cpse	r24, r1
    5634:	df cf       	rjmp	.-66     	; 0x55f4 <sd_raw_write+0x8c>
    5636:	d5 cf       	rjmp	.-86     	; 0x55e2 <sd_raw_write+0x7a>
            memcpy(raw_block + block_offset, buffer, write_length);
    5638:	a8 01       	movw	r20, r16
    563a:	b4 01       	movw	r22, r8
    563c:	c5 01       	movw	r24, r10
    563e:	87 57       	subi	r24, 0x77	; 119
    5640:	9c 4f       	sbci	r25, 0xFC	; 252
    5642:	0e 94 03 34 	call	0x6806	; 0x6806 <memcpy>
            raw_block_written = 0;
    5646:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <raw_block_written>
            if(length == write_length)
    564a:	2c 16       	cp	r2, r28
    564c:	3d 06       	cpc	r3, r29
    564e:	f8 f2       	brcs	.-66     	; 0x560e <sd_raw_write+0xa6>
                return 1;
    5650:	81 e0       	ldi	r24, 0x01	; 1
}
    5652:	df 91       	pop	r29
    5654:	cf 91       	pop	r28
    5656:	1f 91       	pop	r17
    5658:	0f 91       	pop	r16
    565a:	ff 90       	pop	r15
    565c:	ef 90       	pop	r14
    565e:	df 90       	pop	r13
    5660:	cf 90       	pop	r12
    5662:	bf 90       	pop	r11
    5664:	af 90       	pop	r10
    5666:	9f 90       	pop	r9
    5668:	8f 90       	pop	r8
    566a:	7f 90       	pop	r7
    566c:	6f 90       	pop	r6
    566e:	5f 90       	pop	r5
    5670:	4f 90       	pop	r4
    5672:	3f 90       	pop	r3
    5674:	2f 90       	pop	r2
    5676:	08 95       	ret
        sd_raw_send_byte(0xfe);
    5678:	8e ef       	ldi	r24, 0xFE	; 254
    567a:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
        uint8_t* cache = raw_block;
    567e:	89 e8       	ldi	r24, 0x89	; 137
    5680:	a8 2e       	mov	r10, r24
    5682:	83 e0       	ldi	r24, 0x03	; 3
    5684:	b8 2e       	mov	r11, r24
            sd_raw_send_byte(*cache++);
    5686:	f5 01       	movw	r30, r10
    5688:	8f ef       	ldi	r24, 0xFF	; 255
    568a:	a8 1a       	sub	r10, r24
    568c:	b8 0a       	sbc	r11, r24
    568e:	80 81       	ld	r24, Z
    5690:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
        for(uint16_t i = 0; i < 512; ++i)
    5694:	89 e8       	ldi	r24, 0x89	; 137
    5696:	a8 16       	cp	r10, r24
    5698:	85 e0       	ldi	r24, 0x05	; 5
    569a:	b8 06       	cpc	r11, r24
    569c:	a1 f7       	brne	.-24     	; 0x5686 <sd_raw_write+0x11e>
        sd_raw_send_byte(0xff);
    569e:	8f ef       	ldi	r24, 0xFF	; 255
    56a0:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    56a4:	8f ef       	ldi	r24, 0xFF	; 255
    56a6:	0e 94 c2 28 	call	0x5184	; 0x5184 <sd_raw_send_byte>
        while(sd_raw_rec_byte() != 0xff);
    56aa:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    56ae:	8f 3f       	cpi	r24, 0xFF	; 255
    56b0:	e1 f7       	brne	.-8      	; 0x56aa <sd_raw_write+0x142>
        sd_raw_rec_byte();
    56b2:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
        unselect_card();
    56b6:	5e 9a       	sbi	0x0b, 6	; 11
        buffer += write_length;
    56b8:	80 0e       	add	r8, r16
    56ba:	91 1e       	adc	r9, r17
        offset += write_length;
    56bc:	c0 0e       	add	r12, r16
    56be:	d1 1e       	adc	r13, r17
    56c0:	e1 1c       	adc	r14, r1
    56c2:	f1 1c       	adc	r15, r1
        length -= write_length;
    56c4:	c0 1b       	sub	r28, r16
    56c6:	d1 0b       	sbc	r29, r17
        raw_block_written = 1;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <raw_block_written>
    56ce:	62 cf       	rjmp	.-316    	; 0x5594 <sd_raw_write+0x2c>

000056d0 <sd_raw_write_interval>:
{
    56d0:	4f 92       	push	r4
    56d2:	5f 92       	push	r5
    56d4:	6f 92       	push	r6
    56d6:	7f 92       	push	r7
    56d8:	8f 92       	push	r8
    56da:	9f 92       	push	r9
    56dc:	af 92       	push	r10
    56de:	bf 92       	push	r11
    56e0:	cf 92       	push	r12
    56e2:	df 92       	push	r13
    56e4:	ef 92       	push	r14
    56e6:	ff 92       	push	r15
    56e8:	0f 93       	push	r16
    56ea:	1f 93       	push	r17
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	2b 01       	movw	r4, r22
    56f2:	3c 01       	movw	r6, r24
    56f4:	6a 01       	movw	r12, r20
    56f6:	59 01       	movw	r10, r18
    56f8:	48 01       	movw	r8, r16
    if(!buffer || !callback)
    56fa:	45 2b       	or	r20, r21
    56fc:	91 f4       	brne	.+36     	; 0x5722 <sd_raw_write_interval+0x52>
        return 0;
    56fe:	80 e0       	ldi	r24, 0x00	; 0
}
    5700:	df 91       	pop	r29
    5702:	cf 91       	pop	r28
    5704:	1f 91       	pop	r17
    5706:	0f 91       	pop	r16
    5708:	ff 90       	pop	r15
    570a:	ef 90       	pop	r14
    570c:	df 90       	pop	r13
    570e:	cf 90       	pop	r12
    5710:	bf 90       	pop	r11
    5712:	af 90       	pop	r10
    5714:	9f 90       	pop	r9
    5716:	8f 90       	pop	r8
    5718:	7f 90       	pop	r7
    571a:	6f 90       	pop	r6
    571c:	5f 90       	pop	r5
    571e:	4f 90       	pop	r4
    5720:	08 95       	ret
    5722:	89 01       	movw	r16, r18
    if(!buffer || !callback)
    5724:	81 14       	cp	r8, r1
    5726:	91 04       	cpc	r9, r1
    5728:	51 f3       	breq	.-44     	; 0x56fe <sd_raw_write_interval+0x2e>
    while(endless || length > 0)
    572a:	a1 14       	cp	r10, r1
    572c:	b1 04       	cpc	r11, r1
    572e:	19 f0       	breq	.+6      	; 0x5736 <sd_raw_write_interval+0x66>
    5730:	01 15       	cp	r16, r1
    5732:	11 05       	cpc	r17, r1
    5734:	49 f0       	breq	.+18     	; 0x5748 <sd_raw_write_interval+0x78>
        uint16_t bytes_to_write = callback(buffer, offset, p);
    5736:	97 01       	movw	r18, r14
    5738:	b3 01       	movw	r22, r6
    573a:	a2 01       	movw	r20, r4
    573c:	c6 01       	movw	r24, r12
    573e:	f4 01       	movw	r30, r8
    5740:	09 95       	icall
    5742:	ec 01       	movw	r28, r24
        if(!bytes_to_write)
    5744:	00 97       	sbiw	r24, 0x00	; 0
    5746:	11 f4       	brne	.+4      	; 0x574c <sd_raw_write_interval+0x7c>
    return 1;
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	da cf       	rjmp	.-76     	; 0x5700 <sd_raw_write_interval+0x30>
        if(!endless && bytes_to_write > length)
    574c:	a1 14       	cp	r10, r1
    574e:	b1 04       	cpc	r11, r1
    5750:	19 f0       	breq	.+6      	; 0x5758 <sd_raw_write_interval+0x88>
    5752:	08 17       	cp	r16, r24
    5754:	19 07       	cpc	r17, r25
    5756:	98 f2       	brcs	.-90     	; 0x56fe <sd_raw_write_interval+0x2e>
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    5758:	9e 01       	movw	r18, r28
    575a:	a6 01       	movw	r20, r12
    575c:	c3 01       	movw	r24, r6
    575e:	b2 01       	movw	r22, r4
    5760:	0e 94 b4 2a 	call	0x5568	; 0x5568 <sd_raw_write>
    5764:	88 23       	and	r24, r24
    5766:	59 f2       	breq	.-106    	; 0x56fe <sd_raw_write_interval+0x2e>
        offset += bytes_to_write;
    5768:	4c 0e       	add	r4, r28
    576a:	5d 1e       	adc	r5, r29
    576c:	61 1c       	adc	r6, r1
    576e:	71 1c       	adc	r7, r1
        length -= bytes_to_write;
    5770:	0c 1b       	sub	r16, r28
    5772:	1d 0b       	sbc	r17, r29
    5774:	da cf       	rjmp	.-76     	; 0x572a <sd_raw_write_interval+0x5a>

00005776 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    5776:	8f 92       	push	r8
    5778:	9f 92       	push	r9
    577a:	af 92       	push	r10
    577c:	bf 92       	push	r11
    577e:	ef 92       	push	r14
    5780:	ff 92       	push	r15
    5782:	0f 93       	push	r16
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    578c:	89 2b       	or	r24, r25
    578e:	81 f0       	breq	.+32     	; 0x57b0 <sd_raw_get_info+0x3a>
        return 0;

    memset(info, 0, sizeof(*info));
    5790:	89 e1       	ldi	r24, 0x19	; 25
    5792:	fe 01       	movw	r30, r28
    5794:	11 92       	st	Z+, r1
    5796:	8a 95       	dec	r24
    5798:	e9 f7       	brne	.-6      	; 0x5794 <sd_raw_get_info+0x1e>

    select_card();
    579a:	5e 98       	cbi	0x0b, 6	; 11

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    579c:	40 e0       	ldi	r20, 0x00	; 0
    579e:	50 e0       	ldi	r21, 0x00	; 0
    57a0:	ba 01       	movw	r22, r20
    57a2:	8a e0       	ldi	r24, 0x0A	; 10
    57a4:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
    57a8:	f8 2e       	mov	r15, r24
    57aa:	88 23       	and	r24, r24
    57ac:	19 f0       	breq	.+6      	; 0x57b4 <sd_raw_get_info+0x3e>
    {
        unselect_card();
    57ae:	5e 9a       	sbi	0x0b, 6	; 11
        return 0;
    57b0:	f1 2c       	mov	r15, r1
    57b2:	24 c0       	rjmp	.+72     	; 0x57fc <sd_raw_get_info+0x86>
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    57b4:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    57b8:	8e 3f       	cpi	r24, 0xFE	; 254
    57ba:	e1 f7       	brne	.-8      	; 0x57b4 <sd_raw_get_info+0x3e>
    57bc:	10 e0       	ldi	r17, 0x00	; 0
    57be:	00 e0       	ldi	r16, 0x00	; 0
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    57c0:	48 ef       	ldi	r20, 0xF8	; 248
    57c2:	e4 2e       	mov	r14, r20
        uint8_t b = sd_raw_rec_byte();
    57c4:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    57c8:	48 2f       	mov	r20, r24
        switch(i)
    57ca:	e0 2f       	mov	r30, r16
    57cc:	0f 30       	cpi	r16, 0x0F	; 15
    57ce:	30 f4       	brcc	.+12     	; 0x57dc <sd_raw_get_info+0x66>
    57d0:	f0 e0       	ldi	r31, 0x00	; 0
    57d2:	e4 5a       	subi	r30, 0xA4	; 164
    57d4:	f8 4c       	sbci	r31, 0xC8	; 200
    57d6:	0c 94 e3 33 	jmp	0x67c6	; 0x67c6 <__tablejump2__>
                info->manufacturer = b;
    57da:	88 83       	st	Y, r24
    for(uint8_t i = 0; i < 18; ++i)
    57dc:	0f 5f       	subi	r16, 0xFF	; 255
    57de:	1f 4f       	sbci	r17, 0xFF	; 255
    57e0:	02 31       	cpi	r16, 0x12	; 18
    57e2:	11 05       	cpc	r17, r1
    57e4:	79 f7       	brne	.-34     	; 0x57c4 <sd_raw_get_info+0x4e>
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    uint8_t csd_structure = 0;
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    57e6:	40 e0       	ldi	r20, 0x00	; 0
    57e8:	50 e0       	ldi	r21, 0x00	; 0
    57ea:	ba 01       	movw	r22, r20
    57ec:	89 e0       	ldi	r24, 0x09	; 9
    57ee:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <sd_raw_send_command>
    57f2:	08 2f       	mov	r16, r24
    57f4:	88 23       	and	r24, r24
    57f6:	09 f4       	brne	.+2      	; 0x57fa <sd_raw_get_info+0x84>
    57f8:	45 c0       	rjmp	.+138    	; 0x5884 <sd_raw_get_info+0x10e>
    {
        unselect_card();
    57fa:	5e 9a       	sbi	0x0b, 6	; 11
    }

    unselect_card();

    return 1;
}
    57fc:	8f 2d       	mov	r24, r15
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	1f 91       	pop	r17
    5804:	0f 91       	pop	r16
    5806:	ff 90       	pop	r15
    5808:	ef 90       	pop	r14
    580a:	bf 90       	pop	r11
    580c:	af 90       	pop	r10
    580e:	9f 90       	pop	r9
    5810:	8f 90       	pop	r8
    5812:	08 95       	ret
                info->oem[i - 1] = b;
    5814:	fe 01       	movw	r30, r28
    5816:	e0 0f       	add	r30, r16
    5818:	f1 1f       	adc	r31, r17
    581a:	80 83       	st	Z, r24
                break;
    581c:	df cf       	rjmp	.-66     	; 0x57dc <sd_raw_get_info+0x66>
                info->product[i - 3] = b;
    581e:	fe 01       	movw	r30, r28
    5820:	e0 0f       	add	r30, r16
    5822:	f1 1f       	adc	r31, r17
    5824:	81 83       	std	Z+1, r24	; 0x01
                break;
    5826:	da cf       	rjmp	.-76     	; 0x57dc <sd_raw_get_info+0x66>
                info->revision = b;
    5828:	8a 87       	std	Y+10, r24	; 0x0a
                break;
    582a:	d8 cf       	rjmp	.-80     	; 0x57dc <sd_raw_get_info+0x66>
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    582c:	50 e0       	ldi	r21, 0x00	; 0
    582e:	70 e0       	ldi	r23, 0x00	; 0
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	2e 2d       	mov	r18, r14
    5834:	20 03       	mulsu	r18, r16
    5836:	c0 01       	movw	r24, r0
    5838:	21 9f       	mul	r18, r17
    583a:	90 0d       	add	r25, r0
    583c:	11 24       	eor	r1, r1
    583e:	80 5a       	subi	r24, 0xA0	; 160
    5840:	9f 4f       	sbci	r25, 0xFF	; 255
    5842:	04 c0       	rjmp	.+8      	; 0x584c <sd_raw_get_info+0xd6>
    5844:	44 0f       	add	r20, r20
    5846:	55 1f       	adc	r21, r21
    5848:	66 1f       	adc	r22, r22
    584a:	77 1f       	adc	r23, r23
    584c:	8a 95       	dec	r24
    584e:	d2 f7       	brpl	.-12     	; 0x5844 <sd_raw_get_info+0xce>
    5850:	8b 85       	ldd	r24, Y+11	; 0x0b
    5852:	9c 85       	ldd	r25, Y+12	; 0x0c
    5854:	ad 85       	ldd	r26, Y+13	; 0x0d
    5856:	be 85       	ldd	r27, Y+14	; 0x0e
    5858:	84 2b       	or	r24, r20
    585a:	95 2b       	or	r25, r21
    585c:	a6 2b       	or	r26, r22
    585e:	b7 2b       	or	r27, r23
    5860:	8b 87       	std	Y+11, r24	; 0x0b
    5862:	9c 87       	std	Y+12, r25	; 0x0c
    5864:	ad 87       	std	Y+13, r26	; 0x0d
    5866:	be 87       	std	Y+14, r27	; 0x0e
                break;
    5868:	b9 cf       	rjmp	.-142    	; 0x57dc <sd_raw_get_info+0x66>
                info->manufacturing_year = b << 4;
    586a:	42 95       	swap	r20
    586c:	40 7f       	andi	r20, 0xF0	; 240
    586e:	4f 87       	std	Y+15, r20	; 0x0f
                break;
    5870:	b5 cf       	rjmp	.-150    	; 0x57dc <sd_raw_get_info+0x66>
                info->manufacturing_year |= b >> 4;
    5872:	98 2f       	mov	r25, r24
    5874:	92 95       	swap	r25
    5876:	9f 70       	andi	r25, 0x0F	; 15
    5878:	8f 85       	ldd	r24, Y+15	; 0x0f
    587a:	89 2b       	or	r24, r25
    587c:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    587e:	4f 70       	andi	r20, 0x0F	; 15
    5880:	48 8b       	std	Y+16, r20	; 0x10
                break;
    5882:	ac cf       	rjmp	.-168    	; 0x57dc <sd_raw_get_info+0x66>
    while(sd_raw_rec_byte() != 0xfe);
    5884:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
    5888:	8e 3f       	cpi	r24, 0xFE	; 254
    588a:	e1 f7       	brne	.-8      	; 0x5884 <sd_raw_get_info+0x10e>
    for(uint8_t i = 0; i < 18; ++i)
    588c:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t csd_read_bl_len = 0;
    588e:	e1 2c       	mov	r14, r1
    uint32_t csd_c_size = 0;
    5890:	81 2c       	mov	r8, r1
    5892:	91 2c       	mov	r9, r1
    5894:	54 01       	movw	r10, r8
                info->flag_write_protect_temp = 1;
    5896:	ff 24       	eor	r15, r15
    5898:	f3 94       	inc	r15
        uint8_t b = sd_raw_rec_byte();
    589a:	0e 94 ca 28 	call	0x5194	; 0x5194 <sd_raw_rec_byte>
        if(i == 0)
    589e:	11 23       	and	r17, r17
    58a0:	89 f0       	breq	.+34     	; 0x58c4 <sd_raw_get_info+0x14e>
        else if(i == 14)
    58a2:	1e 30       	cpi	r17, 0x0E	; 14
    58a4:	b1 f4       	brne	.+44     	; 0x58d2 <sd_raw_get_info+0x15c>
            if(b & 0x40)
    58a6:	28 2f       	mov	r18, r24
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    58ac:	fd 8a       	std	Y+21, r15	; 0x15
            if(b & 0x20)
    58ae:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    58b0:	fe 8a       	std	Y+22, r15	; 0x16
            if(b & 0x10)
    58b2:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    58b4:	ff 8a       	std	Y+23, r15	; 0x17
            info->format = (b & 0x0c) >> 2;
    58b6:	c9 01       	movw	r24, r18
    58b8:	95 95       	asr	r25
    58ba:	87 95       	ror	r24
    58bc:	95 95       	asr	r25
    58be:	87 95       	ror	r24
    58c0:	83 70       	andi	r24, 0x03	; 3
    58c2:	88 8f       	std	Y+24, r24	; 0x18
    for(uint8_t i = 0; i < 18; ++i)
    58c4:	1f 5f       	subi	r17, 0xFF	; 255
    58c6:	12 31       	cpi	r17, 0x12	; 18
    58c8:	41 f7       	brne	.-48     	; 0x589a <sd_raw_get_info+0x124>
    unselect_card();
    58ca:	5e 9a       	sbi	0x0b, 6	; 11
    return 1;
    58cc:	ff 24       	eor	r15, r15
    58ce:	f3 94       	inc	r15
    58d0:	95 cf       	rjmp	.-214    	; 0x57fc <sd_raw_get_info+0x86>
                switch(i)
    58d2:	18 30       	cpi	r17, 0x08	; 8
    58d4:	d1 f1       	breq	.+116    	; 0x594a <sd_raw_get_info+0x1d4>
    58d6:	48 f4       	brcc	.+18     	; 0x58ea <sd_raw_get_info+0x174>
    58d8:	16 30       	cpi	r17, 0x06	; 6
    58da:	29 f1       	breq	.+74     	; 0x5926 <sd_raw_get_info+0x1b0>
    58dc:	17 30       	cpi	r17, 0x07	; 7
    58de:	61 f1       	breq	.+88     	; 0x5938 <sd_raw_get_info+0x1c2>
    58e0:	15 30       	cpi	r17, 0x05	; 5
    58e2:	81 f7       	brne	.-32     	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_read_bl_len = b & 0x0f;
    58e4:	8f 70       	andi	r24, 0x0F	; 15
    58e6:	e8 2e       	mov	r14, r24
                        break;
    58e8:	ed cf       	rjmp	.-38     	; 0x58c4 <sd_raw_get_info+0x14e>
                switch(i)
    58ea:	19 30       	cpi	r17, 0x09	; 9
    58ec:	c9 f1       	breq	.+114    	; 0x5960 <sd_raw_get_info+0x1ea>
    58ee:	1a 30       	cpi	r17, 0x0A	; 10
    58f0:	49 f7       	brne	.-46     	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_c_size_mult |= b >> 7;
    58f2:	88 1f       	adc	r24, r24
    58f4:	88 27       	eor	r24, r24
    58f6:	88 1f       	adc	r24, r24
    58f8:	08 2b       	or	r16, r24
                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    58fa:	40 2f       	mov	r20, r16
    58fc:	4e 0d       	add	r20, r14
    58fe:	55 27       	eor	r21, r21
    5900:	55 1f       	adc	r21, r21
    5902:	ca 01       	movw	r24, r20
    5904:	02 96       	adiw	r24, 0x02	; 2
    5906:	a5 01       	movw	r20, r10
    5908:	94 01       	movw	r18, r8
    590a:	04 c0       	rjmp	.+8      	; 0x5914 <sd_raw_get_info+0x19e>
    590c:	22 0f       	add	r18, r18
    590e:	33 1f       	adc	r19, r19
    5910:	44 1f       	adc	r20, r20
    5912:	55 1f       	adc	r21, r21
    5914:	8a 95       	dec	r24
    5916:	d2 f7       	brpl	.-12     	; 0x590c <sd_raw_get_info+0x196>
    5918:	da 01       	movw	r26, r20
    591a:	c9 01       	movw	r24, r18
    591c:	89 8b       	std	Y+17, r24	; 0x11
    591e:	9a 8b       	std	Y+18, r25	; 0x12
    5920:	ab 8b       	std	Y+19, r26	; 0x13
    5922:	bc 8b       	std	Y+20, r27	; 0x14
                        break;
    5924:	cf cf       	rjmp	.-98     	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_c_size = b & 0x03;
    5926:	83 70       	andi	r24, 0x03	; 3
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	b0 e0       	ldi	r27, 0x00	; 0
    592c:	a0 e0       	ldi	r26, 0x00	; 0
                        csd_c_size <<= 8;
    592e:	88 24       	eor	r8, r8
    5930:	98 2e       	mov	r9, r24
    5932:	a9 2e       	mov	r10, r25
    5934:	ba 2e       	mov	r11, r26
                        break;
    5936:	c6 cf       	rjmp	.-116    	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_c_size |= b;
    5938:	88 2a       	or	r8, r24
                        csd_c_size <<= 2;
    593a:	82 e0       	ldi	r24, 0x02	; 2
    593c:	88 0c       	add	r8, r8
    593e:	99 1c       	adc	r9, r9
    5940:	aa 1c       	adc	r10, r10
    5942:	bb 1c       	adc	r11, r11
    5944:	8a 95       	dec	r24
    5946:	d1 f7       	brne	.-12     	; 0x593c <sd_raw_get_info+0x1c6>
                        break;
    5948:	bd cf       	rjmp	.-134    	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_c_size |= b >> 6;
    594a:	82 95       	swap	r24
    594c:	86 95       	lsr	r24
    594e:	86 95       	lsr	r24
    5950:	83 70       	andi	r24, 0x03	; 3
    5952:	88 2a       	or	r8, r24
                        ++csd_c_size;
    5954:	3f ef       	ldi	r19, 0xFF	; 255
    5956:	83 1a       	sub	r8, r19
    5958:	93 0a       	sbc	r9, r19
    595a:	a3 0a       	sbc	r10, r19
    595c:	b3 0a       	sbc	r11, r19
                        break;
    595e:	b2 cf       	rjmp	.-156    	; 0x58c4 <sd_raw_get_info+0x14e>
                        csd_c_size_mult <<= 1;
    5960:	88 0f       	add	r24, r24
    5962:	08 2f       	mov	r16, r24
    5964:	06 70       	andi	r16, 0x06	; 6
                        break;
    5966:	ae cf       	rjmp	.-164    	; 0x58c4 <sd_raw_get_info+0x14e>

00005968 <main>:
{
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	ca 55       	subi	r28, 0x5A	; 90
    596e:	d1 09       	sbc	r29, r1
    5970:	0f b6       	in	r0, 0x3f	; 63
    5972:	f8 94       	cli
    5974:	de bf       	out	0x3e, r29	; 62
    5976:	0f be       	out	0x3f, r0	; 63
    5978:	cd bf       	out	0x3d, r28	; 61
	DDRC &= ~(1<<PC0); //TFT DC Pin
    597a:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1<<PC0);//Pullup Activate
    597c:	40 9a       	sbi	0x08, 0	; 8
	DDRD |= (1<<PD6);//CS SD Card
    597e:	56 9a       	sbi	0x0a, 6	; 10
	PORTD |= (1<<PD6);// High
    5980:	5e 9a       	sbi	0x0b, 6	; 11
	init_ili9341();
    5982:	0e 94 16 05 	call	0xa2c	; 0xa2c <init_ili9341>
	uart_init();
    5986:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <uart_init>
	sd_com=0;
    598a:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <sd_com>
	yy=240;
    598e:	80 ef       	ldi	r24, 0xF0	; 240
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <yy+0x1>
    5996:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <yy>
	xx=0;
    599a:	10 92 b4 05 	sts	0x05B4, r1	; 0x8005b4 <xx+0x1>
    599e:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <xx>
	zell=0;
    59a2:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <zell+0x1>
    59a6:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <zell>
	color=123;
    59aa:	8b e7       	ldi	r24, 0x7B	; 123
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <color+0x1>
    59b2:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <color>
	var_x=0x01;
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	90 93 b8 05 	sts	0x05B8, r25	; 0x8005b8 <var_x+0x1>
    59be:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <var_x>
	temp_ovs=0;
    59c2:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <temp_ovs>
	pres_ovs=0;
    59c6:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <pres_ovs>
	value=0;
    59ca:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <value>
	rdy=0;
    59ce:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <rdy>
	altitude=0;
    59d2:	10 92 bf 05 	sts	0x05BF, r1	; 0x8005bf <altitude>
    59d6:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <altitude+0x1>
    59da:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <altitude+0x2>
    59de:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <altitude+0x3>
	tt=0;
    59e2:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <tt+0x1>
    59e6:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <tt>
	log_pos=0;
    59ea:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <log_pos+0x1>
    59ee:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <log_pos>
	qnh=101525;
    59f2:	85 e9       	ldi	r24, 0x95	; 149
    59f4:	9c e8       	ldi	r25, 0x8C	; 140
    59f6:	a1 e0       	ldi	r26, 0x01	; 1
    59f8:	b0 e0       	ldi	r27, 0x00	; 0
    59fa:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <qnh>
    59fe:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <qnh+0x1>
    5a02:	a0 93 8e 05 	sts	0x058E, r26	; 0x80058e <qnh+0x2>
    5a06:	b0 93 8f 05 	sts	0x058F, r27	; 0x80058f <qnh+0x3>
	state=CLOSED;
    5a0a:	82 e0       	ldi	r24, 0x02	; 2
    5a0c:	80 93 ab 05 	sts	0x05AB, r24	; 0x8005ab <state>
	messung=0;
    5a10:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <messung>
	count=0;
    5a14:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <count>
	TWIInit();
    5a18:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <TWIInit>
	OCR1A = 0x009C;	//OCR1A = 0x3D08;==1sec
    5a1c:	8c e9       	ldi	r24, 0x9C	; 156
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    5a24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1 << WGM12);
    5a28:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5a2c:	88 60       	ori	r24, 0x08	; 8
    5a2e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TIMSK1 |= (1 << OCIE1A);
    5a32:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    5a36:	82 60       	ori	r24, 0x02	; 2
    5a38:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    TCCR1B |= (1 << CS12) | (1 << CS10);
    5a3c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5a40:	85 60       	ori	r24, 0x05	; 5
    5a42:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ADMUX |= (1<<REFS0);
    5a46:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    5a4a:	80 64       	ori	r24, 0x40	; 64
    5a4c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
    5a50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5a54:	87 68       	ori	r24, 0x87	; 135
    5a56:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    sei();
    5a5a:	78 94       	sei
	DPS310_init(ULTRA);
    5a5c:	84 e0       	ldi	r24, 0x04	; 4
    5a5e:	0e 94 43 05 	call	0xa86	; 0xa86 <DPS310_init>
    set_sleep_mode(SLEEP_MODE_IDLE);
    5a62:	83 b7       	in	r24, 0x33	; 51
    5a64:	81 7f       	andi	r24, 0xF1	; 241
    5a66:	83 bf       	out	0x33, r24	; 51
				 if(!sd_raw_init())uart_puts_p(PSTR("MMC/SD initialization failed\n"));
    5a68:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <sd_raw_init>
    5a6c:	81 11       	cpse	r24, r1
    5a6e:	04 c0       	rjmp	.+8      	; 0x5a78 <main+0x110>
    5a70:	89 ea       	ldi	r24, 0xA9	; 169
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
				partition = partition_open(sd_raw_read, sd_raw_read_interval, sd_raw_write, sd_raw_write_interval, 0);
    5a78:	00 e0       	ldi	r16, 0x00	; 0
    5a7a:	28 e6       	ldi	r18, 0x68	; 104
    5a7c:	3b e2       	ldi	r19, 0x2B	; 43
    5a7e:	44 eb       	ldi	r20, 0xB4	; 180
    5a80:	5a e2       	ldi	r21, 0x2A	; 42
    5a82:	6e e5       	ldi	r22, 0x5E	; 94
    5a84:	7a e2       	ldi	r23, 0x2A	; 42
    5a86:	82 e3       	ldi	r24, 0x32	; 50
    5a88:	99 e2       	ldi	r25, 0x29	; 41
    5a8a:	0e 94 26 28 	call	0x504c	; 0x504c <partition_open>
    5a8e:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <partition+0x1>
    5a92:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <partition>
				 if(!partition)
    5a96:	89 2b       	or	r24, r25
    5a98:	a9 f4       	brne	.+42     	; 0x5ac4 <main+0x15c>
					partition = partition_open(sd_raw_read, sd_raw_read_interval, sd_raw_write, sd_raw_write_interval, -1);
    5a9a:	0f ef       	ldi	r16, 0xFF	; 255
    5a9c:	28 e6       	ldi	r18, 0x68	; 104
    5a9e:	3b e2       	ldi	r19, 0x2B	; 43
    5aa0:	44 eb       	ldi	r20, 0xB4	; 180
    5aa2:	5a e2       	ldi	r21, 0x2A	; 42
    5aa4:	6e e5       	ldi	r22, 0x5E	; 94
    5aa6:	7a e2       	ldi	r23, 0x2A	; 42
    5aa8:	82 e3       	ldi	r24, 0x32	; 50
    5aaa:	99 e2       	ldi	r25, 0x29	; 41
    5aac:	0e 94 26 28 	call	0x504c	; 0x504c <partition_open>
    5ab0:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <partition+0x1>
    5ab4:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <partition>
					if(!partition)uart_puts_p(PSTR("opening partition failed\n"));
    5ab8:	89 2b       	or	r24, r25
    5aba:	21 f4       	brne	.+8      	; 0x5ac4 <main+0x15c>
    5abc:	8f e8       	ldi	r24, 0x8F	; 143
    5abe:	91 e0       	ldi	r25, 0x01	; 1
    5ac0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
				fs = fat_open(partition);
    5ac4:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <partition>
    5ac8:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <partition+0x1>
    5acc:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <fat_open>
    5ad0:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <fs+0x1>
    5ad4:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <fs>
				if(!fs)uart_puts_p(PSTR("opening filesystem failed\n"));
    5ad8:	89 2b       	or	r24, r25
    5ada:	21 f4       	brne	.+8      	; 0x5ae4 <main+0x17c>
    5adc:	84 e7       	ldi	r24, 0x74	; 116
    5ade:	91 e0       	ldi	r25, 0x01	; 1
    5ae0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
				fat_get_dir_entry_of_path(fs, "/", &directory);
    5ae4:	ae 01       	movw	r20, r28
    5ae6:	44 5d       	subi	r20, 0xD4	; 212
    5ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    5aea:	68 e8       	ldi	r22, 0x88	; 136
    5aec:	71 e0       	ldi	r23, 0x01	; 1
    5aee:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <fs>
    5af2:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <fs+0x1>
    5af6:	0e 94 91 24 	call	0x4922	; 0x4922 <fat_get_dir_entry_of_path>
				dd = fat_open_dir(fs, &directory);
    5afa:	be 01       	movw	r22, r28
    5afc:	64 5d       	subi	r22, 0xD4	; 212
    5afe:	7f 4f       	sbci	r23, 0xFF	; 255
    5b00:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <fs>
    5b04:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <fs+0x1>
    5b08:	0e 94 78 23 	call	0x46f0	; 0x46f0 <fat_open_dir>
    5b0c:	90 93 b6 05 	sts	0x05B6, r25	; 0x8005b6 <dd+0x1>
    5b10:	80 93 b5 05 	sts	0x05B5, r24	; 0x8005b5 <dd>
				if(!dd)uart_puts_p(PSTR("opening root directory failed\n"));
    5b14:	89 2b       	or	r24, r25
    5b16:	21 f4       	brne	.+8      	; 0x5b20 <main+0x1b8>
    5b18:	85 e5       	ldi	r24, 0x55	; 85
    5b1a:	91 e0       	ldi	r25, 0x01	; 1
    5b1c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
				print_disk_info(fs);
    5b20:	00 91 98 05 	lds	r16, 0x0598	; 0x800598 <fs>
    5b24:	10 91 99 05 	lds	r17, 0x0599	; 0x800599 <fs+0x1>
    return fat_open_file(fs, &file_entry);
}

uint8_t print_disk_info(const struct fat_fs_struct* fs)
{
    if(!fs)
    5b28:	01 15       	cp	r16, r1
    5b2a:	11 05       	cpc	r17, r1
    5b2c:	09 f4       	brne	.+2      	; 0x5b30 <main+0x1c8>
    5b2e:	a7 c0       	rjmp	.+334    	; 0x5c7e <main+0x316>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
    5b30:	ce 01       	movw	r24, r28
    5b32:	01 96       	adiw	r24, 0x01	; 1
    5b34:	0e 94 bb 2b 	call	0x5776	; 0x5776 <sd_raw_get_info>
    5b38:	88 23       	and	r24, r24
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <main+0x1d6>
    5b3c:	a0 c0       	rjmp	.+320    	; 0x5c7e <main+0x316>
        return 0;

    uart_puts_p(PSTR("manuf:  0x")); uart_putc_hex(disk_info.manufacturer); uart_putc('\n');
    5b3e:	8a e4       	ldi	r24, 0x4A	; 74
    5b40:	91 e0       	ldi	r25, 0x01	; 1
    5b42:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5b46:	89 81       	ldd	r24, Y+1	; 0x01
    5b48:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <uart_putc_hex>
    5b4c:	8a e0       	ldi	r24, 0x0A	; 10
    5b4e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("oem:    ")); uart_puts((char*) disk_info.oem); uart_putc('\n');
    5b52:	81 e4       	ldi	r24, 0x41	; 65
    5b54:	91 e0       	ldi	r25, 0x01	; 1
    5b56:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5b5a:	ce 01       	movw	r24, r28
    5b5c:	02 96       	adiw	r24, 0x02	; 2
    5b5e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
    5b62:	8a e0       	ldi	r24, 0x0A	; 10
    5b64:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("prod:   ")); uart_puts((char*) disk_info.product); uart_putc('\n');
    5b68:	88 e3       	ldi	r24, 0x38	; 56
    5b6a:	91 e0       	ldi	r25, 0x01	; 1
    5b6c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5b70:	ce 01       	movw	r24, r28
    5b72:	05 96       	adiw	r24, 0x05	; 5
    5b74:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
    5b78:	8a e0       	ldi	r24, 0x0A	; 10
    5b7a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("rev:    ")); uart_putc_hex(disk_info.revision); uart_putc('\n');
    5b7e:	8f e2       	ldi	r24, 0x2F	; 47
    5b80:	91 e0       	ldi	r25, 0x01	; 1
    5b82:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5b86:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b88:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <uart_putc_hex>
    5b8c:	8a e0       	ldi	r24, 0x0A	; 10
    5b8e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("serial: 0x")); uart_putdw_hex(disk_info.serial); uart_putc('\n');
    5b92:	84 e2       	ldi	r24, 0x24	; 36
    5b94:	91 e0       	ldi	r25, 0x01	; 1
    5b96:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5b9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    5b9c:	3d 85       	ldd	r19, Y+13	; 0x0d
    5b9e:	4e 85       	ldd	r20, Y+14	; 0x0e
    5ba0:	5f 85       	ldd	r21, Y+15	; 0x0f
    5ba2:	ca 01       	movw	r24, r20
    5ba4:	b9 01       	movw	r22, r18
    5ba6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <uart_putdw_hex>
    5baa:	8a e0       	ldi	r24, 0x0A	; 10
    5bac:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("date:   ")); uart_putw_dec(disk_info.manufacturing_month); uart_putc('/');
    5bb0:	8b e1       	ldi	r24, 0x1B	; 27
    5bb2:	91 e0       	ldi	r25, 0x01	; 1
    5bb4:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5bb8:	89 89       	ldd	r24, Y+17	; 0x11
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5bc0:	8f e2       	ldi	r24, 0x2F	; 47
    5bc2:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
                                   uart_putw_dec(disk_info.manufacturing_year); uart_putc('\n');
    5bc6:	88 89       	ldd	r24, Y+16	; 0x10
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5bce:	8a e0       	ldi	r24, 0x0A	; 10
    5bd0:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("size:   ")); uart_putdw_dec(disk_info.capacity / 1024 / 1024); uart_puts_p(PSTR("MB\n"));
    5bd4:	82 e1       	ldi	r24, 0x12	; 18
    5bd6:	91 e0       	ldi	r25, 0x01	; 1
    5bd8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5bdc:	8a 89       	ldd	r24, Y+18	; 0x12
    5bde:	9b 89       	ldd	r25, Y+19	; 0x13
    5be0:	ac 89       	ldd	r26, Y+20	; 0x14
    5be2:	bd 89       	ldd	r27, Y+21	; 0x15
    5be4:	9c 01       	movw	r18, r24
    5be6:	ad 01       	movw	r20, r26
    5be8:	64 e1       	ldi	r22, 0x14	; 20
    5bea:	56 95       	lsr	r21
    5bec:	47 95       	ror	r20
    5bee:	37 95       	ror	r19
    5bf0:	27 95       	ror	r18
    5bf2:	6a 95       	dec	r22
    5bf4:	d1 f7       	brne	.-12     	; 0x5bea <main+0x282>
    5bf6:	ca 01       	movw	r24, r20
    5bf8:	b9 01       	movw	r22, r18
    5bfa:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <uart_putdw_dec>
    5bfe:	8e e0       	ldi	r24, 0x0E	; 14
    5c00:	91 e0       	ldi	r25, 0x01	; 1
    5c02:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    uart_puts_p(PSTR("copy:   ")); uart_putw_dec(disk_info.flag_copy); uart_putc('\n');
    5c06:	85 e0       	ldi	r24, 0x05	; 5
    5c08:	91 e0       	ldi	r25, 0x01	; 1
    5c0a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5c0e:	8e 89       	ldd	r24, Y+22	; 0x16
    5c10:	90 e0       	ldi	r25, 0x00	; 0
    5c12:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5c16:	8a e0       	ldi	r24, 0x0A	; 10
    5c18:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("wr.pr.: ")); uart_putw_dec(disk_info.flag_write_protect_temp); uart_putc('/');
    5c1c:	8c ef       	ldi	r24, 0xFC	; 252
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5c24:	88 8d       	ldd	r24, Y+24	; 0x18
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5c2c:	8f e2       	ldi	r24, 0x2F	; 47
    5c2e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
                                   uart_putw_dec(disk_info.flag_write_protect); uart_putc('\n');
    5c32:	8f 89       	ldd	r24, Y+23	; 0x17
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5c3a:	8a e0       	ldi	r24, 0x0A	; 10
    5c3c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("format: ")); uart_putw_dec(disk_info.format); uart_putc('\n');
    5c40:	83 ef       	ldi	r24, 0xF3	; 243
    5c42:	90 e0       	ldi	r25, 0x00	; 0
    5c44:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5c48:	89 8d       	ldd	r24, Y+25	; 0x19
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <uart_putw_dec>
    5c50:	8a e0       	ldi	r24, 0x0A	; 10
    5c52:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
    uart_puts_p(PSTR("free:   ")); uart_putdw_dec(fat_get_fs_free(fs)); uart_putc('/');
    5c56:	8a ee       	ldi	r24, 0xEA	; 234
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <uart_puts_p>
    5c5e:	c8 01       	movw	r24, r16
    5c60:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <fat_get_fs_free>
    5c64:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <uart_putdw_dec>
    5c68:	8f e2       	ldi	r24, 0x2F	; 47
    5c6a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
                                   uart_putdw_dec(fat_get_fs_size(fs)); uart_putc('\n');
    5c6e:	c8 01       	movw	r24, r16
    5c70:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <fat_get_fs_size>
    5c74:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <uart_putdw_dec>
    5c78:	8a e0       	ldi	r24, 0x0A	; 10
    5c7a:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <uart_putc>
				fd = open_file_in_dir(fs, dd, "data.txt");
    5c7e:	00 91 b5 05 	lds	r16, 0x05B5	; 0x8005b5 <dd>
    5c82:	10 91 b6 05 	lds	r17, 0x05B6	; 0x8005b6 <dd+0x1>
    5c86:	e0 90 98 05 	lds	r14, 0x0598	; 0x800598 <fs>
    5c8a:	f0 90 99 05 	lds	r15, 0x0599	; 0x800599 <fs+0x1>
    while(fat_read_dir(dd, dir_entry))
    5c8e:	be 01       	movw	r22, r28
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	c8 01       	movw	r24, r16
    5c96:	0e 94 bf 23 	call	0x477e	; 0x477e <fat_read_dir>
    5c9a:	81 11       	cpse	r24, r1
    5c9c:	05 c0       	rjmp	.+10     	; 0x5ca8 <main+0x340>
				fd = open_file_in_dir(fs, dd, "data.txt");
    5c9e:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <fd+0x1>
    5ca2:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <fd>
				if(!fd)uart_puts("could not open data.txt\n");
    5ca6:	17 c0       	rjmp	.+46     	; 0x5cd6 <main+0x36e>
        if(strcmp(dir_entry->long_name, name) == 0)
    5ca8:	6a e8       	ldi	r22, 0x8A	; 138
    5caa:	71 e0       	ldi	r23, 0x01	; 1
    5cac:	ce 01       	movw	r24, r28
    5cae:	01 96       	adiw	r24, 0x01	; 1
    5cb0:	0e 94 1e 34 	call	0x683c	; 0x683c <strcmp>
    5cb4:	89 2b       	or	r24, r25
    5cb6:	59 f7       	brne	.-42     	; 0x5c8e <main+0x326>
            fat_reset_dir(dd);
    5cb8:	c8 01       	movw	r24, r16
    5cba:	0e 94 b2 23 	call	0x4764	; 0x4764 <fat_reset_dir>
    return fat_open_file(fs, &file_entry);
    5cbe:	be 01       	movw	r22, r28
    5cc0:	6f 5f       	subi	r22, 0xFF	; 255
    5cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cc4:	c7 01       	movw	r24, r14
    5cc6:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <fat_open_file>
				fd = open_file_in_dir(fs, dd, "data.txt");
    5cca:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <fd+0x1>
    5cce:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <fd>
				if(!fd)uart_puts("could not open data.txt\n");
    5cd2:	89 2b       	or	r24, r25
    5cd4:	21 f4       	brne	.+8      	; 0x5cde <main+0x376>
    5cd6:	83 e9       	ldi	r24, 0x93	; 147
    5cd8:	91 e0       	ldi	r25, 0x01	; 1
    5cda:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
				uart_puts("Initialisation success\n");
    5cde:	8c ea       	ldi	r24, 0xAC	; 172
    5ce0:	91 e0       	ldi	r25, 0x01	; 1
    5ce2:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
	uint8_t log=0;
    5ce6:	00 e0       	ldi	r16, 0x00	; 0
	temp = value/100;
    5ce8:	84 e6       	ldi	r24, 0x64	; 100
    5cea:	48 2e       	mov	r4, r24
    5cec:	51 2c       	mov	r5, r1
    5cee:	61 2c       	mov	r6, r1
    5cf0:	71 2c       	mov	r7, r1
	return value-(temp*100);
    5cf2:	14 e6       	ldi	r17, 0x64	; 100
				printf("A: %d.%2.2d m", vor_komma(altitude), nach_komma(altitude));
    5cf4:	98 ed       	ldi	r25, 0xD8	; 216
    5cf6:	29 2e       	mov	r2, r25
    5cf8:	91 e0       	ldi	r25, 0x01	; 1
    5cfa:	39 2e       	mov	r3, r25
				printf("P: %d.%1.2d hPa", vor_komma(Pressure), nach_komma(Pressure));
    5cfc:	26 ee       	ldi	r18, 0xE6	; 230
    5cfe:	82 2e       	mov	r8, r18
    5d00:	21 e0       	ldi	r18, 0x01	; 1
    5d02:	92 2e       	mov	r9, r18
					sprintf(string,"T: %d.%dC count=> %d\n", vor_komma(Temperature), nach_komma(Temperature),count);
    5d04:	36 ef       	ldi	r19, 0xF6	; 246
    5d06:	a3 2e       	mov	r10, r19
    5d08:	31 e0       	ldi	r19, 0x01	; 1
    5d0a:	b3 2e       	mov	r11, r19
		if(messung)
    5d0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <messung>
    5d10:	88 23       	and	r24, r24
    5d12:	09 f4       	brne	.+2      	; 0x5d16 <main+0x3ae>
    5d14:	01 c1       	rjmp	.+514    	; 0x5f18 <main+0x5b0>
			messung=0;	
    5d16:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <messung>
			if(TEMP_READY_CHECK)
    5d1a:	88 e0       	ldi	r24, 0x08	; 8
    5d1c:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
    5d20:	85 ff       	sbrs	r24, 5
    5d22:	f5 c0       	rjmp	.+490    	; 0x5f0e <main+0x5a6>
				showADC();
    5d24:	0e 94 40 0a 	call	0x1480	; 0x1480 <showADC>
				Temperature=DPS310_get_temp(temp_ovs);
    5d28:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <temp_ovs>
    5d2c:	0e 94 0a 06 	call	0xc14	; 0xc14 <DPS310_get_temp>
    5d30:	70 93 97 05 	sts	0x0597, r23	; 0x800597 <Temperature+0x1>
    5d34:	60 93 96 05 	sts	0x0596, r22	; 0x800596 <Temperature>
				ili9341_setcursor(10,120);
    5d38:	68 e7       	ldi	r22, 0x78	; 120
    5d3a:	70 e0       	ldi	r23, 0x00	; 0
    5d3c:	8a e0       	ldi	r24, 0x0A	; 10
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
				printf("T: %d C", Temperature);
    5d44:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <Temperature+0x1>
    5d48:	8f 93       	push	r24
    5d4a:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <Temperature>
    5d4e:	8f 93       	push	r24
    5d50:	44 ec       	ldi	r20, 0xC4	; 196
    5d52:	51 e0       	ldi	r21, 0x01	; 1
    5d54:	5f 93       	push	r21
    5d56:	4f 93       	push	r20
    5d58:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
				ili9341_setcursor(10,170);
    5d5c:	6a ea       	ldi	r22, 0xAA	; 170
    5d5e:	70 e0       	ldi	r23, 0x00	; 0
    5d60:	8a e0       	ldi	r24, 0x0A	; 10
    5d62:	90 e0       	ldi	r25, 0x00	; 0
    5d64:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
				printf("T: %d.%d\370 C", vor_komma(Temperature), nach_komma(Temperature));
    5d68:	e0 90 96 05 	lds	r14, 0x0596	; 0x800596 <Temperature>
    5d6c:	f0 90 97 05 	lds	r15, 0x0597	; 0x800597 <Temperature+0x1>
    5d70:	97 01       	movw	r18, r14
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	40 e0       	ldi	r20, 0x00	; 0
    5d76:	6b 96       	adiw	r28, 0x1b	; 27
    5d78:	2c af       	std	Y+60, r18	; 0x3c
    5d7a:	3d af       	std	Y+61, r19	; 0x3d
    5d7c:	4e af       	std	Y+62, r20	; 0x3e
    5d7e:	5f af       	std	Y+63, r21	; 0x3f
    5d80:	6b 97       	sbiw	r28, 0x1b	; 27
	temp = value/100;
    5d82:	0f 90       	pop	r0
    5d84:	0f 90       	pop	r0
    5d86:	0f 90       	pop	r0
    5d88:	0f 90       	pop	r0
    5d8a:	ca 01       	movw	r24, r20
    5d8c:	b7 01       	movw	r22, r14
    5d8e:	a3 01       	movw	r20, r6
    5d90:	92 01       	movw	r18, r4
    5d92:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
	return value-(temp*100);
    5d96:	12 9f       	mul	r17, r18
    5d98:	e0 18       	sub	r14, r0
    5d9a:	11 24       	eor	r1, r1
				printf("T: %d.%d\370 C", vor_komma(Temperature), nach_komma(Temperature));
    5d9c:	1f 92       	push	r1
    5d9e:	ef 92       	push	r14
    5da0:	3f 93       	push	r19
    5da2:	2f 93       	push	r18
    5da4:	4c ec       	ldi	r20, 0xCC	; 204
    5da6:	51 e0       	ldi	r21, 0x01	; 1
    5da8:	5f 93       	push	r21
    5daa:	4f 93       	push	r20
    5dac:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
				ili9341_setcursor(10,190);
    5db0:	6e eb       	ldi	r22, 0xBE	; 190
    5db2:	70 e0       	ldi	r23, 0x00	; 0
    5db4:	8a e0       	ldi	r24, 0x0A	; 10
    5db6:	90 e0       	ldi	r25, 0x00	; 0
    5db8:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
				printf("A: %d.%2.2d m", vor_komma(altitude), nach_komma(altitude));
    5dbc:	f0 90 bf 05 	lds	r15, 0x05BF	; 0x8005bf <altitude>
    5dc0:	70 91 c0 05 	lds	r23, 0x05C0	; 0x8005c0 <altitude+0x1>
    5dc4:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <altitude+0x2>
    5dc8:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <altitude+0x3>
	temp = value/100;
    5dcc:	6f 2d       	mov	r22, r15
    5dce:	a3 01       	movw	r20, r6
    5dd0:	92 01       	movw	r18, r4
    5dd2:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
	return value-(temp*100);
    5dd6:	12 9f       	mul	r17, r18
    5dd8:	f0 18       	sub	r15, r0
    5dda:	11 24       	eor	r1, r1
				printf("A: %d.%2.2d m", vor_komma(altitude), nach_komma(altitude));
    5ddc:	1f 92       	push	r1
    5dde:	ff 92       	push	r15
    5de0:	3f 93       	push	r19
    5de2:	2f 93       	push	r18
    5de4:	3f 92       	push	r3
    5de6:	2f 92       	push	r2
    5de8:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
				ili9341_setcursor(10,210);
    5dec:	62 ed       	ldi	r22, 0xD2	; 210
    5dee:	70 e0       	ldi	r23, 0x00	; 0
    5df0:	8a e0       	ldi	r24, 0x0A	; 10
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	0e 94 75 14 	call	0x28ea	; 0x28ea <ili9341_setcursor>
				printf("P: %d.%1.2d hPa", vor_komma(Pressure), nach_komma(Pressure));
    5df8:	f0 90 d8 05 	lds	r15, 0x05D8	; 0x8005d8 <Pressure>
    5dfc:	70 91 d9 05 	lds	r23, 0x05D9	; 0x8005d9 <Pressure+0x1>
    5e00:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <Pressure+0x2>
    5e04:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <Pressure+0x3>
	temp = value/100;
    5e08:	6f 2d       	mov	r22, r15
    5e0a:	a3 01       	movw	r20, r6
    5e0c:	92 01       	movw	r18, r4
    5e0e:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
	return value-(temp*100);
    5e12:	12 9f       	mul	r17, r18
    5e14:	f0 18       	sub	r15, r0
    5e16:	11 24       	eor	r1, r1
				printf("P: %d.%1.2d hPa", vor_komma(Pressure), nach_komma(Pressure));
    5e18:	1f 92       	push	r1
    5e1a:	ff 92       	push	r15
    5e1c:	3f 93       	push	r19
    5e1e:	2f 93       	push	r18
    5e20:	9f 92       	push	r9
    5e22:	8f 92       	push	r8
    5e24:	0e 94 4f 34 	call	0x689e	; 0x689e <printf>
				altitude = calcalt(Pressure, qnh);
    5e28:	c0 90 8c 05 	lds	r12, 0x058C	; 0x80058c <qnh>
    5e2c:	d0 90 8d 05 	lds	r13, 0x058D	; 0x80058d <qnh+0x1>
    5e30:	e0 90 8e 05 	lds	r14, 0x058E	; 0x80058e <qnh+0x2>
    5e34:	f0 90 8f 05 	lds	r15, 0x058F	; 0x80058f <qnh+0x3>
    5e38:	60 91 d8 05 	lds	r22, 0x05D8	; 0x8005d8 <Pressure>
    5e3c:	70 91 d9 05 	lds	r23, 0x05D9	; 0x8005d9 <Pressure+0x1>
    5e40:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <Pressure+0x2>
    5e44:	90 91 db 05 	lds	r25, 0x05DB	; 0x8005db <Pressure+0x3>
    5e48:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    5e4c:	a7 01       	movw	r20, r14
    5e4e:	96 01       	movw	r18, r12
    5e50:	68 96       	adiw	r28, 0x18	; 24
    5e52:	6f af       	std	Y+63, r22	; 0x3f
    5e54:	68 97       	sbiw	r28, 0x18	; 24
    5e56:	69 96       	adiw	r28, 0x19	; 25
    5e58:	7f af       	std	Y+63, r23	; 0x3f
    5e5a:	69 97       	sbiw	r28, 0x19	; 25
    5e5c:	6a 96       	adiw	r28, 0x1a	; 26
    5e5e:	8f af       	std	Y+63, r24	; 0x3f
    5e60:	6a 97       	sbiw	r28, 0x1a	; 26
    5e62:	6b 96       	adiw	r28, 0x1b	; 27
    5e64:	9f af       	std	Y+63, r25	; 0x3f
    5e66:	6b 97       	sbiw	r28, 0x1b	; 27
    5e68:	6b 96       	adiw	r28, 0x1b	; 27
    5e6a:	6c ad       	ldd	r22, Y+60	; 0x3c
    5e6c:	7d ad       	ldd	r23, Y+61	; 0x3d
    5e6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5e70:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e72:	6b 97       	sbiw	r28, 0x1b	; 27
    5e74:	0e 94 77 09 	call	0x12ee	; 0x12ee <calcalt>
    5e78:	60 93 bf 05 	sts	0x05BF, r22	; 0x8005bf <altitude>
    5e7c:	70 93 c0 05 	sts	0x05C0, r23	; 0x8005c0 <altitude+0x1>
    5e80:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <altitude+0x2>
    5e84:	90 93 c2 05 	sts	0x05C2, r25	; 0x8005c2 <altitude+0x3>
				if(log)
    5e88:	0f b6       	in	r0, 0x3f	; 63
    5e8a:	f8 94       	cli
    5e8c:	de bf       	out	0x3e, r29	; 62
    5e8e:	0f be       	out	0x3f, r0	; 63
    5e90:	cd bf       	out	0x3d, r28	; 61
    5e92:	00 23       	and	r16, r16
    5e94:	e1 f1       	breq	.+120    	; 0x5f0e <main+0x5a6>
					sprintf(string,"T: %d.%dC count=> %d\n", vor_komma(Temperature), nach_komma(Temperature),count);
    5e96:	e0 90 96 05 	lds	r14, 0x0596	; 0x800596 <Temperature>
    5e9a:	f0 90 97 05 	lds	r15, 0x0597	; 0x800597 <Temperature+0x1>
    5e9e:	50 e0       	ldi	r21, 0x00	; 0
    5ea0:	40 e0       	ldi	r20, 0x00	; 0
	temp = value/100;
    5ea2:	ca 01       	movw	r24, r20
    5ea4:	b7 01       	movw	r22, r14
    5ea6:	a3 01       	movw	r20, r6
    5ea8:	92 01       	movw	r18, r4
    5eaa:	0e 94 c1 33 	call	0x6782	; 0x6782 <__udivmodsi4>
					sprintf(string,"T: %d.%dC count=> %d\n", vor_komma(Temperature), nach_komma(Temperature),count);
    5eae:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <count>
    5eb2:	1f 92       	push	r1
    5eb4:	8f 93       	push	r24
	return value-(temp*100);
    5eb6:	12 9f       	mul	r17, r18
    5eb8:	e0 18       	sub	r14, r0
    5eba:	11 24       	eor	r1, r1
					sprintf(string,"T: %d.%dC count=> %d\n", vor_komma(Temperature), nach_komma(Temperature),count);
    5ebc:	1f 92       	push	r1
    5ebe:	ef 92       	push	r14
    5ec0:	3f 93       	push	r19
    5ec2:	2f 93       	push	r18
    5ec4:	bf 92       	push	r11
    5ec6:	af 92       	push	r10
    5ec8:	4c e6       	ldi	r20, 0x6C	; 108
    5eca:	52 e0       	ldi	r21, 0x02	; 2
    5ecc:	5f 93       	push	r21
    5ece:	4f 93       	push	r20
    5ed0:	0e 94 91 34 	call	0x6922	; 0x6922 <sprintf>
					str_len=strlen((const char *)string);
    5ed4:	ac e6       	ldi	r26, 0x6C	; 108
    5ed6:	b2 e0       	ldi	r27, 0x02	; 2
    5ed8:	0d 90       	ld	r0, X+
    5eda:	00 20       	and	r0, r0
    5edc:	e9 f7       	brne	.-6      	; 0x5ed8 <main+0x570>
    5ede:	ad 01       	movw	r20, r26
    5ee0:	4d 56       	subi	r20, 0x6D	; 109
    5ee2:	52 40       	sbci	r21, 0x02	; 2
    5ee4:	40 93 98 02 	sts	0x0298, r20	; 0x800298 <str_len>
					fat_write_file(fd,(const uint8_t*)string,str_len);
    5ee8:	6c e6       	ldi	r22, 0x6C	; 108
    5eea:	72 e0       	ldi	r23, 0x02	; 2
    5eec:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <fd>
    5ef0:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <fd+0x1>
    5ef4:	0e 94 c8 20 	call	0x4190	; 0x4190 <fat_write_file>
					sd_raw_sync();
    5ef8:	0e 94 0a 29 	call	0x5214	; 0x5214 <sd_raw_sync>
					uart_puts(string);
    5efc:	8c e6       	ldi	r24, 0x6C	; 108
    5efe:	92 e0       	ldi	r25, 0x02	; 2
    5f00:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
    5f04:	0f b6       	in	r0, 0x3f	; 63
    5f06:	f8 94       	cli
    5f08:	de bf       	out	0x3e, r29	; 62
    5f0a:	0f be       	out	0x3f, r0	; 63
    5f0c:	cd bf       	out	0x3d, r28	; 61
			count++;
    5f0e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <count>
    5f12:	8f 5f       	subi	r24, 0xFF	; 255
    5f14:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <count>
			if(PRES_READY_CHECK)
    5f18:	88 e0       	ldi	r24, 0x08	; 8
    5f1a:	0e 94 ba 03 	call	0x774	; 0x774 <DPS310_read>
    5f1e:	84 ff       	sbrs	r24, 4
    5f20:	2b c0       	rjmp	.+86     	; 0x5f78 <main+0x610>
				Pressure=DPS310_get_pres(temp_ovs, pres_ovs);
    5f22:	60 91 89 05 	lds	r22, 0x0589	; 0x800589 <pres_ovs>
    5f26:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <temp_ovs>
    5f2a:	0e 94 f4 06 	call	0xde8	; 0xde8 <DPS310_get_pres>
    5f2e:	68 96       	adiw	r28, 0x18	; 24
    5f30:	6f af       	std	Y+63, r22	; 0x3f
    5f32:	68 97       	sbiw	r28, 0x18	; 24
    5f34:	69 96       	adiw	r28, 0x19	; 25
    5f36:	7f af       	std	Y+63, r23	; 0x3f
    5f38:	69 97       	sbiw	r28, 0x19	; 25
    5f3a:	6a 96       	adiw	r28, 0x1a	; 26
    5f3c:	8f af       	std	Y+63, r24	; 0x3f
    5f3e:	6a 97       	sbiw	r28, 0x1a	; 26
    5f40:	6b 96       	adiw	r28, 0x1b	; 27
    5f42:	9f af       	std	Y+63, r25	; 0x3f
    5f44:	6b 97       	sbiw	r28, 0x1b	; 27
    5f46:	6b 96       	adiw	r28, 0x1b	; 27
    5f48:	6c ad       	ldd	r22, Y+60	; 0x3c
    5f4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    5f4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    5f4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    5f50:	6b 97       	sbiw	r28, 0x1b	; 27
    5f52:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <__fixsfsi>
    5f56:	60 93 d8 05 	sts	0x05D8, r22	; 0x8005d8 <Pressure>
    5f5a:	70 93 d9 05 	sts	0x05D9, r23	; 0x8005d9 <Pressure+0x1>
    5f5e:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <Pressure+0x2>
    5f62:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <Pressure+0x3>
				tt++;
    5f66:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <tt>
    5f6a:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <tt+0x1>
    5f6e:	01 96       	adiw	r24, 0x01	; 1
    5f70:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <tt+0x1>
    5f74:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <tt>
			if((JOY_HOR RIGHT) && !entprell)
    5f78:	82 e0       	ldi	r24, 0x02	; 2
    5f7a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    5f7e:	80 39       	cpi	r24, 0x90	; 144
    5f80:	91 40       	sbci	r25, 0x01	; 1
    5f82:	38 f4       	brcc	.+14     	; 0x5f92 <main+0x62a>
    5f84:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <entprell>
    5f88:	81 11       	cpse	r24, r1
    5f8a:	03 c0       	rjmp	.+6      	; 0x5f92 <main+0x62a>
				entprell = RELOAD_ENTPRELL;
    5f8c:	10 93 c5 05 	sts	0x05C5, r17	; 0x8005c5 <entprell>
				log=1  ;
    5f90:	01 e0       	ldi	r16, 0x01	; 1
			if((JOY_HOR LEFT) && !entprell)
    5f92:	82 e0       	ldi	r24, 0x02	; 2
    5f94:	0e 94 ff 09 	call	0x13fe	; 0x13fe <ReadADC>
    5f98:	89 35       	cpi	r24, 0x59	; 89
    5f9a:	92 40       	sbci	r25, 0x02	; 2
    5f9c:	08 f4       	brcc	.+2      	; 0x5fa0 <main+0x638>
    5f9e:	b6 ce       	rjmp	.-660    	; 0x5d0c <main+0x3a4>
    5fa0:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <entprell>
    5fa4:	81 11       	cpse	r24, r1
    5fa6:	b2 ce       	rjmp	.-668    	; 0x5d0c <main+0x3a4>
				entprell = RELOAD_ENTPRELL;
    5fa8:	10 93 c5 05 	sts	0x05C5, r17	; 0x8005c5 <entprell>
				fat_close_file(fd);
    5fac:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <fd>
    5fb0:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <fd+0x1>
    5fb4:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <fat_close_file>
				fat_close_dir(dd);
    5fb8:	80 91 b5 05 	lds	r24, 0x05B5	; 0x8005b5 <dd>
    5fbc:	90 91 b6 05 	lds	r25, 0x05B6	; 0x8005b6 <dd+0x1>
    5fc0:	0e 94 ac 23 	call	0x4758	; 0x4758 <fat_close_dir>
				fat_close(fs);
    5fc4:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <fs>
    5fc8:	90 91 99 05 	lds	r25, 0x0599	; 0x800599 <fs+0x1>
    5fcc:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <fat_close>
				partition_close(partition);
    5fd0:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <partition>
    5fd4:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <partition+0x1>
    5fd8:	0e 94 ba 28 	call	0x5174	; 0x5174 <partition_close>
				uart_puts("SD is closed...\n");
    5fdc:	8c e0       	ldi	r24, 0x0C	; 12
    5fde:	92 e0       	ldi	r25, 0x02	; 2
    5fe0:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <uart_puts>
				log=0;
    5fe4:	00 e0       	ldi	r16, 0x00	; 0
    5fe6:	92 ce       	rjmp	.-732    	; 0x5d0c <main+0x3a4>

00005fe8 <__subsf3>:
    5fe8:	50 58       	subi	r21, 0x80	; 128

00005fea <__addsf3>:
    5fea:	bb 27       	eor	r27, r27
    5fec:	aa 27       	eor	r26, r26
    5fee:	0e 94 0c 30 	call	0x6018	; 0x6018 <__addsf3x>
    5ff2:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__fp_round>
    5ff6:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscA>
    5ffa:	38 f0       	brcs	.+14     	; 0x600a <__addsf3+0x20>
    5ffc:	0e 94 56 31 	call	0x62ac	; 0x62ac <__fp_pscB>
    6000:	20 f0       	brcs	.+8      	; 0x600a <__addsf3+0x20>
    6002:	39 f4       	brne	.+14     	; 0x6012 <__addsf3+0x28>
    6004:	9f 3f       	cpi	r25, 0xFF	; 255
    6006:	19 f4       	brne	.+6      	; 0x600e <__addsf3+0x24>
    6008:	26 f4       	brtc	.+8      	; 0x6012 <__addsf3+0x28>
    600a:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>
    600e:	0e f4       	brtc	.+2      	; 0x6012 <__addsf3+0x28>
    6010:	e0 95       	com	r30
    6012:	e7 fb       	bst	r30, 7
    6014:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>

00006018 <__addsf3x>:
    6018:	e9 2f       	mov	r30, r25
    601a:	0e 94 6e 31 	call	0x62dc	; 0x62dc <__fp_split3>
    601e:	58 f3       	brcs	.-42     	; 0x5ff6 <__addsf3+0xc>
    6020:	ba 17       	cp	r27, r26
    6022:	62 07       	cpc	r22, r18
    6024:	73 07       	cpc	r23, r19
    6026:	84 07       	cpc	r24, r20
    6028:	95 07       	cpc	r25, r21
    602a:	20 f0       	brcs	.+8      	; 0x6034 <__addsf3x+0x1c>
    602c:	79 f4       	brne	.+30     	; 0x604c <__addsf3x+0x34>
    602e:	a6 f5       	brtc	.+104    	; 0x6098 <__addsf3x+0x80>
    6030:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__fp_zero>
    6034:	0e f4       	brtc	.+2      	; 0x6038 <__addsf3x+0x20>
    6036:	e0 95       	com	r30
    6038:	0b 2e       	mov	r0, r27
    603a:	ba 2f       	mov	r27, r26
    603c:	a0 2d       	mov	r26, r0
    603e:	0b 01       	movw	r0, r22
    6040:	b9 01       	movw	r22, r18
    6042:	90 01       	movw	r18, r0
    6044:	0c 01       	movw	r0, r24
    6046:	ca 01       	movw	r24, r20
    6048:	a0 01       	movw	r20, r0
    604a:	11 24       	eor	r1, r1
    604c:	ff 27       	eor	r31, r31
    604e:	59 1b       	sub	r21, r25
    6050:	99 f0       	breq	.+38     	; 0x6078 <__addsf3x+0x60>
    6052:	59 3f       	cpi	r21, 0xF9	; 249
    6054:	50 f4       	brcc	.+20     	; 0x606a <__addsf3x+0x52>
    6056:	50 3e       	cpi	r21, 0xE0	; 224
    6058:	68 f1       	brcs	.+90     	; 0x60b4 <__addsf3x+0x9c>
    605a:	1a 16       	cp	r1, r26
    605c:	f0 40       	sbci	r31, 0x00	; 0
    605e:	a2 2f       	mov	r26, r18
    6060:	23 2f       	mov	r18, r19
    6062:	34 2f       	mov	r19, r20
    6064:	44 27       	eor	r20, r20
    6066:	58 5f       	subi	r21, 0xF8	; 248
    6068:	f3 cf       	rjmp	.-26     	; 0x6050 <__addsf3x+0x38>
    606a:	46 95       	lsr	r20
    606c:	37 95       	ror	r19
    606e:	27 95       	ror	r18
    6070:	a7 95       	ror	r26
    6072:	f0 40       	sbci	r31, 0x00	; 0
    6074:	53 95       	inc	r21
    6076:	c9 f7       	brne	.-14     	; 0x606a <__addsf3x+0x52>
    6078:	7e f4       	brtc	.+30     	; 0x6098 <__addsf3x+0x80>
    607a:	1f 16       	cp	r1, r31
    607c:	ba 0b       	sbc	r27, r26
    607e:	62 0b       	sbc	r22, r18
    6080:	73 0b       	sbc	r23, r19
    6082:	84 0b       	sbc	r24, r20
    6084:	ba f0       	brmi	.+46     	; 0x60b4 <__addsf3x+0x9c>
    6086:	91 50       	subi	r25, 0x01	; 1
    6088:	a1 f0       	breq	.+40     	; 0x60b2 <__addsf3x+0x9a>
    608a:	ff 0f       	add	r31, r31
    608c:	bb 1f       	adc	r27, r27
    608e:	66 1f       	adc	r22, r22
    6090:	77 1f       	adc	r23, r23
    6092:	88 1f       	adc	r24, r24
    6094:	c2 f7       	brpl	.-16     	; 0x6086 <__addsf3x+0x6e>
    6096:	0e c0       	rjmp	.+28     	; 0x60b4 <__addsf3x+0x9c>
    6098:	ba 0f       	add	r27, r26
    609a:	62 1f       	adc	r22, r18
    609c:	73 1f       	adc	r23, r19
    609e:	84 1f       	adc	r24, r20
    60a0:	48 f4       	brcc	.+18     	; 0x60b4 <__addsf3x+0x9c>
    60a2:	87 95       	ror	r24
    60a4:	77 95       	ror	r23
    60a6:	67 95       	ror	r22
    60a8:	b7 95       	ror	r27
    60aa:	f7 95       	ror	r31
    60ac:	9e 3f       	cpi	r25, 0xFE	; 254
    60ae:	08 f0       	brcs	.+2      	; 0x60b2 <__addsf3x+0x9a>
    60b0:	b0 cf       	rjmp	.-160    	; 0x6012 <__addsf3+0x28>
    60b2:	93 95       	inc	r25
    60b4:	88 0f       	add	r24, r24
    60b6:	08 f0       	brcs	.+2      	; 0x60ba <__addsf3x+0xa2>
    60b8:	99 27       	eor	r25, r25
    60ba:	ee 0f       	add	r30, r30
    60bc:	97 95       	ror	r25
    60be:	87 95       	ror	r24
    60c0:	08 95       	ret

000060c2 <__divsf3>:
    60c2:	0e 94 75 30 	call	0x60ea	; 0x60ea <__divsf3x>
    60c6:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__fp_round>
    60ca:	0e 94 56 31 	call	0x62ac	; 0x62ac <__fp_pscB>
    60ce:	58 f0       	brcs	.+22     	; 0x60e6 <__divsf3+0x24>
    60d0:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscA>
    60d4:	40 f0       	brcs	.+16     	; 0x60e6 <__divsf3+0x24>
    60d6:	29 f4       	brne	.+10     	; 0x60e2 <__divsf3+0x20>
    60d8:	5f 3f       	cpi	r21, 0xFF	; 255
    60da:	29 f0       	breq	.+10     	; 0x60e6 <__divsf3+0x24>
    60dc:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    60e0:	51 11       	cpse	r21, r1
    60e2:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>
    60e6:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>

000060ea <__divsf3x>:
    60ea:	0e 94 6e 31 	call	0x62dc	; 0x62dc <__fp_split3>
    60ee:	68 f3       	brcs	.-38     	; 0x60ca <__divsf3+0x8>

000060f0 <__divsf3_pse>:
    60f0:	99 23       	and	r25, r25
    60f2:	b1 f3       	breq	.-20     	; 0x60e0 <__divsf3+0x1e>
    60f4:	55 23       	and	r21, r21
    60f6:	91 f3       	breq	.-28     	; 0x60dc <__divsf3+0x1a>
    60f8:	95 1b       	sub	r25, r21
    60fa:	55 0b       	sbc	r21, r21
    60fc:	bb 27       	eor	r27, r27
    60fe:	aa 27       	eor	r26, r26
    6100:	62 17       	cp	r22, r18
    6102:	73 07       	cpc	r23, r19
    6104:	84 07       	cpc	r24, r20
    6106:	38 f0       	brcs	.+14     	; 0x6116 <__divsf3_pse+0x26>
    6108:	9f 5f       	subi	r25, 0xFF	; 255
    610a:	5f 4f       	sbci	r21, 0xFF	; 255
    610c:	22 0f       	add	r18, r18
    610e:	33 1f       	adc	r19, r19
    6110:	44 1f       	adc	r20, r20
    6112:	aa 1f       	adc	r26, r26
    6114:	a9 f3       	breq	.-22     	; 0x6100 <__divsf3_pse+0x10>
    6116:	35 d0       	rcall	.+106    	; 0x6182 <__divsf3_pse+0x92>
    6118:	0e 2e       	mov	r0, r30
    611a:	3a f0       	brmi	.+14     	; 0x612a <__divsf3_pse+0x3a>
    611c:	e0 e8       	ldi	r30, 0x80	; 128
    611e:	32 d0       	rcall	.+100    	; 0x6184 <__divsf3_pse+0x94>
    6120:	91 50       	subi	r25, 0x01	; 1
    6122:	50 40       	sbci	r21, 0x00	; 0
    6124:	e6 95       	lsr	r30
    6126:	00 1c       	adc	r0, r0
    6128:	ca f7       	brpl	.-14     	; 0x611c <__divsf3_pse+0x2c>
    612a:	2b d0       	rcall	.+86     	; 0x6182 <__divsf3_pse+0x92>
    612c:	fe 2f       	mov	r31, r30
    612e:	29 d0       	rcall	.+82     	; 0x6182 <__divsf3_pse+0x92>
    6130:	66 0f       	add	r22, r22
    6132:	77 1f       	adc	r23, r23
    6134:	88 1f       	adc	r24, r24
    6136:	bb 1f       	adc	r27, r27
    6138:	26 17       	cp	r18, r22
    613a:	37 07       	cpc	r19, r23
    613c:	48 07       	cpc	r20, r24
    613e:	ab 07       	cpc	r26, r27
    6140:	b0 e8       	ldi	r27, 0x80	; 128
    6142:	09 f0       	breq	.+2      	; 0x6146 <__divsf3_pse+0x56>
    6144:	bb 0b       	sbc	r27, r27
    6146:	80 2d       	mov	r24, r0
    6148:	bf 01       	movw	r22, r30
    614a:	ff 27       	eor	r31, r31
    614c:	93 58       	subi	r25, 0x83	; 131
    614e:	5f 4f       	sbci	r21, 0xFF	; 255
    6150:	3a f0       	brmi	.+14     	; 0x6160 <__divsf3_pse+0x70>
    6152:	9e 3f       	cpi	r25, 0xFE	; 254
    6154:	51 05       	cpc	r21, r1
    6156:	78 f0       	brcs	.+30     	; 0x6176 <__divsf3_pse+0x86>
    6158:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    615c:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>
    6160:	5f 3f       	cpi	r21, 0xFF	; 255
    6162:	e4 f3       	brlt	.-8      	; 0x615c <__divsf3_pse+0x6c>
    6164:	98 3e       	cpi	r25, 0xE8	; 232
    6166:	d4 f3       	brlt	.-12     	; 0x615c <__divsf3_pse+0x6c>
    6168:	86 95       	lsr	r24
    616a:	77 95       	ror	r23
    616c:	67 95       	ror	r22
    616e:	b7 95       	ror	r27
    6170:	f7 95       	ror	r31
    6172:	9f 5f       	subi	r25, 0xFF	; 255
    6174:	c9 f7       	brne	.-14     	; 0x6168 <__divsf3_pse+0x78>
    6176:	88 0f       	add	r24, r24
    6178:	91 1d       	adc	r25, r1
    617a:	96 95       	lsr	r25
    617c:	87 95       	ror	r24
    617e:	97 f9       	bld	r25, 7
    6180:	08 95       	ret
    6182:	e1 e0       	ldi	r30, 0x01	; 1
    6184:	66 0f       	add	r22, r22
    6186:	77 1f       	adc	r23, r23
    6188:	88 1f       	adc	r24, r24
    618a:	bb 1f       	adc	r27, r27
    618c:	62 17       	cp	r22, r18
    618e:	73 07       	cpc	r23, r19
    6190:	84 07       	cpc	r24, r20
    6192:	ba 07       	cpc	r27, r26
    6194:	20 f0       	brcs	.+8      	; 0x619e <__divsf3_pse+0xae>
    6196:	62 1b       	sub	r22, r18
    6198:	73 0b       	sbc	r23, r19
    619a:	84 0b       	sbc	r24, r20
    619c:	ba 0b       	sbc	r27, r26
    619e:	ee 1f       	adc	r30, r30
    61a0:	88 f7       	brcc	.-30     	; 0x6184 <__divsf3_pse+0x94>
    61a2:	e0 95       	com	r30
    61a4:	08 95       	ret

000061a6 <__fixsfsi>:
    61a6:	0e 94 da 30 	call	0x61b4	; 0x61b4 <__fixunssfsi>
    61aa:	68 94       	set
    61ac:	b1 11       	cpse	r27, r1
    61ae:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>
    61b2:	08 95       	ret

000061b4 <__fixunssfsi>:
    61b4:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_splitA>
    61b8:	88 f0       	brcs	.+34     	; 0x61dc <__fixunssfsi+0x28>
    61ba:	9f 57       	subi	r25, 0x7F	; 127
    61bc:	98 f0       	brcs	.+38     	; 0x61e4 <__fixunssfsi+0x30>
    61be:	b9 2f       	mov	r27, r25
    61c0:	99 27       	eor	r25, r25
    61c2:	b7 51       	subi	r27, 0x17	; 23
    61c4:	b0 f0       	brcs	.+44     	; 0x61f2 <__fixunssfsi+0x3e>
    61c6:	e1 f0       	breq	.+56     	; 0x6200 <__fixunssfsi+0x4c>
    61c8:	66 0f       	add	r22, r22
    61ca:	77 1f       	adc	r23, r23
    61cc:	88 1f       	adc	r24, r24
    61ce:	99 1f       	adc	r25, r25
    61d0:	1a f0       	brmi	.+6      	; 0x61d8 <__fixunssfsi+0x24>
    61d2:	ba 95       	dec	r27
    61d4:	c9 f7       	brne	.-14     	; 0x61c8 <__fixunssfsi+0x14>
    61d6:	14 c0       	rjmp	.+40     	; 0x6200 <__fixunssfsi+0x4c>
    61d8:	b1 30       	cpi	r27, 0x01	; 1
    61da:	91 f0       	breq	.+36     	; 0x6200 <__fixunssfsi+0x4c>
    61dc:	0e 94 90 31 	call	0x6320	; 0x6320 <__fp_zero>
    61e0:	b1 e0       	ldi	r27, 0x01	; 1
    61e2:	08 95       	ret
    61e4:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__fp_zero>
    61e8:	67 2f       	mov	r22, r23
    61ea:	78 2f       	mov	r23, r24
    61ec:	88 27       	eor	r24, r24
    61ee:	b8 5f       	subi	r27, 0xF8	; 248
    61f0:	39 f0       	breq	.+14     	; 0x6200 <__fixunssfsi+0x4c>
    61f2:	b9 3f       	cpi	r27, 0xF9	; 249
    61f4:	cc f3       	brlt	.-14     	; 0x61e8 <__fixunssfsi+0x34>
    61f6:	86 95       	lsr	r24
    61f8:	77 95       	ror	r23
    61fa:	67 95       	ror	r22
    61fc:	b3 95       	inc	r27
    61fe:	d9 f7       	brne	.-10     	; 0x61f6 <__fixunssfsi+0x42>
    6200:	3e f4       	brtc	.+14     	; 0x6210 <__fixunssfsi+0x5c>
    6202:	90 95       	com	r25
    6204:	80 95       	com	r24
    6206:	70 95       	com	r23
    6208:	61 95       	neg	r22
    620a:	7f 4f       	sbci	r23, 0xFF	; 255
    620c:	8f 4f       	sbci	r24, 0xFF	; 255
    620e:	9f 4f       	sbci	r25, 0xFF	; 255
    6210:	08 95       	ret

00006212 <__floatunsisf>:
    6212:	e8 94       	clt
    6214:	09 c0       	rjmp	.+18     	; 0x6228 <__floatsisf+0x12>

00006216 <__floatsisf>:
    6216:	97 fb       	bst	r25, 7
    6218:	3e f4       	brtc	.+14     	; 0x6228 <__floatsisf+0x12>
    621a:	90 95       	com	r25
    621c:	80 95       	com	r24
    621e:	70 95       	com	r23
    6220:	61 95       	neg	r22
    6222:	7f 4f       	sbci	r23, 0xFF	; 255
    6224:	8f 4f       	sbci	r24, 0xFF	; 255
    6226:	9f 4f       	sbci	r25, 0xFF	; 255
    6228:	99 23       	and	r25, r25
    622a:	a9 f0       	breq	.+42     	; 0x6256 <__floatsisf+0x40>
    622c:	f9 2f       	mov	r31, r25
    622e:	96 e9       	ldi	r25, 0x96	; 150
    6230:	bb 27       	eor	r27, r27
    6232:	93 95       	inc	r25
    6234:	f6 95       	lsr	r31
    6236:	87 95       	ror	r24
    6238:	77 95       	ror	r23
    623a:	67 95       	ror	r22
    623c:	b7 95       	ror	r27
    623e:	f1 11       	cpse	r31, r1
    6240:	f8 cf       	rjmp	.-16     	; 0x6232 <__floatsisf+0x1c>
    6242:	fa f4       	brpl	.+62     	; 0x6282 <__floatsisf+0x6c>
    6244:	bb 0f       	add	r27, r27
    6246:	11 f4       	brne	.+4      	; 0x624c <__floatsisf+0x36>
    6248:	60 ff       	sbrs	r22, 0
    624a:	1b c0       	rjmp	.+54     	; 0x6282 <__floatsisf+0x6c>
    624c:	6f 5f       	subi	r22, 0xFF	; 255
    624e:	7f 4f       	sbci	r23, 0xFF	; 255
    6250:	8f 4f       	sbci	r24, 0xFF	; 255
    6252:	9f 4f       	sbci	r25, 0xFF	; 255
    6254:	16 c0       	rjmp	.+44     	; 0x6282 <__floatsisf+0x6c>
    6256:	88 23       	and	r24, r24
    6258:	11 f0       	breq	.+4      	; 0x625e <__floatsisf+0x48>
    625a:	96 e9       	ldi	r25, 0x96	; 150
    625c:	11 c0       	rjmp	.+34     	; 0x6280 <__floatsisf+0x6a>
    625e:	77 23       	and	r23, r23
    6260:	21 f0       	breq	.+8      	; 0x626a <__floatsisf+0x54>
    6262:	9e e8       	ldi	r25, 0x8E	; 142
    6264:	87 2f       	mov	r24, r23
    6266:	76 2f       	mov	r23, r22
    6268:	05 c0       	rjmp	.+10     	; 0x6274 <__floatsisf+0x5e>
    626a:	66 23       	and	r22, r22
    626c:	71 f0       	breq	.+28     	; 0x628a <__floatsisf+0x74>
    626e:	96 e8       	ldi	r25, 0x86	; 134
    6270:	86 2f       	mov	r24, r22
    6272:	70 e0       	ldi	r23, 0x00	; 0
    6274:	60 e0       	ldi	r22, 0x00	; 0
    6276:	2a f0       	brmi	.+10     	; 0x6282 <__floatsisf+0x6c>
    6278:	9a 95       	dec	r25
    627a:	66 0f       	add	r22, r22
    627c:	77 1f       	adc	r23, r23
    627e:	88 1f       	adc	r24, r24
    6280:	da f7       	brpl	.-10     	; 0x6278 <__floatsisf+0x62>
    6282:	88 0f       	add	r24, r24
    6284:	96 95       	lsr	r25
    6286:	87 95       	ror	r24
    6288:	97 f9       	bld	r25, 7
    628a:	08 95       	ret

0000628c <__fp_inf>:
    628c:	97 f9       	bld	r25, 7
    628e:	9f 67       	ori	r25, 0x7F	; 127
    6290:	80 e8       	ldi	r24, 0x80	; 128
    6292:	70 e0       	ldi	r23, 0x00	; 0
    6294:	60 e0       	ldi	r22, 0x00	; 0
    6296:	08 95       	ret

00006298 <__fp_nan>:
    6298:	9f ef       	ldi	r25, 0xFF	; 255
    629a:	80 ec       	ldi	r24, 0xC0	; 192
    629c:	08 95       	ret

0000629e <__fp_pscA>:
    629e:	00 24       	eor	r0, r0
    62a0:	0a 94       	dec	r0
    62a2:	16 16       	cp	r1, r22
    62a4:	17 06       	cpc	r1, r23
    62a6:	18 06       	cpc	r1, r24
    62a8:	09 06       	cpc	r0, r25
    62aa:	08 95       	ret

000062ac <__fp_pscB>:
    62ac:	00 24       	eor	r0, r0
    62ae:	0a 94       	dec	r0
    62b0:	12 16       	cp	r1, r18
    62b2:	13 06       	cpc	r1, r19
    62b4:	14 06       	cpc	r1, r20
    62b6:	05 06       	cpc	r0, r21
    62b8:	08 95       	ret

000062ba <__fp_round>:
    62ba:	09 2e       	mov	r0, r25
    62bc:	03 94       	inc	r0
    62be:	00 0c       	add	r0, r0
    62c0:	11 f4       	brne	.+4      	; 0x62c6 <__fp_round+0xc>
    62c2:	88 23       	and	r24, r24
    62c4:	52 f0       	brmi	.+20     	; 0x62da <__fp_round+0x20>
    62c6:	bb 0f       	add	r27, r27
    62c8:	40 f4       	brcc	.+16     	; 0x62da <__fp_round+0x20>
    62ca:	bf 2b       	or	r27, r31
    62cc:	11 f4       	brne	.+4      	; 0x62d2 <__fp_round+0x18>
    62ce:	60 ff       	sbrs	r22, 0
    62d0:	04 c0       	rjmp	.+8      	; 0x62da <__fp_round+0x20>
    62d2:	6f 5f       	subi	r22, 0xFF	; 255
    62d4:	7f 4f       	sbci	r23, 0xFF	; 255
    62d6:	8f 4f       	sbci	r24, 0xFF	; 255
    62d8:	9f 4f       	sbci	r25, 0xFF	; 255
    62da:	08 95       	ret

000062dc <__fp_split3>:
    62dc:	57 fd       	sbrc	r21, 7
    62de:	90 58       	subi	r25, 0x80	; 128
    62e0:	44 0f       	add	r20, r20
    62e2:	55 1f       	adc	r21, r21
    62e4:	59 f0       	breq	.+22     	; 0x62fc <__fp_splitA+0x10>
    62e6:	5f 3f       	cpi	r21, 0xFF	; 255
    62e8:	71 f0       	breq	.+28     	; 0x6306 <__fp_splitA+0x1a>
    62ea:	47 95       	ror	r20

000062ec <__fp_splitA>:
    62ec:	88 0f       	add	r24, r24
    62ee:	97 fb       	bst	r25, 7
    62f0:	99 1f       	adc	r25, r25
    62f2:	61 f0       	breq	.+24     	; 0x630c <__fp_splitA+0x20>
    62f4:	9f 3f       	cpi	r25, 0xFF	; 255
    62f6:	79 f0       	breq	.+30     	; 0x6316 <__fp_splitA+0x2a>
    62f8:	87 95       	ror	r24
    62fa:	08 95       	ret
    62fc:	12 16       	cp	r1, r18
    62fe:	13 06       	cpc	r1, r19
    6300:	14 06       	cpc	r1, r20
    6302:	55 1f       	adc	r21, r21
    6304:	f2 cf       	rjmp	.-28     	; 0x62ea <__fp_split3+0xe>
    6306:	46 95       	lsr	r20
    6308:	f1 df       	rcall	.-30     	; 0x62ec <__fp_splitA>
    630a:	08 c0       	rjmp	.+16     	; 0x631c <__fp_splitA+0x30>
    630c:	16 16       	cp	r1, r22
    630e:	17 06       	cpc	r1, r23
    6310:	18 06       	cpc	r1, r24
    6312:	99 1f       	adc	r25, r25
    6314:	f1 cf       	rjmp	.-30     	; 0x62f8 <__fp_splitA+0xc>
    6316:	86 95       	lsr	r24
    6318:	71 05       	cpc	r23, r1
    631a:	61 05       	cpc	r22, r1
    631c:	08 94       	sec
    631e:	08 95       	ret

00006320 <__fp_zero>:
    6320:	e8 94       	clt

00006322 <__fp_szero>:
    6322:	bb 27       	eor	r27, r27
    6324:	66 27       	eor	r22, r22
    6326:	77 27       	eor	r23, r23
    6328:	cb 01       	movw	r24, r22
    632a:	97 f9       	bld	r25, 7
    632c:	08 95       	ret

0000632e <__mulsf3>:
    632e:	0e 94 aa 31 	call	0x6354	; 0x6354 <__mulsf3x>
    6332:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__fp_round>
    6336:	0e 94 4f 31 	call	0x629e	; 0x629e <__fp_pscA>
    633a:	38 f0       	brcs	.+14     	; 0x634a <__mulsf3+0x1c>
    633c:	0e 94 56 31 	call	0x62ac	; 0x62ac <__fp_pscB>
    6340:	20 f0       	brcs	.+8      	; 0x634a <__mulsf3+0x1c>
    6342:	95 23       	and	r25, r21
    6344:	11 f0       	breq	.+4      	; 0x634a <__mulsf3+0x1c>
    6346:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    634a:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>
    634e:	11 24       	eor	r1, r1
    6350:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>

00006354 <__mulsf3x>:
    6354:	0e 94 6e 31 	call	0x62dc	; 0x62dc <__fp_split3>
    6358:	70 f3       	brcs	.-36     	; 0x6336 <__mulsf3+0x8>

0000635a <__mulsf3_pse>:
    635a:	95 9f       	mul	r25, r21
    635c:	c1 f3       	breq	.-16     	; 0x634e <__mulsf3+0x20>
    635e:	95 0f       	add	r25, r21
    6360:	50 e0       	ldi	r21, 0x00	; 0
    6362:	55 1f       	adc	r21, r21
    6364:	62 9f       	mul	r22, r18
    6366:	f0 01       	movw	r30, r0
    6368:	72 9f       	mul	r23, r18
    636a:	bb 27       	eor	r27, r27
    636c:	f0 0d       	add	r31, r0
    636e:	b1 1d       	adc	r27, r1
    6370:	63 9f       	mul	r22, r19
    6372:	aa 27       	eor	r26, r26
    6374:	f0 0d       	add	r31, r0
    6376:	b1 1d       	adc	r27, r1
    6378:	aa 1f       	adc	r26, r26
    637a:	64 9f       	mul	r22, r20
    637c:	66 27       	eor	r22, r22
    637e:	b0 0d       	add	r27, r0
    6380:	a1 1d       	adc	r26, r1
    6382:	66 1f       	adc	r22, r22
    6384:	82 9f       	mul	r24, r18
    6386:	22 27       	eor	r18, r18
    6388:	b0 0d       	add	r27, r0
    638a:	a1 1d       	adc	r26, r1
    638c:	62 1f       	adc	r22, r18
    638e:	73 9f       	mul	r23, r19
    6390:	b0 0d       	add	r27, r0
    6392:	a1 1d       	adc	r26, r1
    6394:	62 1f       	adc	r22, r18
    6396:	83 9f       	mul	r24, r19
    6398:	a0 0d       	add	r26, r0
    639a:	61 1d       	adc	r22, r1
    639c:	22 1f       	adc	r18, r18
    639e:	74 9f       	mul	r23, r20
    63a0:	33 27       	eor	r19, r19
    63a2:	a0 0d       	add	r26, r0
    63a4:	61 1d       	adc	r22, r1
    63a6:	23 1f       	adc	r18, r19
    63a8:	84 9f       	mul	r24, r20
    63aa:	60 0d       	add	r22, r0
    63ac:	21 1d       	adc	r18, r1
    63ae:	82 2f       	mov	r24, r18
    63b0:	76 2f       	mov	r23, r22
    63b2:	6a 2f       	mov	r22, r26
    63b4:	11 24       	eor	r1, r1
    63b6:	9f 57       	subi	r25, 0x7F	; 127
    63b8:	50 40       	sbci	r21, 0x00	; 0
    63ba:	9a f0       	brmi	.+38     	; 0x63e2 <__mulsf3_pse+0x88>
    63bc:	f1 f0       	breq	.+60     	; 0x63fa <__mulsf3_pse+0xa0>
    63be:	88 23       	and	r24, r24
    63c0:	4a f0       	brmi	.+18     	; 0x63d4 <__mulsf3_pse+0x7a>
    63c2:	ee 0f       	add	r30, r30
    63c4:	ff 1f       	adc	r31, r31
    63c6:	bb 1f       	adc	r27, r27
    63c8:	66 1f       	adc	r22, r22
    63ca:	77 1f       	adc	r23, r23
    63cc:	88 1f       	adc	r24, r24
    63ce:	91 50       	subi	r25, 0x01	; 1
    63d0:	50 40       	sbci	r21, 0x00	; 0
    63d2:	a9 f7       	brne	.-22     	; 0x63be <__mulsf3_pse+0x64>
    63d4:	9e 3f       	cpi	r25, 0xFE	; 254
    63d6:	51 05       	cpc	r21, r1
    63d8:	80 f0       	brcs	.+32     	; 0x63fa <__mulsf3_pse+0xa0>
    63da:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    63de:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>
    63e2:	5f 3f       	cpi	r21, 0xFF	; 255
    63e4:	e4 f3       	brlt	.-8      	; 0x63de <__mulsf3_pse+0x84>
    63e6:	98 3e       	cpi	r25, 0xE8	; 232
    63e8:	d4 f3       	brlt	.-12     	; 0x63de <__mulsf3_pse+0x84>
    63ea:	86 95       	lsr	r24
    63ec:	77 95       	ror	r23
    63ee:	67 95       	ror	r22
    63f0:	b7 95       	ror	r27
    63f2:	f7 95       	ror	r31
    63f4:	e7 95       	ror	r30
    63f6:	9f 5f       	subi	r25, 0xFF	; 255
    63f8:	c1 f7       	brne	.-16     	; 0x63ea <__mulsf3_pse+0x90>
    63fa:	fe 2b       	or	r31, r30
    63fc:	88 0f       	add	r24, r24
    63fe:	91 1d       	adc	r25, r1
    6400:	96 95       	lsr	r25
    6402:	87 95       	ror	r24
    6404:	97 f9       	bld	r25, 7
    6406:	08 95       	ret

00006408 <pow>:
    6408:	fa 01       	movw	r30, r20
    640a:	ee 0f       	add	r30, r30
    640c:	ff 1f       	adc	r31, r31
    640e:	30 96       	adiw	r30, 0x00	; 0
    6410:	21 05       	cpc	r18, r1
    6412:	31 05       	cpc	r19, r1
    6414:	a1 f1       	breq	.+104    	; 0x647e <pow+0x76>
    6416:	61 15       	cp	r22, r1
    6418:	71 05       	cpc	r23, r1
    641a:	61 f4       	brne	.+24     	; 0x6434 <pow+0x2c>
    641c:	80 38       	cpi	r24, 0x80	; 128
    641e:	bf e3       	ldi	r27, 0x3F	; 63
    6420:	9b 07       	cpc	r25, r27
    6422:	49 f1       	breq	.+82     	; 0x6476 <pow+0x6e>
    6424:	68 94       	set
    6426:	90 38       	cpi	r25, 0x80	; 128
    6428:	81 05       	cpc	r24, r1
    642a:	61 f0       	breq	.+24     	; 0x6444 <pow+0x3c>
    642c:	80 38       	cpi	r24, 0x80	; 128
    642e:	bf ef       	ldi	r27, 0xFF	; 255
    6430:	9b 07       	cpc	r25, r27
    6432:	41 f0       	breq	.+16     	; 0x6444 <pow+0x3c>
    6434:	99 23       	and	r25, r25
    6436:	4a f5       	brpl	.+82     	; 0x648a <pow+0x82>
    6438:	ff 3f       	cpi	r31, 0xFF	; 255
    643a:	e1 05       	cpc	r30, r1
    643c:	31 05       	cpc	r19, r1
    643e:	21 05       	cpc	r18, r1
    6440:	19 f1       	breq	.+70     	; 0x6488 <pow+0x80>
    6442:	e8 94       	clt
    6444:	08 94       	sec
    6446:	e7 95       	ror	r30
    6448:	d9 01       	movw	r26, r18
    644a:	aa 23       	and	r26, r26
    644c:	29 f4       	brne	.+10     	; 0x6458 <pow+0x50>
    644e:	ab 2f       	mov	r26, r27
    6450:	be 2f       	mov	r27, r30
    6452:	f8 5f       	subi	r31, 0xF8	; 248
    6454:	d0 f3       	brcs	.-12     	; 0x644a <pow+0x42>
    6456:	10 c0       	rjmp	.+32     	; 0x6478 <pow+0x70>
    6458:	ff 5f       	subi	r31, 0xFF	; 255
    645a:	70 f4       	brcc	.+28     	; 0x6478 <pow+0x70>
    645c:	a6 95       	lsr	r26
    645e:	e0 f7       	brcc	.-8      	; 0x6458 <pow+0x50>
    6460:	f7 39       	cpi	r31, 0x97	; 151
    6462:	50 f0       	brcs	.+20     	; 0x6478 <pow+0x70>
    6464:	19 f0       	breq	.+6      	; 0x646c <pow+0x64>
    6466:	ff 3a       	cpi	r31, 0xAF	; 175
    6468:	38 f4       	brcc	.+14     	; 0x6478 <pow+0x70>
    646a:	9f 77       	andi	r25, 0x7F	; 127
    646c:	9f 93       	push	r25
    646e:	0d d0       	rcall	.+26     	; 0x648a <pow+0x82>
    6470:	0f 90       	pop	r0
    6472:	07 fc       	sbrc	r0, 7
    6474:	90 58       	subi	r25, 0x80	; 128
    6476:	08 95       	ret
    6478:	46 f0       	brts	.+16     	; 0x648a <pow+0x82>
    647a:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>
    647e:	60 e0       	ldi	r22, 0x00	; 0
    6480:	70 e0       	ldi	r23, 0x00	; 0
    6482:	80 e8       	ldi	r24, 0x80	; 128
    6484:	9f e3       	ldi	r25, 0x3F	; 63
    6486:	08 95       	ret
    6488:	4f e7       	ldi	r20, 0x7F	; 127
    648a:	9f 77       	andi	r25, 0x7F	; 127
    648c:	5f 93       	push	r21
    648e:	4f 93       	push	r20
    6490:	3f 93       	push	r19
    6492:	2f 93       	push	r18
    6494:	0e 94 ff 32 	call	0x65fe	; 0x65fe <log>
    6498:	2f 91       	pop	r18
    649a:	3f 91       	pop	r19
    649c:	4f 91       	pop	r20
    649e:	5f 91       	pop	r21
    64a0:	0e 94 97 31 	call	0x632e	; 0x632e <__mulsf3>
    64a4:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <exp>
    64a8:	29 f4       	brne	.+10     	; 0x64b4 <pow+0xac>
    64aa:	16 f0       	brts	.+4      	; 0x64b0 <pow+0xa8>
    64ac:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    64b0:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__fp_zero>
    64b4:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>

000064b8 <exp>:
    64b8:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_splitA>
    64bc:	a8 f3       	brcs	.-22     	; 0x64a8 <pow+0xa0>
    64be:	96 38       	cpi	r25, 0x86	; 134
    64c0:	a0 f7       	brcc	.-24     	; 0x64aa <pow+0xa2>
    64c2:	07 f8       	bld	r0, 7
    64c4:	0f 92       	push	r0
    64c6:	e8 94       	clt
    64c8:	2b e3       	ldi	r18, 0x3B	; 59
    64ca:	3a ea       	ldi	r19, 0xAA	; 170
    64cc:	48 eb       	ldi	r20, 0xB8	; 184
    64ce:	5f e7       	ldi	r21, 0x7F	; 127
    64d0:	0e 94 ad 31 	call	0x635a	; 0x635a <__mulsf3_pse>
    64d4:	0f 92       	push	r0
    64d6:	0f 92       	push	r0
    64d8:	0f 92       	push	r0
    64da:	4d b7       	in	r20, 0x3d	; 61
    64dc:	5e b7       	in	r21, 0x3e	; 62
    64de:	0f 92       	push	r0
    64e0:	0e 94 47 33 	call	0x668e	; 0x668e <modf>
    64e4:	e8 e6       	ldi	r30, 0x68	; 104
    64e6:	f0 e0       	ldi	r31, 0x00	; 0
    64e8:	0e 94 8e 32 	call	0x651c	; 0x651c <__fp_powser>
    64ec:	4f 91       	pop	r20
    64ee:	5f 91       	pop	r21
    64f0:	ef 91       	pop	r30
    64f2:	ff 91       	pop	r31
    64f4:	e5 95       	asr	r30
    64f6:	ee 1f       	adc	r30, r30
    64f8:	ff 1f       	adc	r31, r31
    64fa:	49 f0       	breq	.+18     	; 0x650e <exp+0x56>
    64fc:	fe 57       	subi	r31, 0x7E	; 126
    64fe:	e0 68       	ori	r30, 0x80	; 128
    6500:	44 27       	eor	r20, r20
    6502:	ee 0f       	add	r30, r30
    6504:	44 1f       	adc	r20, r20
    6506:	fa 95       	dec	r31
    6508:	e1 f7       	brne	.-8      	; 0x6502 <exp+0x4a>
    650a:	41 95       	neg	r20
    650c:	55 0b       	sbc	r21, r21
    650e:	0e 94 c1 32 	call	0x6582	; 0x6582 <ldexp>
    6512:	0f 90       	pop	r0
    6514:	07 fe       	sbrs	r0, 7
    6516:	0c 94 b5 32 	jmp	0x656a	; 0x656a <inverse>
    651a:	08 95       	ret

0000651c <__fp_powser>:
    651c:	df 93       	push	r29
    651e:	cf 93       	push	r28
    6520:	1f 93       	push	r17
    6522:	0f 93       	push	r16
    6524:	ff 92       	push	r15
    6526:	ef 92       	push	r14
    6528:	df 92       	push	r13
    652a:	7b 01       	movw	r14, r22
    652c:	8c 01       	movw	r16, r24
    652e:	68 94       	set
    6530:	06 c0       	rjmp	.+12     	; 0x653e <__fp_powser+0x22>
    6532:	da 2e       	mov	r13, r26
    6534:	ef 01       	movw	r28, r30
    6536:	0e 94 aa 31 	call	0x6354	; 0x6354 <__mulsf3x>
    653a:	fe 01       	movw	r30, r28
    653c:	e8 94       	clt
    653e:	a5 91       	lpm	r26, Z+
    6540:	25 91       	lpm	r18, Z+
    6542:	35 91       	lpm	r19, Z+
    6544:	45 91       	lpm	r20, Z+
    6546:	55 91       	lpm	r21, Z+
    6548:	a6 f3       	brts	.-24     	; 0x6532 <__fp_powser+0x16>
    654a:	ef 01       	movw	r28, r30
    654c:	0e 94 0c 30 	call	0x6018	; 0x6018 <__addsf3x>
    6550:	fe 01       	movw	r30, r28
    6552:	97 01       	movw	r18, r14
    6554:	a8 01       	movw	r20, r16
    6556:	da 94       	dec	r13
    6558:	69 f7       	brne	.-38     	; 0x6534 <__fp_powser+0x18>
    655a:	df 90       	pop	r13
    655c:	ef 90       	pop	r14
    655e:	ff 90       	pop	r15
    6560:	0f 91       	pop	r16
    6562:	1f 91       	pop	r17
    6564:	cf 91       	pop	r28
    6566:	df 91       	pop	r29
    6568:	08 95       	ret

0000656a <inverse>:
    656a:	9b 01       	movw	r18, r22
    656c:	ac 01       	movw	r20, r24
    656e:	60 e0       	ldi	r22, 0x00	; 0
    6570:	70 e0       	ldi	r23, 0x00	; 0
    6572:	80 e8       	ldi	r24, 0x80	; 128
    6574:	9f e3       	ldi	r25, 0x3F	; 63
    6576:	0c 94 61 30 	jmp	0x60c2	; 0x60c2 <__divsf3>
    657a:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>
    657e:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__fp_mpack>

00006582 <ldexp>:
    6582:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_splitA>
    6586:	d8 f3       	brcs	.-10     	; 0x657e <inverse+0x14>
    6588:	99 23       	and	r25, r25
    658a:	c9 f3       	breq	.-14     	; 0x657e <inverse+0x14>
    658c:	94 0f       	add	r25, r20
    658e:	51 1d       	adc	r21, r1
    6590:	a3 f3       	brvs	.-24     	; 0x657a <inverse+0x10>
    6592:	91 50       	subi	r25, 0x01	; 1
    6594:	50 40       	sbci	r21, 0x00	; 0
    6596:	94 f0       	brlt	.+36     	; 0x65bc <ldexp+0x3a>
    6598:	59 f0       	breq	.+22     	; 0x65b0 <ldexp+0x2e>
    659a:	88 23       	and	r24, r24
    659c:	32 f0       	brmi	.+12     	; 0x65aa <ldexp+0x28>
    659e:	66 0f       	add	r22, r22
    65a0:	77 1f       	adc	r23, r23
    65a2:	88 1f       	adc	r24, r24
    65a4:	91 50       	subi	r25, 0x01	; 1
    65a6:	50 40       	sbci	r21, 0x00	; 0
    65a8:	c1 f7       	brne	.-16     	; 0x659a <ldexp+0x18>
    65aa:	9e 3f       	cpi	r25, 0xFE	; 254
    65ac:	51 05       	cpc	r21, r1
    65ae:	2c f7       	brge	.-54     	; 0x657a <inverse+0x10>
    65b0:	88 0f       	add	r24, r24
    65b2:	91 1d       	adc	r25, r1
    65b4:	96 95       	lsr	r25
    65b6:	87 95       	ror	r24
    65b8:	97 f9       	bld	r25, 7
    65ba:	08 95       	ret
    65bc:	5f 3f       	cpi	r21, 0xFF	; 255
    65be:	ac f0       	brlt	.+42     	; 0x65ea <ldexp+0x68>
    65c0:	98 3e       	cpi	r25, 0xE8	; 232
    65c2:	9c f0       	brlt	.+38     	; 0x65ea <ldexp+0x68>
    65c4:	bb 27       	eor	r27, r27
    65c6:	86 95       	lsr	r24
    65c8:	77 95       	ror	r23
    65ca:	67 95       	ror	r22
    65cc:	b7 95       	ror	r27
    65ce:	08 f4       	brcc	.+2      	; 0x65d2 <ldexp+0x50>
    65d0:	b1 60       	ori	r27, 0x01	; 1
    65d2:	93 95       	inc	r25
    65d4:	c1 f7       	brne	.-16     	; 0x65c6 <ldexp+0x44>
    65d6:	bb 0f       	add	r27, r27
    65d8:	58 f7       	brcc	.-42     	; 0x65b0 <ldexp+0x2e>
    65da:	11 f4       	brne	.+4      	; 0x65e0 <ldexp+0x5e>
    65dc:	60 ff       	sbrs	r22, 0
    65de:	e8 cf       	rjmp	.-48     	; 0x65b0 <ldexp+0x2e>
    65e0:	6f 5f       	subi	r22, 0xFF	; 255
    65e2:	7f 4f       	sbci	r23, 0xFF	; 255
    65e4:	8f 4f       	sbci	r24, 0xFF	; 255
    65e6:	9f 4f       	sbci	r25, 0xFF	; 255
    65e8:	e3 cf       	rjmp	.-58     	; 0x65b0 <ldexp+0x2e>
    65ea:	0c 94 91 31 	jmp	0x6322	; 0x6322 <__fp_szero>
    65ee:	16 f0       	brts	.+4      	; 0x65f4 <ldexp+0x72>
    65f0:	0c 94 7b 33 	jmp	0x66f6	; 0x66f6 <__fp_mpack>
    65f4:	0c 94 4c 31 	jmp	0x6298	; 0x6298 <__fp_nan>
    65f8:	68 94       	set
    65fa:	0c 94 46 31 	jmp	0x628c	; 0x628c <__fp_inf>

000065fe <log>:
    65fe:	0e 94 76 31 	call	0x62ec	; 0x62ec <__fp_splitA>
    6602:	a8 f3       	brcs	.-22     	; 0x65ee <ldexp+0x6c>
    6604:	99 23       	and	r25, r25
    6606:	c1 f3       	breq	.-16     	; 0x65f8 <ldexp+0x76>
    6608:	ae f3       	brts	.-22     	; 0x65f4 <ldexp+0x72>
    660a:	df 93       	push	r29
    660c:	cf 93       	push	r28
    660e:	1f 93       	push	r17
    6610:	0f 93       	push	r16
    6612:	ff 92       	push	r15
    6614:	c9 2f       	mov	r28, r25
    6616:	dd 27       	eor	r29, r29
    6618:	88 23       	and	r24, r24
    661a:	2a f0       	brmi	.+10     	; 0x6626 <log+0x28>
    661c:	21 97       	sbiw	r28, 0x01	; 1
    661e:	66 0f       	add	r22, r22
    6620:	77 1f       	adc	r23, r23
    6622:	88 1f       	adc	r24, r24
    6624:	da f7       	brpl	.-10     	; 0x661c <log+0x1e>
    6626:	20 e0       	ldi	r18, 0x00	; 0
    6628:	30 e0       	ldi	r19, 0x00	; 0
    662a:	40 e8       	ldi	r20, 0x80	; 128
    662c:	5f eb       	ldi	r21, 0xBF	; 191
    662e:	9f e3       	ldi	r25, 0x3F	; 63
    6630:	88 39       	cpi	r24, 0x98	; 152
    6632:	20 f0       	brcs	.+8      	; 0x663c <log+0x3e>
    6634:	80 3e       	cpi	r24, 0xE0	; 224
    6636:	38 f0       	brcs	.+14     	; 0x6646 <log+0x48>
    6638:	21 96       	adiw	r28, 0x01	; 1
    663a:	8f 77       	andi	r24, 0x7F	; 127
    663c:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    6640:	e0 e9       	ldi	r30, 0x90	; 144
    6642:	f0 e0       	ldi	r31, 0x00	; 0
    6644:	04 c0       	rjmp	.+8      	; 0x664e <log+0x50>
    6646:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__addsf3>
    664a:	ed eb       	ldi	r30, 0xBD	; 189
    664c:	f0 e0       	ldi	r31, 0x00	; 0
    664e:	0e 94 8e 32 	call	0x651c	; 0x651c <__fp_powser>
    6652:	8b 01       	movw	r16, r22
    6654:	be 01       	movw	r22, r28
    6656:	ec 01       	movw	r28, r24
    6658:	fb 2e       	mov	r15, r27
    665a:	6f 57       	subi	r22, 0x7F	; 127
    665c:	71 09       	sbc	r23, r1
    665e:	75 95       	asr	r23
    6660:	77 1f       	adc	r23, r23
    6662:	88 0b       	sbc	r24, r24
    6664:	99 0b       	sbc	r25, r25
    6666:	0e 94 0b 31 	call	0x6216	; 0x6216 <__floatsisf>
    666a:	28 e1       	ldi	r18, 0x18	; 24
    666c:	32 e7       	ldi	r19, 0x72	; 114
    666e:	41 e3       	ldi	r20, 0x31	; 49
    6670:	5f e3       	ldi	r21, 0x3F	; 63
    6672:	0e 94 aa 31 	call	0x6354	; 0x6354 <__mulsf3x>
    6676:	af 2d       	mov	r26, r15
    6678:	98 01       	movw	r18, r16
    667a:	ae 01       	movw	r20, r28
    667c:	ff 90       	pop	r15
    667e:	0f 91       	pop	r16
    6680:	1f 91       	pop	r17
    6682:	cf 91       	pop	r28
    6684:	df 91       	pop	r29
    6686:	0e 94 0c 30 	call	0x6018	; 0x6018 <__addsf3x>
    668a:	0c 94 5d 31 	jmp	0x62ba	; 0x62ba <__fp_round>

0000668e <modf>:
    668e:	fa 01       	movw	r30, r20
    6690:	dc 01       	movw	r26, r24
    6692:	aa 0f       	add	r26, r26
    6694:	bb 1f       	adc	r27, r27
    6696:	9b 01       	movw	r18, r22
    6698:	ac 01       	movw	r20, r24
    669a:	bf 57       	subi	r27, 0x7F	; 127
    669c:	28 f4       	brcc	.+10     	; 0x66a8 <modf+0x1a>
    669e:	22 27       	eor	r18, r18
    66a0:	33 27       	eor	r19, r19
    66a2:	44 27       	eor	r20, r20
    66a4:	50 78       	andi	r21, 0x80	; 128
    66a6:	20 c0       	rjmp	.+64     	; 0x66e8 <modf+0x5a>
    66a8:	b7 51       	subi	r27, 0x17	; 23
    66aa:	90 f4       	brcc	.+36     	; 0x66d0 <modf+0x42>
    66ac:	ab 2f       	mov	r26, r27
    66ae:	00 24       	eor	r0, r0
    66b0:	46 95       	lsr	r20
    66b2:	37 95       	ror	r19
    66b4:	27 95       	ror	r18
    66b6:	01 1c       	adc	r0, r1
    66b8:	a3 95       	inc	r26
    66ba:	d2 f3       	brmi	.-12     	; 0x66b0 <modf+0x22>
    66bc:	00 20       	and	r0, r0
    66be:	71 f0       	breq	.+28     	; 0x66dc <modf+0x4e>
    66c0:	22 0f       	add	r18, r18
    66c2:	33 1f       	adc	r19, r19
    66c4:	44 1f       	adc	r20, r20
    66c6:	b3 95       	inc	r27
    66c8:	da f3       	brmi	.-10     	; 0x66c0 <modf+0x32>
    66ca:	0e d0       	rcall	.+28     	; 0x66e8 <modf+0x5a>
    66cc:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__subsf3>
    66d0:	61 30       	cpi	r22, 0x01	; 1
    66d2:	71 05       	cpc	r23, r1
    66d4:	a0 e8       	ldi	r26, 0x80	; 128
    66d6:	8a 07       	cpc	r24, r26
    66d8:	b9 46       	sbci	r27, 0x69	; 105
    66da:	30 f4       	brcc	.+12     	; 0x66e8 <modf+0x5a>
    66dc:	9b 01       	movw	r18, r22
    66de:	ac 01       	movw	r20, r24
    66e0:	66 27       	eor	r22, r22
    66e2:	77 27       	eor	r23, r23
    66e4:	88 27       	eor	r24, r24
    66e6:	90 78       	andi	r25, 0x80	; 128
    66e8:	30 96       	adiw	r30, 0x00	; 0
    66ea:	21 f0       	breq	.+8      	; 0x66f4 <modf+0x66>
    66ec:	20 83       	st	Z, r18
    66ee:	31 83       	std	Z+1, r19	; 0x01
    66f0:	42 83       	std	Z+2, r20	; 0x02
    66f2:	53 83       	std	Z+3, r21	; 0x03
    66f4:	08 95       	ret

000066f6 <__fp_mpack>:
    66f6:	9f 3f       	cpi	r25, 0xFF	; 255
    66f8:	31 f0       	breq	.+12     	; 0x6706 <__fp_mpack_finite+0xc>

000066fa <__fp_mpack_finite>:
    66fa:	91 50       	subi	r25, 0x01	; 1
    66fc:	20 f4       	brcc	.+8      	; 0x6706 <__fp_mpack_finite+0xc>
    66fe:	87 95       	ror	r24
    6700:	77 95       	ror	r23
    6702:	67 95       	ror	r22
    6704:	b7 95       	ror	r27
    6706:	88 0f       	add	r24, r24
    6708:	91 1d       	adc	r25, r1
    670a:	96 95       	lsr	r25
    670c:	87 95       	ror	r24
    670e:	97 f9       	bld	r25, 7
    6710:	08 95       	ret

00006712 <__mulsi3>:
    6712:	db 01       	movw	r26, r22
    6714:	8f 93       	push	r24
    6716:	9f 93       	push	r25
    6718:	0e 94 f8 33 	call	0x67f0	; 0x67f0 <__muluhisi3>
    671c:	bf 91       	pop	r27
    671e:	af 91       	pop	r26
    6720:	a2 9f       	mul	r26, r18
    6722:	80 0d       	add	r24, r0
    6724:	91 1d       	adc	r25, r1
    6726:	a3 9f       	mul	r26, r19
    6728:	90 0d       	add	r25, r0
    672a:	b2 9f       	mul	r27, r18
    672c:	90 0d       	add	r25, r0
    672e:	11 24       	eor	r1, r1
    6730:	08 95       	ret

00006732 <__udivmodhi4>:
    6732:	aa 1b       	sub	r26, r26
    6734:	bb 1b       	sub	r27, r27
    6736:	51 e1       	ldi	r21, 0x11	; 17
    6738:	07 c0       	rjmp	.+14     	; 0x6748 <__udivmodhi4_ep>

0000673a <__udivmodhi4_loop>:
    673a:	aa 1f       	adc	r26, r26
    673c:	bb 1f       	adc	r27, r27
    673e:	a6 17       	cp	r26, r22
    6740:	b7 07       	cpc	r27, r23
    6742:	10 f0       	brcs	.+4      	; 0x6748 <__udivmodhi4_ep>
    6744:	a6 1b       	sub	r26, r22
    6746:	b7 0b       	sbc	r27, r23

00006748 <__udivmodhi4_ep>:
    6748:	88 1f       	adc	r24, r24
    674a:	99 1f       	adc	r25, r25
    674c:	5a 95       	dec	r21
    674e:	a9 f7       	brne	.-22     	; 0x673a <__udivmodhi4_loop>
    6750:	80 95       	com	r24
    6752:	90 95       	com	r25
    6754:	bc 01       	movw	r22, r24
    6756:	cd 01       	movw	r24, r26
    6758:	08 95       	ret

0000675a <__divmodhi4>:
    675a:	97 fb       	bst	r25, 7
    675c:	07 2e       	mov	r0, r23
    675e:	16 f4       	brtc	.+4      	; 0x6764 <__divmodhi4+0xa>
    6760:	00 94       	com	r0
    6762:	07 d0       	rcall	.+14     	; 0x6772 <__divmodhi4_neg1>
    6764:	77 fd       	sbrc	r23, 7
    6766:	09 d0       	rcall	.+18     	; 0x677a <__divmodhi4_neg2>
    6768:	0e 94 99 33 	call	0x6732	; 0x6732 <__udivmodhi4>
    676c:	07 fc       	sbrc	r0, 7
    676e:	05 d0       	rcall	.+10     	; 0x677a <__divmodhi4_neg2>
    6770:	3e f4       	brtc	.+14     	; 0x6780 <__divmodhi4_exit>

00006772 <__divmodhi4_neg1>:
    6772:	90 95       	com	r25
    6774:	81 95       	neg	r24
    6776:	9f 4f       	sbci	r25, 0xFF	; 255
    6778:	08 95       	ret

0000677a <__divmodhi4_neg2>:
    677a:	70 95       	com	r23
    677c:	61 95       	neg	r22
    677e:	7f 4f       	sbci	r23, 0xFF	; 255

00006780 <__divmodhi4_exit>:
    6780:	08 95       	ret

00006782 <__udivmodsi4>:
    6782:	a1 e2       	ldi	r26, 0x21	; 33
    6784:	1a 2e       	mov	r1, r26
    6786:	aa 1b       	sub	r26, r26
    6788:	bb 1b       	sub	r27, r27
    678a:	fd 01       	movw	r30, r26
    678c:	0d c0       	rjmp	.+26     	; 0x67a8 <__udivmodsi4_ep>

0000678e <__udivmodsi4_loop>:
    678e:	aa 1f       	adc	r26, r26
    6790:	bb 1f       	adc	r27, r27
    6792:	ee 1f       	adc	r30, r30
    6794:	ff 1f       	adc	r31, r31
    6796:	a2 17       	cp	r26, r18
    6798:	b3 07       	cpc	r27, r19
    679a:	e4 07       	cpc	r30, r20
    679c:	f5 07       	cpc	r31, r21
    679e:	20 f0       	brcs	.+8      	; 0x67a8 <__udivmodsi4_ep>
    67a0:	a2 1b       	sub	r26, r18
    67a2:	b3 0b       	sbc	r27, r19
    67a4:	e4 0b       	sbc	r30, r20
    67a6:	f5 0b       	sbc	r31, r21

000067a8 <__udivmodsi4_ep>:
    67a8:	66 1f       	adc	r22, r22
    67aa:	77 1f       	adc	r23, r23
    67ac:	88 1f       	adc	r24, r24
    67ae:	99 1f       	adc	r25, r25
    67b0:	1a 94       	dec	r1
    67b2:	69 f7       	brne	.-38     	; 0x678e <__udivmodsi4_loop>
    67b4:	60 95       	com	r22
    67b6:	70 95       	com	r23
    67b8:	80 95       	com	r24
    67ba:	90 95       	com	r25
    67bc:	9b 01       	movw	r18, r22
    67be:	ac 01       	movw	r20, r24
    67c0:	bd 01       	movw	r22, r26
    67c2:	cf 01       	movw	r24, r30
    67c4:	08 95       	ret

000067c6 <__tablejump2__>:
    67c6:	ee 0f       	add	r30, r30
    67c8:	ff 1f       	adc	r31, r31
    67ca:	05 90       	lpm	r0, Z+
    67cc:	f4 91       	lpm	r31, Z
    67ce:	e0 2d       	mov	r30, r0
    67d0:	09 94       	ijmp

000067d2 <__umulhisi3>:
    67d2:	a2 9f       	mul	r26, r18
    67d4:	b0 01       	movw	r22, r0
    67d6:	b3 9f       	mul	r27, r19
    67d8:	c0 01       	movw	r24, r0
    67da:	a3 9f       	mul	r26, r19
    67dc:	70 0d       	add	r23, r0
    67de:	81 1d       	adc	r24, r1
    67e0:	11 24       	eor	r1, r1
    67e2:	91 1d       	adc	r25, r1
    67e4:	b2 9f       	mul	r27, r18
    67e6:	70 0d       	add	r23, r0
    67e8:	81 1d       	adc	r24, r1
    67ea:	11 24       	eor	r1, r1
    67ec:	91 1d       	adc	r25, r1
    67ee:	08 95       	ret

000067f0 <__muluhisi3>:
    67f0:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__umulhisi3>
    67f4:	a5 9f       	mul	r26, r21
    67f6:	90 0d       	add	r25, r0
    67f8:	b4 9f       	mul	r27, r20
    67fa:	90 0d       	add	r25, r0
    67fc:	a4 9f       	mul	r26, r20
    67fe:	80 0d       	add	r24, r0
    6800:	91 1d       	adc	r25, r1
    6802:	11 24       	eor	r1, r1
    6804:	08 95       	ret

00006806 <memcpy>:
    6806:	fb 01       	movw	r30, r22
    6808:	dc 01       	movw	r26, r24
    680a:	02 c0       	rjmp	.+4      	; 0x6810 <memcpy+0xa>
    680c:	01 90       	ld	r0, Z+
    680e:	0d 92       	st	X+, r0
    6810:	41 50       	subi	r20, 0x01	; 1
    6812:	50 40       	sbci	r21, 0x00	; 0
    6814:	d8 f7       	brcc	.-10     	; 0x680c <memcpy+0x6>
    6816:	08 95       	ret

00006818 <memset>:
    6818:	dc 01       	movw	r26, r24
    681a:	01 c0       	rjmp	.+2      	; 0x681e <memset+0x6>
    681c:	6d 93       	st	X+, r22
    681e:	41 50       	subi	r20, 0x01	; 1
    6820:	50 40       	sbci	r21, 0x00	; 0
    6822:	e0 f7       	brcc	.-8      	; 0x681c <memset+0x4>
    6824:	08 95       	ret

00006826 <strchr>:
    6826:	fc 01       	movw	r30, r24
    6828:	81 91       	ld	r24, Z+
    682a:	86 17       	cp	r24, r22
    682c:	21 f0       	breq	.+8      	; 0x6836 <strchr+0x10>
    682e:	88 23       	and	r24, r24
    6830:	d9 f7       	brne	.-10     	; 0x6828 <strchr+0x2>
    6832:	99 27       	eor	r25, r25
    6834:	08 95       	ret
    6836:	31 97       	sbiw	r30, 0x01	; 1
    6838:	cf 01       	movw	r24, r30
    683a:	08 95       	ret

0000683c <strcmp>:
    683c:	fb 01       	movw	r30, r22
    683e:	dc 01       	movw	r26, r24
    6840:	8d 91       	ld	r24, X+
    6842:	01 90       	ld	r0, Z+
    6844:	80 19       	sub	r24, r0
    6846:	01 10       	cpse	r0, r1
    6848:	d9 f3       	breq	.-10     	; 0x6840 <strcmp+0x4>
    684a:	99 0b       	sbc	r25, r25
    684c:	08 95       	ret

0000684e <strncmp>:
    684e:	fb 01       	movw	r30, r22
    6850:	dc 01       	movw	r26, r24
    6852:	41 50       	subi	r20, 0x01	; 1
    6854:	50 40       	sbci	r21, 0x00	; 0
    6856:	30 f0       	brcs	.+12     	; 0x6864 <strncmp+0x16>
    6858:	8d 91       	ld	r24, X+
    685a:	01 90       	ld	r0, Z+
    685c:	80 19       	sub	r24, r0
    685e:	19 f4       	brne	.+6      	; 0x6866 <strncmp+0x18>
    6860:	00 20       	and	r0, r0
    6862:	b9 f7       	brne	.-18     	; 0x6852 <strncmp+0x4>
    6864:	88 1b       	sub	r24, r24
    6866:	99 0b       	sbc	r25, r25
    6868:	08 95       	ret

0000686a <strncpy>:
    686a:	fb 01       	movw	r30, r22
    686c:	dc 01       	movw	r26, r24
    686e:	41 50       	subi	r20, 0x01	; 1
    6870:	50 40       	sbci	r21, 0x00	; 0
    6872:	48 f0       	brcs	.+18     	; 0x6886 <strncpy+0x1c>
    6874:	01 90       	ld	r0, Z+
    6876:	0d 92       	st	X+, r0
    6878:	00 20       	and	r0, r0
    687a:	c9 f7       	brne	.-14     	; 0x686e <strncpy+0x4>
    687c:	01 c0       	rjmp	.+2      	; 0x6880 <strncpy+0x16>
    687e:	1d 92       	st	X+, r1
    6880:	41 50       	subi	r20, 0x01	; 1
    6882:	50 40       	sbci	r21, 0x00	; 0
    6884:	e0 f7       	brcc	.-8      	; 0x687e <strncpy+0x14>
    6886:	08 95       	ret

00006888 <strrchr>:
    6888:	fc 01       	movw	r30, r24
    688a:	81 e0       	ldi	r24, 0x01	; 1
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	01 90       	ld	r0, Z+
    6890:	06 16       	cp	r0, r22
    6892:	09 f4       	brne	.+2      	; 0x6896 <strrchr+0xe>
    6894:	cf 01       	movw	r24, r30
    6896:	00 20       	and	r0, r0
    6898:	d1 f7       	brne	.-12     	; 0x688e <strrchr+0x6>
    689a:	01 97       	sbiw	r24, 0x01	; 1
    689c:	08 95       	ret

0000689e <printf>:
    689e:	b0 e0       	ldi	r27, 0x00	; 0
    68a0:	a0 e0       	ldi	r26, 0x00	; 0
    68a2:	e5 e5       	ldi	r30, 0x55	; 85
    68a4:	f4 e3       	ldi	r31, 0x34	; 52
    68a6:	0c 94 33 37 	jmp	0x6e66	; 0x6e66 <__prologue_saves__+0x20>
    68aa:	ae 01       	movw	r20, r28
    68ac:	4b 5f       	subi	r20, 0xFB	; 251
    68ae:	5f 4f       	sbci	r21, 0xFF	; 255
    68b0:	fa 01       	movw	r30, r20
    68b2:	61 91       	ld	r22, Z+
    68b4:	71 91       	ld	r23, Z+
    68b6:	af 01       	movw	r20, r30
    68b8:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <__iob+0x2>
    68bc:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <__iob+0x3>
    68c0:	0e 94 b4 34 	call	0x6968	; 0x6968 <vfprintf>
    68c4:	e2 e0       	ldi	r30, 0x02	; 2
    68c6:	0c 94 4f 37 	jmp	0x6e9e	; 0x6e9e <__epilogue_restores__+0x20>

000068ca <puts>:
    68ca:	0f 93       	push	r16
    68cc:	1f 93       	push	r17
    68ce:	cf 93       	push	r28
    68d0:	df 93       	push	r29
    68d2:	e0 91 f8 05 	lds	r30, 0x05F8	; 0x8005f8 <__iob+0x2>
    68d6:	f0 91 f9 05 	lds	r31, 0x05F9	; 0x8005f9 <__iob+0x3>
    68da:	23 81       	ldd	r18, Z+3	; 0x03
    68dc:	10 e0       	ldi	r17, 0x00	; 0
    68de:	00 e0       	ldi	r16, 0x00	; 0
    68e0:	21 fd       	sbrc	r18, 1
    68e2:	0e c0       	rjmp	.+28     	; 0x6900 <puts+0x36>
    68e4:	0f ef       	ldi	r16, 0xFF	; 255
    68e6:	1f ef       	ldi	r17, 0xFF	; 255
    68e8:	c8 01       	movw	r24, r16
    68ea:	df 91       	pop	r29
    68ec:	cf 91       	pop	r28
    68ee:	1f 91       	pop	r17
    68f0:	0f 91       	pop	r16
    68f2:	08 95       	ret
    68f4:	09 95       	icall
    68f6:	89 2b       	or	r24, r25
    68f8:	11 f0       	breq	.+4      	; 0x68fe <puts+0x34>
    68fa:	0f ef       	ldi	r16, 0xFF	; 255
    68fc:	1f ef       	ldi	r17, 0xFF	; 255
    68fe:	ce 01       	movw	r24, r28
    6900:	ec 01       	movw	r28, r24
    6902:	89 91       	ld	r24, Y+
    6904:	60 91 f8 05 	lds	r22, 0x05F8	; 0x8005f8 <__iob+0x2>
    6908:	70 91 f9 05 	lds	r23, 0x05F9	; 0x8005f9 <__iob+0x3>
    690c:	db 01       	movw	r26, r22
    690e:	18 96       	adiw	r26, 0x08	; 8
    6910:	ed 91       	ld	r30, X+
    6912:	fc 91       	ld	r31, X
    6914:	81 11       	cpse	r24, r1
    6916:	ee cf       	rjmp	.-36     	; 0x68f4 <puts+0x2a>
    6918:	8a e0       	ldi	r24, 0x0A	; 10
    691a:	09 95       	icall
    691c:	89 2b       	or	r24, r25
    691e:	21 f3       	breq	.-56     	; 0x68e8 <puts+0x1e>
    6920:	e1 cf       	rjmp	.-62     	; 0x68e4 <puts+0x1a>

00006922 <sprintf>:
    6922:	ae e0       	ldi	r26, 0x0E	; 14
    6924:	b0 e0       	ldi	r27, 0x00	; 0
    6926:	e7 e9       	ldi	r30, 0x97	; 151
    6928:	f4 e3       	ldi	r31, 0x34	; 52
    692a:	0c 94 31 37 	jmp	0x6e62	; 0x6e62 <__prologue_saves__+0x1c>
    692e:	0d 89       	ldd	r16, Y+21	; 0x15
    6930:	1e 89       	ldd	r17, Y+22	; 0x16
    6932:	86 e0       	ldi	r24, 0x06	; 6
    6934:	8c 83       	std	Y+4, r24	; 0x04
    6936:	1a 83       	std	Y+2, r17	; 0x02
    6938:	09 83       	std	Y+1, r16	; 0x01
    693a:	8f ef       	ldi	r24, 0xFF	; 255
    693c:	9f e7       	ldi	r25, 0x7F	; 127
    693e:	9e 83       	std	Y+6, r25	; 0x06
    6940:	8d 83       	std	Y+5, r24	; 0x05
    6942:	ae 01       	movw	r20, r28
    6944:	47 5e       	subi	r20, 0xE7	; 231
    6946:	5f 4f       	sbci	r21, 0xFF	; 255
    6948:	6f 89       	ldd	r22, Y+23	; 0x17
    694a:	78 8d       	ldd	r23, Y+24	; 0x18
    694c:	ce 01       	movw	r24, r28
    694e:	01 96       	adiw	r24, 0x01	; 1
    6950:	0e 94 b4 34 	call	0x6968	; 0x6968 <vfprintf>
    6954:	2f 81       	ldd	r18, Y+7	; 0x07
    6956:	38 85       	ldd	r19, Y+8	; 0x08
    6958:	02 0f       	add	r16, r18
    695a:	13 1f       	adc	r17, r19
    695c:	f8 01       	movw	r30, r16
    695e:	10 82       	st	Z, r1
    6960:	2e 96       	adiw	r28, 0x0e	; 14
    6962:	e4 e0       	ldi	r30, 0x04	; 4
    6964:	0c 94 4d 37 	jmp	0x6e9a	; 0x6e9a <__epilogue_restores__+0x1c>

00006968 <vfprintf>:
    6968:	ab e0       	ldi	r26, 0x0B	; 11
    696a:	b0 e0       	ldi	r27, 0x00	; 0
    696c:	ea eb       	ldi	r30, 0xBA	; 186
    696e:	f4 e3       	ldi	r31, 0x34	; 52
    6970:	0c 94 23 37 	jmp	0x6e46	; 0x6e46 <__prologue_saves__>
    6974:	7c 01       	movw	r14, r24
    6976:	3b 01       	movw	r6, r22
    6978:	8a 01       	movw	r16, r20
    697a:	fc 01       	movw	r30, r24
    697c:	17 82       	std	Z+7, r1	; 0x07
    697e:	16 82       	std	Z+6, r1	; 0x06
    6980:	83 81       	ldd	r24, Z+3	; 0x03
    6982:	81 ff       	sbrs	r24, 1
    6984:	b9 c1       	rjmp	.+882    	; 0x6cf8 <vfprintf+0x390>
    6986:	9a e0       	ldi	r25, 0x0A	; 10
    6988:	29 2e       	mov	r2, r25
    698a:	ce 01       	movw	r24, r28
    698c:	01 96       	adiw	r24, 0x01	; 1
    698e:	5c 01       	movw	r10, r24
    6990:	f7 01       	movw	r30, r14
    6992:	93 81       	ldd	r25, Z+3	; 0x03
    6994:	f3 01       	movw	r30, r6
    6996:	93 fd       	sbrc	r25, 3
    6998:	85 91       	lpm	r24, Z+
    699a:	93 ff       	sbrs	r25, 3
    699c:	81 91       	ld	r24, Z+
    699e:	3f 01       	movw	r6, r30
    69a0:	88 23       	and	r24, r24
    69a2:	09 f4       	brne	.+2      	; 0x69a6 <vfprintf+0x3e>
    69a4:	46 c1       	rjmp	.+652    	; 0x6c32 <vfprintf+0x2ca>
    69a6:	85 32       	cpi	r24, 0x25	; 37
    69a8:	39 f4       	brne	.+14     	; 0x69b8 <vfprintf+0x50>
    69aa:	93 fd       	sbrc	r25, 3
    69ac:	85 91       	lpm	r24, Z+
    69ae:	93 ff       	sbrs	r25, 3
    69b0:	81 91       	ld	r24, Z+
    69b2:	3f 01       	movw	r6, r30
    69b4:	85 32       	cpi	r24, 0x25	; 37
    69b6:	29 f4       	brne	.+10     	; 0x69c2 <vfprintf+0x5a>
    69b8:	b7 01       	movw	r22, r14
    69ba:	90 e0       	ldi	r25, 0x00	; 0
    69bc:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    69c0:	e7 cf       	rjmp	.-50     	; 0x6990 <vfprintf+0x28>
    69c2:	91 2c       	mov	r9, r1
    69c4:	41 2c       	mov	r4, r1
    69c6:	51 2c       	mov	r5, r1
    69c8:	ff e1       	ldi	r31, 0x1F	; 31
    69ca:	f5 15       	cp	r31, r5
    69cc:	38 f0       	brcs	.+14     	; 0x69dc <vfprintf+0x74>
    69ce:	8b 32       	cpi	r24, 0x2B	; 43
    69d0:	09 f1       	breq	.+66     	; 0x6a14 <vfprintf+0xac>
    69d2:	88 f4       	brcc	.+34     	; 0x69f6 <vfprintf+0x8e>
    69d4:	80 32       	cpi	r24, 0x20	; 32
    69d6:	01 f1       	breq	.+64     	; 0x6a18 <vfprintf+0xb0>
    69d8:	83 32       	cpi	r24, 0x23	; 35
    69da:	21 f1       	breq	.+72     	; 0x6a24 <vfprintf+0xbc>
    69dc:	57 fc       	sbrc	r5, 7
    69de:	3a c0       	rjmp	.+116    	; 0x6a54 <vfprintf+0xec>
    69e0:	20 ed       	ldi	r18, 0xD0	; 208
    69e2:	28 0f       	add	r18, r24
    69e4:	2a 30       	cpi	r18, 0x0A	; 10
    69e6:	40 f5       	brcc	.+80     	; 0x6a38 <vfprintf+0xd0>
    69e8:	56 fe       	sbrs	r5, 6
    69ea:	1f c0       	rjmp	.+62     	; 0x6a2a <vfprintf+0xc2>
    69ec:	92 9c       	mul	r9, r2
    69ee:	20 0d       	add	r18, r0
    69f0:	11 24       	eor	r1, r1
    69f2:	92 2e       	mov	r9, r18
    69f4:	06 c0       	rjmp	.+12     	; 0x6a02 <vfprintf+0x9a>
    69f6:	8d 32       	cpi	r24, 0x2D	; 45
    69f8:	91 f0       	breq	.+36     	; 0x6a1e <vfprintf+0xb6>
    69fa:	80 33       	cpi	r24, 0x30	; 48
    69fc:	79 f7       	brne	.-34     	; 0x69dc <vfprintf+0x74>
    69fe:	68 94       	set
    6a00:	50 f8       	bld	r5, 0
    6a02:	f3 01       	movw	r30, r6
    6a04:	93 fd       	sbrc	r25, 3
    6a06:	85 91       	lpm	r24, Z+
    6a08:	93 ff       	sbrs	r25, 3
    6a0a:	81 91       	ld	r24, Z+
    6a0c:	3f 01       	movw	r6, r30
    6a0e:	81 11       	cpse	r24, r1
    6a10:	db cf       	rjmp	.-74     	; 0x69c8 <vfprintf+0x60>
    6a12:	20 c0       	rjmp	.+64     	; 0x6a54 <vfprintf+0xec>
    6a14:	68 94       	set
    6a16:	51 f8       	bld	r5, 1
    6a18:	68 94       	set
    6a1a:	52 f8       	bld	r5, 2
    6a1c:	f2 cf       	rjmp	.-28     	; 0x6a02 <vfprintf+0x9a>
    6a1e:	68 94       	set
    6a20:	53 f8       	bld	r5, 3
    6a22:	ef cf       	rjmp	.-34     	; 0x6a02 <vfprintf+0x9a>
    6a24:	68 94       	set
    6a26:	54 f8       	bld	r5, 4
    6a28:	ec cf       	rjmp	.-40     	; 0x6a02 <vfprintf+0x9a>
    6a2a:	42 9c       	mul	r4, r2
    6a2c:	20 0d       	add	r18, r0
    6a2e:	11 24       	eor	r1, r1
    6a30:	42 2e       	mov	r4, r18
    6a32:	68 94       	set
    6a34:	55 f8       	bld	r5, 5
    6a36:	e5 cf       	rjmp	.-54     	; 0x6a02 <vfprintf+0x9a>
    6a38:	8e 32       	cpi	r24, 0x2E	; 46
    6a3a:	29 f4       	brne	.+10     	; 0x6a46 <vfprintf+0xde>
    6a3c:	56 fc       	sbrc	r5, 6
    6a3e:	f9 c0       	rjmp	.+498    	; 0x6c32 <vfprintf+0x2ca>
    6a40:	68 94       	set
    6a42:	56 f8       	bld	r5, 6
    6a44:	de cf       	rjmp	.-68     	; 0x6a02 <vfprintf+0x9a>
    6a46:	8c 36       	cpi	r24, 0x6C	; 108
    6a48:	19 f4       	brne	.+6      	; 0x6a50 <vfprintf+0xe8>
    6a4a:	68 94       	set
    6a4c:	57 f8       	bld	r5, 7
    6a4e:	d9 cf       	rjmp	.-78     	; 0x6a02 <vfprintf+0x9a>
    6a50:	88 36       	cpi	r24, 0x68	; 104
    6a52:	b9 f2       	breq	.-82     	; 0x6a02 <vfprintf+0x9a>
    6a54:	98 2f       	mov	r25, r24
    6a56:	9f 7d       	andi	r25, 0xDF	; 223
    6a58:	95 54       	subi	r25, 0x45	; 69
    6a5a:	93 30       	cpi	r25, 0x03	; 3
    6a5c:	c0 f0       	brcs	.+48     	; 0x6a8e <vfprintf+0x126>
    6a5e:	83 36       	cpi	r24, 0x63	; 99
    6a60:	a1 f1       	breq	.+104    	; 0x6aca <vfprintf+0x162>
    6a62:	83 37       	cpi	r24, 0x73	; 115
    6a64:	c1 f1       	breq	.+112    	; 0x6ad6 <vfprintf+0x16e>
    6a66:	83 35       	cpi	r24, 0x53	; 83
    6a68:	09 f0       	breq	.+2      	; 0x6a6c <vfprintf+0x104>
    6a6a:	5b c0       	rjmp	.+182    	; 0x6b22 <vfprintf+0x1ba>
    6a6c:	f8 01       	movw	r30, r16
    6a6e:	c1 90       	ld	r12, Z+
    6a70:	d1 90       	ld	r13, Z+
    6a72:	8f 01       	movw	r16, r30
    6a74:	69 2d       	mov	r22, r9
    6a76:	70 e0       	ldi	r23, 0x00	; 0
    6a78:	56 fc       	sbrc	r5, 6
    6a7a:	02 c0       	rjmp	.+4      	; 0x6a80 <vfprintf+0x118>
    6a7c:	6f ef       	ldi	r22, 0xFF	; 255
    6a7e:	7f ef       	ldi	r23, 0xFF	; 255
    6a80:	c6 01       	movw	r24, r12
    6a82:	0e 94 7f 36 	call	0x6cfe	; 0x6cfe <strnlen_P>
    6a86:	4c 01       	movw	r8, r24
    6a88:	68 94       	set
    6a8a:	57 f8       	bld	r5, 7
    6a8c:	0a c0       	rjmp	.+20     	; 0x6aa2 <vfprintf+0x13a>
    6a8e:	0c 5f       	subi	r16, 0xFC	; 252
    6a90:	1f 4f       	sbci	r17, 0xFF	; 255
    6a92:	2f e3       	ldi	r18, 0x3F	; 63
    6a94:	29 83       	std	Y+1, r18	; 0x01
    6a96:	88 24       	eor	r8, r8
    6a98:	83 94       	inc	r8
    6a9a:	91 2c       	mov	r9, r1
    6a9c:	65 01       	movw	r12, r10
    6a9e:	e8 94       	clt
    6aa0:	57 f8       	bld	r5, 7
    6aa2:	53 fc       	sbrc	r5, 3
    6aa4:	04 c0       	rjmp	.+8      	; 0x6aae <vfprintf+0x146>
    6aa6:	48 14       	cp	r4, r8
    6aa8:	19 04       	cpc	r1, r9
    6aaa:	09 f0       	breq	.+2      	; 0x6aae <vfprintf+0x146>
    6aac:	18 f5       	brcc	.+70     	; 0x6af4 <vfprintf+0x18c>
    6aae:	34 2c       	mov	r3, r4
    6ab0:	81 14       	cp	r8, r1
    6ab2:	91 04       	cpc	r9, r1
    6ab4:	31 f5       	brne	.+76     	; 0x6b02 <vfprintf+0x19a>
    6ab6:	33 20       	and	r3, r3
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <vfprintf+0x154>
    6aba:	6a cf       	rjmp	.-300    	; 0x6990 <vfprintf+0x28>
    6abc:	b7 01       	movw	r22, r14
    6abe:	80 e2       	ldi	r24, 0x20	; 32
    6ac0:	90 e0       	ldi	r25, 0x00	; 0
    6ac2:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6ac6:	3a 94       	dec	r3
    6ac8:	f6 cf       	rjmp	.-20     	; 0x6ab6 <vfprintf+0x14e>
    6aca:	f8 01       	movw	r30, r16
    6acc:	80 81       	ld	r24, Z
    6ace:	89 83       	std	Y+1, r24	; 0x01
    6ad0:	0e 5f       	subi	r16, 0xFE	; 254
    6ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ad4:	e0 cf       	rjmp	.-64     	; 0x6a96 <vfprintf+0x12e>
    6ad6:	f8 01       	movw	r30, r16
    6ad8:	c1 90       	ld	r12, Z+
    6ada:	d1 90       	ld	r13, Z+
    6adc:	8f 01       	movw	r16, r30
    6ade:	69 2d       	mov	r22, r9
    6ae0:	70 e0       	ldi	r23, 0x00	; 0
    6ae2:	56 fc       	sbrc	r5, 6
    6ae4:	02 c0       	rjmp	.+4      	; 0x6aea <vfprintf+0x182>
    6ae6:	6f ef       	ldi	r22, 0xFF	; 255
    6ae8:	7f ef       	ldi	r23, 0xFF	; 255
    6aea:	c6 01       	movw	r24, r12
    6aec:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <strnlen>
    6af0:	4c 01       	movw	r8, r24
    6af2:	d5 cf       	rjmp	.-86     	; 0x6a9e <vfprintf+0x136>
    6af4:	b7 01       	movw	r22, r14
    6af6:	80 e2       	ldi	r24, 0x20	; 32
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6afe:	4a 94       	dec	r4
    6b00:	d2 cf       	rjmp	.-92     	; 0x6aa6 <vfprintf+0x13e>
    6b02:	f6 01       	movw	r30, r12
    6b04:	57 fc       	sbrc	r5, 7
    6b06:	85 91       	lpm	r24, Z+
    6b08:	57 fe       	sbrs	r5, 7
    6b0a:	81 91       	ld	r24, Z+
    6b0c:	6f 01       	movw	r12, r30
    6b0e:	b7 01       	movw	r22, r14
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6b16:	31 10       	cpse	r3, r1
    6b18:	3a 94       	dec	r3
    6b1a:	f1 e0       	ldi	r31, 0x01	; 1
    6b1c:	8f 1a       	sub	r8, r31
    6b1e:	91 08       	sbc	r9, r1
    6b20:	c7 cf       	rjmp	.-114    	; 0x6ab0 <vfprintf+0x148>
    6b22:	84 36       	cpi	r24, 0x64	; 100
    6b24:	19 f0       	breq	.+6      	; 0x6b2c <vfprintf+0x1c4>
    6b26:	89 36       	cpi	r24, 0x69	; 105
    6b28:	09 f0       	breq	.+2      	; 0x6b2c <vfprintf+0x1c4>
    6b2a:	74 c0       	rjmp	.+232    	; 0x6c14 <vfprintf+0x2ac>
    6b2c:	f8 01       	movw	r30, r16
    6b2e:	57 fe       	sbrs	r5, 7
    6b30:	6a c0       	rjmp	.+212    	; 0x6c06 <vfprintf+0x29e>
    6b32:	61 91       	ld	r22, Z+
    6b34:	71 91       	ld	r23, Z+
    6b36:	81 91       	ld	r24, Z+
    6b38:	91 91       	ld	r25, Z+
    6b3a:	8f 01       	movw	r16, r30
    6b3c:	25 2d       	mov	r18, r5
    6b3e:	2f 76       	andi	r18, 0x6F	; 111
    6b40:	d2 2e       	mov	r13, r18
    6b42:	97 ff       	sbrs	r25, 7
    6b44:	09 c0       	rjmp	.+18     	; 0x6b58 <vfprintf+0x1f0>
    6b46:	90 95       	com	r25
    6b48:	80 95       	com	r24
    6b4a:	70 95       	com	r23
    6b4c:	61 95       	neg	r22
    6b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b50:	8f 4f       	sbci	r24, 0xFF	; 255
    6b52:	9f 4f       	sbci	r25, 0xFF	; 255
    6b54:	68 94       	set
    6b56:	d7 f8       	bld	r13, 7
    6b58:	2a e0       	ldi	r18, 0x0A	; 10
    6b5a:	30 e0       	ldi	r19, 0x00	; 0
    6b5c:	a5 01       	movw	r20, r10
    6b5e:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__ultoa_invert>
    6b62:	c8 2e       	mov	r12, r24
    6b64:	ca 18       	sub	r12, r10
    6b66:	8c 2c       	mov	r8, r12
    6b68:	5d 2c       	mov	r5, r13
    6b6a:	d6 fe       	sbrs	r13, 6
    6b6c:	0c c0       	rjmp	.+24     	; 0x6b86 <vfprintf+0x21e>
    6b6e:	e8 94       	clt
    6b70:	50 f8       	bld	r5, 0
    6b72:	c9 14       	cp	r12, r9
    6b74:	40 f4       	brcc	.+16     	; 0x6b86 <vfprintf+0x21e>
    6b76:	d4 fe       	sbrs	r13, 4
    6b78:	05 c0       	rjmp	.+10     	; 0x6b84 <vfprintf+0x21c>
    6b7a:	d2 fc       	sbrc	r13, 2
    6b7c:	03 c0       	rjmp	.+6      	; 0x6b84 <vfprintf+0x21c>
    6b7e:	fd 2d       	mov	r31, r13
    6b80:	fe 7e       	andi	r31, 0xEE	; 238
    6b82:	5f 2e       	mov	r5, r31
    6b84:	89 2c       	mov	r8, r9
    6b86:	54 fe       	sbrs	r5, 4
    6b88:	8f c0       	rjmp	.+286    	; 0x6ca8 <vfprintf+0x340>
    6b8a:	fe 01       	movw	r30, r28
    6b8c:	ec 0d       	add	r30, r12
    6b8e:	f1 1d       	adc	r31, r1
    6b90:	80 81       	ld	r24, Z
    6b92:	80 33       	cpi	r24, 0x30	; 48
    6b94:	09 f0       	breq	.+2      	; 0x6b98 <vfprintf+0x230>
    6b96:	81 c0       	rjmp	.+258    	; 0x6c9a <vfprintf+0x332>
    6b98:	25 2d       	mov	r18, r5
    6b9a:	29 7e       	andi	r18, 0xE9	; 233
    6b9c:	52 2e       	mov	r5, r18
    6b9e:	85 2d       	mov	r24, r5
    6ba0:	88 70       	andi	r24, 0x08	; 8
    6ba2:	38 2e       	mov	r3, r24
    6ba4:	53 fc       	sbrc	r5, 3
    6ba6:	8f c0       	rjmp	.+286    	; 0x6cc6 <vfprintf+0x35e>
    6ba8:	50 fe       	sbrs	r5, 0
    6baa:	89 c0       	rjmp	.+274    	; 0x6cbe <vfprintf+0x356>
    6bac:	9c 2c       	mov	r9, r12
    6bae:	84 14       	cp	r8, r4
    6bb0:	18 f4       	brcc	.+6      	; 0x6bb8 <vfprintf+0x250>
    6bb2:	4c 0c       	add	r4, r12
    6bb4:	94 2c       	mov	r9, r4
    6bb6:	98 18       	sub	r9, r8
    6bb8:	54 fe       	sbrs	r5, 4
    6bba:	8b c0       	rjmp	.+278    	; 0x6cd2 <vfprintf+0x36a>
    6bbc:	b7 01       	movw	r22, r14
    6bbe:	80 e3       	ldi	r24, 0x30	; 48
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6bc6:	52 fe       	sbrs	r5, 2
    6bc8:	09 c0       	rjmp	.+18     	; 0x6bdc <vfprintf+0x274>
    6bca:	88 e7       	ldi	r24, 0x78	; 120
    6bcc:	90 e0       	ldi	r25, 0x00	; 0
    6bce:	51 fe       	sbrs	r5, 1
    6bd0:	02 c0       	rjmp	.+4      	; 0x6bd6 <vfprintf+0x26e>
    6bd2:	88 e5       	ldi	r24, 0x58	; 88
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	b7 01       	movw	r22, r14
    6bd8:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6bdc:	c9 14       	cp	r12, r9
    6bde:	08 f4       	brcc	.+2      	; 0x6be2 <vfprintf+0x27a>
    6be0:	84 c0       	rjmp	.+264    	; 0x6cea <vfprintf+0x382>
    6be2:	ca 94       	dec	r12
    6be4:	d1 2c       	mov	r13, r1
    6be6:	9f ef       	ldi	r25, 0xFF	; 255
    6be8:	c9 1a       	sub	r12, r25
    6bea:	d9 0a       	sbc	r13, r25
    6bec:	ca 0c       	add	r12, r10
    6bee:	db 1c       	adc	r13, r11
    6bf0:	f6 01       	movw	r30, r12
    6bf2:	82 91       	ld	r24, -Z
    6bf4:	6f 01       	movw	r12, r30
    6bf6:	b7 01       	movw	r22, r14
    6bf8:	90 e0       	ldi	r25, 0x00	; 0
    6bfa:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6bfe:	ac 14       	cp	r10, r12
    6c00:	bd 04       	cpc	r11, r13
    6c02:	b1 f7       	brne	.-20     	; 0x6bf0 <vfprintf+0x288>
    6c04:	58 cf       	rjmp	.-336    	; 0x6ab6 <vfprintf+0x14e>
    6c06:	61 91       	ld	r22, Z+
    6c08:	71 91       	ld	r23, Z+
    6c0a:	07 2e       	mov	r0, r23
    6c0c:	00 0c       	add	r0, r0
    6c0e:	88 0b       	sbc	r24, r24
    6c10:	99 0b       	sbc	r25, r25
    6c12:	93 cf       	rjmp	.-218    	; 0x6b3a <vfprintf+0x1d2>
    6c14:	d5 2c       	mov	r13, r5
    6c16:	e8 94       	clt
    6c18:	d4 f8       	bld	r13, 4
    6c1a:	2a e0       	ldi	r18, 0x0A	; 10
    6c1c:	30 e0       	ldi	r19, 0x00	; 0
    6c1e:	85 37       	cpi	r24, 0x75	; 117
    6c20:	39 f1       	breq	.+78     	; 0x6c70 <vfprintf+0x308>
    6c22:	95 2d       	mov	r25, r5
    6c24:	99 7f       	andi	r25, 0xF9	; 249
    6c26:	d9 2e       	mov	r13, r25
    6c28:	8f 36       	cpi	r24, 0x6F	; 111
    6c2a:	01 f1       	breq	.+64     	; 0x6c6c <vfprintf+0x304>
    6c2c:	48 f4       	brcc	.+18     	; 0x6c40 <vfprintf+0x2d8>
    6c2e:	88 35       	cpi	r24, 0x58	; 88
    6c30:	a9 f0       	breq	.+42     	; 0x6c5c <vfprintf+0x2f4>
    6c32:	f7 01       	movw	r30, r14
    6c34:	86 81       	ldd	r24, Z+6	; 0x06
    6c36:	97 81       	ldd	r25, Z+7	; 0x07
    6c38:	2b 96       	adiw	r28, 0x0b	; 11
    6c3a:	e2 e1       	ldi	r30, 0x12	; 18
    6c3c:	0c 94 3f 37 	jmp	0x6e7e	; 0x6e7e <__epilogue_restores__>
    6c40:	80 37       	cpi	r24, 0x70	; 112
    6c42:	49 f0       	breq	.+18     	; 0x6c56 <vfprintf+0x2ee>
    6c44:	88 37       	cpi	r24, 0x78	; 120
    6c46:	a9 f7       	brne	.-22     	; 0x6c32 <vfprintf+0x2ca>
    6c48:	d4 fe       	sbrs	r13, 4
    6c4a:	02 c0       	rjmp	.+4      	; 0x6c50 <vfprintf+0x2e8>
    6c4c:	68 94       	set
    6c4e:	d2 f8       	bld	r13, 2
    6c50:	20 e1       	ldi	r18, 0x10	; 16
    6c52:	30 e0       	ldi	r19, 0x00	; 0
    6c54:	0d c0       	rjmp	.+26     	; 0x6c70 <vfprintf+0x308>
    6c56:	68 94       	set
    6c58:	d4 f8       	bld	r13, 4
    6c5a:	f6 cf       	rjmp	.-20     	; 0x6c48 <vfprintf+0x2e0>
    6c5c:	54 fe       	sbrs	r5, 4
    6c5e:	03 c0       	rjmp	.+6      	; 0x6c66 <vfprintf+0x2fe>
    6c60:	e9 2f       	mov	r30, r25
    6c62:	e6 60       	ori	r30, 0x06	; 6
    6c64:	de 2e       	mov	r13, r30
    6c66:	20 e1       	ldi	r18, 0x10	; 16
    6c68:	32 e0       	ldi	r19, 0x02	; 2
    6c6a:	02 c0       	rjmp	.+4      	; 0x6c70 <vfprintf+0x308>
    6c6c:	28 e0       	ldi	r18, 0x08	; 8
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	f8 01       	movw	r30, r16
    6c72:	d7 fe       	sbrs	r13, 7
    6c74:	0d c0       	rjmp	.+26     	; 0x6c90 <vfprintf+0x328>
    6c76:	61 91       	ld	r22, Z+
    6c78:	71 91       	ld	r23, Z+
    6c7a:	81 91       	ld	r24, Z+
    6c7c:	91 91       	ld	r25, Z+
    6c7e:	8f 01       	movw	r16, r30
    6c80:	a5 01       	movw	r20, r10
    6c82:	0e 94 c5 36 	call	0x6d8a	; 0x6d8a <__ultoa_invert>
    6c86:	c8 2e       	mov	r12, r24
    6c88:	ca 18       	sub	r12, r10
    6c8a:	e8 94       	clt
    6c8c:	d7 f8       	bld	r13, 7
    6c8e:	6b cf       	rjmp	.-298    	; 0x6b66 <vfprintf+0x1fe>
    6c90:	61 91       	ld	r22, Z+
    6c92:	71 91       	ld	r23, Z+
    6c94:	90 e0       	ldi	r25, 0x00	; 0
    6c96:	80 e0       	ldi	r24, 0x00	; 0
    6c98:	f2 cf       	rjmp	.-28     	; 0x6c7e <vfprintf+0x316>
    6c9a:	52 fc       	sbrc	r5, 2
    6c9c:	02 c0       	rjmp	.+4      	; 0x6ca2 <vfprintf+0x33a>
    6c9e:	83 94       	inc	r8
    6ca0:	7e cf       	rjmp	.-260    	; 0x6b9e <vfprintf+0x236>
    6ca2:	83 94       	inc	r8
    6ca4:	83 94       	inc	r8
    6ca6:	7b cf       	rjmp	.-266    	; 0x6b9e <vfprintf+0x236>
    6ca8:	85 2d       	mov	r24, r5
    6caa:	86 78       	andi	r24, 0x86	; 134
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <vfprintf+0x348>
    6cae:	77 cf       	rjmp	.-274    	; 0x6b9e <vfprintf+0x236>
    6cb0:	f6 cf       	rjmp	.-20     	; 0x6c9e <vfprintf+0x336>
    6cb2:	b7 01       	movw	r22, r14
    6cb4:	80 e2       	ldi	r24, 0x20	; 32
    6cb6:	90 e0       	ldi	r25, 0x00	; 0
    6cb8:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6cbc:	83 94       	inc	r8
    6cbe:	84 14       	cp	r8, r4
    6cc0:	c0 f3       	brcs	.-16     	; 0x6cb2 <vfprintf+0x34a>
    6cc2:	31 2c       	mov	r3, r1
    6cc4:	79 cf       	rjmp	.-270    	; 0x6bb8 <vfprintf+0x250>
    6cc6:	34 2c       	mov	r3, r4
    6cc8:	38 18       	sub	r3, r8
    6cca:	84 14       	cp	r8, r4
    6ccc:	08 f4       	brcc	.+2      	; 0x6cd0 <vfprintf+0x368>
    6cce:	74 cf       	rjmp	.-280    	; 0x6bb8 <vfprintf+0x250>
    6cd0:	f8 cf       	rjmp	.-16     	; 0x6cc2 <vfprintf+0x35a>
    6cd2:	85 2d       	mov	r24, r5
    6cd4:	86 78       	andi	r24, 0x86	; 134
    6cd6:	09 f4       	brne	.+2      	; 0x6cda <vfprintf+0x372>
    6cd8:	81 cf       	rjmp	.-254    	; 0x6bdc <vfprintf+0x274>
    6cda:	8b e2       	ldi	r24, 0x2B	; 43
    6cdc:	51 fe       	sbrs	r5, 1
    6cde:	80 e2       	ldi	r24, 0x20	; 32
    6ce0:	57 fc       	sbrc	r5, 7
    6ce2:	8d e2       	ldi	r24, 0x2D	; 45
    6ce4:	b7 01       	movw	r22, r14
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	77 cf       	rjmp	.-274    	; 0x6bd8 <vfprintf+0x270>
    6cea:	b7 01       	movw	r22, r14
    6cec:	80 e3       	ldi	r24, 0x30	; 48
    6cee:	90 e0       	ldi	r25, 0x00	; 0
    6cf0:	0e 94 95 36 	call	0x6d2a	; 0x6d2a <fputc>
    6cf4:	9a 94       	dec	r9
    6cf6:	72 cf       	rjmp	.-284    	; 0x6bdc <vfprintf+0x274>
    6cf8:	8f ef       	ldi	r24, 0xFF	; 255
    6cfa:	9f ef       	ldi	r25, 0xFF	; 255
    6cfc:	9d cf       	rjmp	.-198    	; 0x6c38 <vfprintf+0x2d0>

00006cfe <strnlen_P>:
    6cfe:	fc 01       	movw	r30, r24
    6d00:	05 90       	lpm	r0, Z+
    6d02:	61 50       	subi	r22, 0x01	; 1
    6d04:	70 40       	sbci	r23, 0x00	; 0
    6d06:	01 10       	cpse	r0, r1
    6d08:	d8 f7       	brcc	.-10     	; 0x6d00 <strnlen_P+0x2>
    6d0a:	80 95       	com	r24
    6d0c:	90 95       	com	r25
    6d0e:	8e 0f       	add	r24, r30
    6d10:	9f 1f       	adc	r25, r31
    6d12:	08 95       	ret

00006d14 <strnlen>:
    6d14:	fc 01       	movw	r30, r24
    6d16:	61 50       	subi	r22, 0x01	; 1
    6d18:	70 40       	sbci	r23, 0x00	; 0
    6d1a:	01 90       	ld	r0, Z+
    6d1c:	01 10       	cpse	r0, r1
    6d1e:	d8 f7       	brcc	.-10     	; 0x6d16 <strnlen+0x2>
    6d20:	80 95       	com	r24
    6d22:	90 95       	com	r25
    6d24:	8e 0f       	add	r24, r30
    6d26:	9f 1f       	adc	r25, r31
    6d28:	08 95       	ret

00006d2a <fputc>:
    6d2a:	0f 93       	push	r16
    6d2c:	1f 93       	push	r17
    6d2e:	cf 93       	push	r28
    6d30:	df 93       	push	r29
    6d32:	18 2f       	mov	r17, r24
    6d34:	09 2f       	mov	r16, r25
    6d36:	eb 01       	movw	r28, r22
    6d38:	8b 81       	ldd	r24, Y+3	; 0x03
    6d3a:	81 fd       	sbrc	r24, 1
    6d3c:	09 c0       	rjmp	.+18     	; 0x6d50 <fputc+0x26>
    6d3e:	1f ef       	ldi	r17, 0xFF	; 255
    6d40:	0f ef       	ldi	r16, 0xFF	; 255
    6d42:	81 2f       	mov	r24, r17
    6d44:	90 2f       	mov	r25, r16
    6d46:	df 91       	pop	r29
    6d48:	cf 91       	pop	r28
    6d4a:	1f 91       	pop	r17
    6d4c:	0f 91       	pop	r16
    6d4e:	08 95       	ret
    6d50:	82 ff       	sbrs	r24, 2
    6d52:	14 c0       	rjmp	.+40     	; 0x6d7c <fputc+0x52>
    6d54:	2e 81       	ldd	r18, Y+6	; 0x06
    6d56:	3f 81       	ldd	r19, Y+7	; 0x07
    6d58:	8c 81       	ldd	r24, Y+4	; 0x04
    6d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    6d5c:	28 17       	cp	r18, r24
    6d5e:	39 07       	cpc	r19, r25
    6d60:	3c f4       	brge	.+14     	; 0x6d70 <fputc+0x46>
    6d62:	e8 81       	ld	r30, Y
    6d64:	f9 81       	ldd	r31, Y+1	; 0x01
    6d66:	cf 01       	movw	r24, r30
    6d68:	01 96       	adiw	r24, 0x01	; 1
    6d6a:	99 83       	std	Y+1, r25	; 0x01
    6d6c:	88 83       	st	Y, r24
    6d6e:	10 83       	st	Z, r17
    6d70:	8e 81       	ldd	r24, Y+6	; 0x06
    6d72:	9f 81       	ldd	r25, Y+7	; 0x07
    6d74:	01 96       	adiw	r24, 0x01	; 1
    6d76:	9f 83       	std	Y+7, r25	; 0x07
    6d78:	8e 83       	std	Y+6, r24	; 0x06
    6d7a:	e3 cf       	rjmp	.-58     	; 0x6d42 <fputc+0x18>
    6d7c:	e8 85       	ldd	r30, Y+8	; 0x08
    6d7e:	f9 85       	ldd	r31, Y+9	; 0x09
    6d80:	81 2f       	mov	r24, r17
    6d82:	09 95       	icall
    6d84:	89 2b       	or	r24, r25
    6d86:	a1 f3       	breq	.-24     	; 0x6d70 <fputc+0x46>
    6d88:	da cf       	rjmp	.-76     	; 0x6d3e <fputc+0x14>

00006d8a <__ultoa_invert>:
    6d8a:	fa 01       	movw	r30, r20
    6d8c:	aa 27       	eor	r26, r26
    6d8e:	28 30       	cpi	r18, 0x08	; 8
    6d90:	51 f1       	breq	.+84     	; 0x6de6 <__ultoa_invert+0x5c>
    6d92:	20 31       	cpi	r18, 0x10	; 16
    6d94:	81 f1       	breq	.+96     	; 0x6df6 <__ultoa_invert+0x6c>
    6d96:	e8 94       	clt
    6d98:	6f 93       	push	r22
    6d9a:	6e 7f       	andi	r22, 0xFE	; 254
    6d9c:	6e 5f       	subi	r22, 0xFE	; 254
    6d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    6da0:	8f 4f       	sbci	r24, 0xFF	; 255
    6da2:	9f 4f       	sbci	r25, 0xFF	; 255
    6da4:	af 4f       	sbci	r26, 0xFF	; 255
    6da6:	b1 e0       	ldi	r27, 0x01	; 1
    6da8:	3e d0       	rcall	.+124    	; 0x6e26 <__ultoa_invert+0x9c>
    6daa:	b4 e0       	ldi	r27, 0x04	; 4
    6dac:	3c d0       	rcall	.+120    	; 0x6e26 <__ultoa_invert+0x9c>
    6dae:	67 0f       	add	r22, r23
    6db0:	78 1f       	adc	r23, r24
    6db2:	89 1f       	adc	r24, r25
    6db4:	9a 1f       	adc	r25, r26
    6db6:	a1 1d       	adc	r26, r1
    6db8:	68 0f       	add	r22, r24
    6dba:	79 1f       	adc	r23, r25
    6dbc:	8a 1f       	adc	r24, r26
    6dbe:	91 1d       	adc	r25, r1
    6dc0:	a1 1d       	adc	r26, r1
    6dc2:	6a 0f       	add	r22, r26
    6dc4:	71 1d       	adc	r23, r1
    6dc6:	81 1d       	adc	r24, r1
    6dc8:	91 1d       	adc	r25, r1
    6dca:	a1 1d       	adc	r26, r1
    6dcc:	20 d0       	rcall	.+64     	; 0x6e0e <__ultoa_invert+0x84>
    6dce:	09 f4       	brne	.+2      	; 0x6dd2 <__ultoa_invert+0x48>
    6dd0:	68 94       	set
    6dd2:	3f 91       	pop	r19
    6dd4:	2a e0       	ldi	r18, 0x0A	; 10
    6dd6:	26 9f       	mul	r18, r22
    6dd8:	11 24       	eor	r1, r1
    6dda:	30 19       	sub	r19, r0
    6ddc:	30 5d       	subi	r19, 0xD0	; 208
    6dde:	31 93       	st	Z+, r19
    6de0:	de f6       	brtc	.-74     	; 0x6d98 <__ultoa_invert+0xe>
    6de2:	cf 01       	movw	r24, r30
    6de4:	08 95       	ret
    6de6:	46 2f       	mov	r20, r22
    6de8:	47 70       	andi	r20, 0x07	; 7
    6dea:	40 5d       	subi	r20, 0xD0	; 208
    6dec:	41 93       	st	Z+, r20
    6dee:	b3 e0       	ldi	r27, 0x03	; 3
    6df0:	0f d0       	rcall	.+30     	; 0x6e10 <__ultoa_invert+0x86>
    6df2:	c9 f7       	brne	.-14     	; 0x6de6 <__ultoa_invert+0x5c>
    6df4:	f6 cf       	rjmp	.-20     	; 0x6de2 <__ultoa_invert+0x58>
    6df6:	46 2f       	mov	r20, r22
    6df8:	4f 70       	andi	r20, 0x0F	; 15
    6dfa:	40 5d       	subi	r20, 0xD0	; 208
    6dfc:	4a 33       	cpi	r20, 0x3A	; 58
    6dfe:	18 f0       	brcs	.+6      	; 0x6e06 <__ultoa_invert+0x7c>
    6e00:	49 5d       	subi	r20, 0xD9	; 217
    6e02:	31 fd       	sbrc	r19, 1
    6e04:	40 52       	subi	r20, 0x20	; 32
    6e06:	41 93       	st	Z+, r20
    6e08:	02 d0       	rcall	.+4      	; 0x6e0e <__ultoa_invert+0x84>
    6e0a:	a9 f7       	brne	.-22     	; 0x6df6 <__ultoa_invert+0x6c>
    6e0c:	ea cf       	rjmp	.-44     	; 0x6de2 <__ultoa_invert+0x58>
    6e0e:	b4 e0       	ldi	r27, 0x04	; 4
    6e10:	a6 95       	lsr	r26
    6e12:	97 95       	ror	r25
    6e14:	87 95       	ror	r24
    6e16:	77 95       	ror	r23
    6e18:	67 95       	ror	r22
    6e1a:	ba 95       	dec	r27
    6e1c:	c9 f7       	brne	.-14     	; 0x6e10 <__ultoa_invert+0x86>
    6e1e:	00 97       	sbiw	r24, 0x00	; 0
    6e20:	61 05       	cpc	r22, r1
    6e22:	71 05       	cpc	r23, r1
    6e24:	08 95       	ret
    6e26:	9b 01       	movw	r18, r22
    6e28:	ac 01       	movw	r20, r24
    6e2a:	0a 2e       	mov	r0, r26
    6e2c:	06 94       	lsr	r0
    6e2e:	57 95       	ror	r21
    6e30:	47 95       	ror	r20
    6e32:	37 95       	ror	r19
    6e34:	27 95       	ror	r18
    6e36:	ba 95       	dec	r27
    6e38:	c9 f7       	brne	.-14     	; 0x6e2c <__ultoa_invert+0xa2>
    6e3a:	62 0f       	add	r22, r18
    6e3c:	73 1f       	adc	r23, r19
    6e3e:	84 1f       	adc	r24, r20
    6e40:	95 1f       	adc	r25, r21
    6e42:	a0 1d       	adc	r26, r0
    6e44:	08 95       	ret

00006e46 <__prologue_saves__>:
    6e46:	2f 92       	push	r2
    6e48:	3f 92       	push	r3
    6e4a:	4f 92       	push	r4
    6e4c:	5f 92       	push	r5
    6e4e:	6f 92       	push	r6
    6e50:	7f 92       	push	r7
    6e52:	8f 92       	push	r8
    6e54:	9f 92       	push	r9
    6e56:	af 92       	push	r10
    6e58:	bf 92       	push	r11
    6e5a:	cf 92       	push	r12
    6e5c:	df 92       	push	r13
    6e5e:	ef 92       	push	r14
    6e60:	ff 92       	push	r15
    6e62:	0f 93       	push	r16
    6e64:	1f 93       	push	r17
    6e66:	cf 93       	push	r28
    6e68:	df 93       	push	r29
    6e6a:	cd b7       	in	r28, 0x3d	; 61
    6e6c:	de b7       	in	r29, 0x3e	; 62
    6e6e:	ca 1b       	sub	r28, r26
    6e70:	db 0b       	sbc	r29, r27
    6e72:	0f b6       	in	r0, 0x3f	; 63
    6e74:	f8 94       	cli
    6e76:	de bf       	out	0x3e, r29	; 62
    6e78:	0f be       	out	0x3f, r0	; 63
    6e7a:	cd bf       	out	0x3d, r28	; 61
    6e7c:	09 94       	ijmp

00006e7e <__epilogue_restores__>:
    6e7e:	2a 88       	ldd	r2, Y+18	; 0x12
    6e80:	39 88       	ldd	r3, Y+17	; 0x11
    6e82:	48 88       	ldd	r4, Y+16	; 0x10
    6e84:	5f 84       	ldd	r5, Y+15	; 0x0f
    6e86:	6e 84       	ldd	r6, Y+14	; 0x0e
    6e88:	7d 84       	ldd	r7, Y+13	; 0x0d
    6e8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6e8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6e8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6e90:	b9 84       	ldd	r11, Y+9	; 0x09
    6e92:	c8 84       	ldd	r12, Y+8	; 0x08
    6e94:	df 80       	ldd	r13, Y+7	; 0x07
    6e96:	ee 80       	ldd	r14, Y+6	; 0x06
    6e98:	fd 80       	ldd	r15, Y+5	; 0x05
    6e9a:	0c 81       	ldd	r16, Y+4	; 0x04
    6e9c:	1b 81       	ldd	r17, Y+3	; 0x03
    6e9e:	aa 81       	ldd	r26, Y+2	; 0x02
    6ea0:	b9 81       	ldd	r27, Y+1	; 0x01
    6ea2:	ce 0f       	add	r28, r30
    6ea4:	d1 1d       	adc	r29, r1
    6ea6:	0f b6       	in	r0, 0x3f	; 63
    6ea8:	f8 94       	cli
    6eaa:	de bf       	out	0x3e, r29	; 62
    6eac:	0f be       	out	0x3f, r0	; 63
    6eae:	cd bf       	out	0x3d, r28	; 61
    6eb0:	ed 01       	movw	r28, r26
    6eb2:	08 95       	ret

00006eb4 <_exit>:
    6eb4:	f8 94       	cli

00006eb6 <__stop_program>:
    6eb6:	ff cf       	rjmp	.-2      	; 0x6eb6 <__stop_program>
    6eb8:	ed 2b       	or	r30, r29
    6eba:	0a 2c       	mov	r0, r10
    6ebc:	0a 2c       	mov	r0, r10
    6ebe:	0f 2c       	mov	r0, r15
    6ec0:	0f 2c       	mov	r0, r15
    6ec2:	0f 2c       	mov	r0, r15
    6ec4:	0f 2c       	mov	r0, r15
    6ec6:	0f 2c       	mov	r0, r15
    6ec8:	14 2c       	mov	r1, r4
    6eca:	16 2c       	mov	r1, r6
    6ecc:	16 2c       	mov	r1, r6
    6ece:	16 2c       	mov	r1, r6
    6ed0:	16 2c       	mov	r1, r6
    6ed2:	35 2c       	mov	r3, r5
    6ed4:	39 2c       	mov	r3, r9
